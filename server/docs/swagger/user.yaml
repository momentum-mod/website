paths:
  /user:
    get:
      tags:
        - user
      summary: Retrieves the authenticated user
      parameters:
        - name: expand
          in: query
          description: The names of resources to attach/expand, specified by a comma-separated list of names.
          type: array
          collectionFormat: csv
          items:
            type: string
            enum: [profile]
      responses:
        200:
          description: User is retrieved
          schema:
            $ref: '#/definitions/User'
  /user/profile:
    parameters:
      - name: userID
        in: path
        required: true
        description: ID of the user to find
        type: string
    get:
      tags:
        - user
      summary: Retrieves the authenticated user's profile
      responses:
        200:
          description: User profile is retrieved
          schema:
            $ref: '#/definitions/Profile'
    patch:
      summary: Update the authenticated user's profile
      tags:
        - user
      parameters:
        - in: body
          description: Profile with new values of properties
          schema:
            $ref: '#/definitions/Profile'
      responses:
        204:
          description: User profile is updated
  /user/maps/library:
    get:
      summary: Retrieves a list of maps in the authenticated user's library
      tags:
        - user
      responses:
        200:
          description: OK
          # TODO: schema
    post:
      summary: Adds a new map to the authenticated user's library
      tags:
        - user
      parameters:
        - in: body
          name: mapID
          description: The map ID to add to the library
          required: true
          type: integer
      responses:
        200:
          description: The library is updated
          # TODO: schema
  /user/maps/library/{mapID}:
    get:
      summary: Checks to see if a map exists in the authenticated user's library
      tags:
        - user
      parameters:
        - in: path
          name: mapID
          description: The map's ID
          required: true
          type: integer
      responses:
        200:
          description: The map exists in the user's library
        404:
          description: The map does not exist in the user's library
    delete:
      summary: Deletes a library entry from the authenticated user's library
      tags:
        - user
      parameters:
        - in: path
          name: mapID
          description: The map's ID
          required: true
          type: integer
      responses:
        200:
          description: The library entry was successfully deleted
          # TODO schema
  /user/maps/submitted:
    get:
      tags:
        - user
      summary: Retrieves a list of maps submitted by the authenticated user
      parameters:
        - name: limit
          in: query
          description: The maximum number of results to show
          type: integer
          default: 20
        - name: page
          in: query
          description: The page of results to show
          type: integer
          default: 0
        - name: search
          in: query
          description: Filter by partial name match
        - name: expand
          in: query
          description: The names of resources to attach/expand, specified by a comma-separated list of names.
          type: array
          collectionFormat: csv
          items:
            type: string
            enum: [info, submitter, credits]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Maps'
  /user/activities:
    get:
      summary: Retrieves a list of authenticated user's activities
      tags:
        - user
      parameters:
        - name: limit
          in: query
          description: The maximum number of results to show
          type: integer
          default: 10
        - name: page
          in: query
          description: The page of results to show
          type: integer
          default: 0
        - name: type
          in: query
          description: Filter by activity type
        - name: data
          in: query
          description: Filter by activity data
        - name: expand
          in: query
          description: The names of resources to attach/expand, specified by a comma-separated list of names.
          type: array
          collectionFormat: csv
          items:
            type: string
            enum: [user]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Activities'
  /user/follow:
    post:
      summary: Adds a user to the local user's follow list
      tags:
        - user
      parameters:
        - name: userID
          type: string
          description: The ID of the user to follow
          in: body
          required: true
      responses:
        200:
          description: OK
          # TODO schema?
  /user/follow/{userID}:
    parameters:
      - name: userID
        in: path
        required: true
        description: ID of the user in question
        type: string
    get:
      summary: Checks to see if the local user is following a given user
      tags:
        - user
      responses:
        200:
          description: OK
        404:
          description: The local user is not following the given user
      # TODO schema?
    patch:
      summary: Updates the following status
      tags:
        - user
      parameters:
        - name: notify
          type: boolean
          description: Whether the player wants to be notified of activity of the followed user
          in: body
      responses:
        200:
          description: OK
    delete:
      summary: Removes the user from the local user's follow list
      tags:
        - user
      responses:
        200:
          description: OK
