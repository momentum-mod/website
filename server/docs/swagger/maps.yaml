paths:
  /maps:
    post:
      tags:
        - maps
      summary: Creates a map
      parameters:
        - in: body
          description: Map that we want to create
          schema:
            $ref: '#/definitions/Map'
      responses:
        200:
          description: New map is created
          headers:
            Location:
              schema:
                type: string
              description: A URL pointing to the location to upload the map file
          schema:
            $ref: '#/definitions/Map'
        409:
          description: Map name already used or map creation limit reached
    get:
      tags:
        - maps
      summary: Retrieves a list of maps
      parameters:
        - name: limit
          in: query
          description: The maximum number of results to show
          type: integer
          default: 20
        - name: offset
          in: query
          description: The offset for the results to show
          type: integer
          default: 0
        - name: search
          in: query
          description: Filter by partial name match
          type: string
        - name: submitterID
          in: query
          description: Filter by the submitter ID
          type: string
        - name: expand
          in: query
          description: The names of resources to attach/expand, specified by a comma-separated list of names.
          type: array
          collectionFormat: csv
          items:
            type: string
            enum: [info, submitter, credits, thumbnail, inFavorites, inLibrary]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Maps'
  /maps/{mapID}:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    get:
      tags:
        - maps
      summary: Retrieves a specific map
      parameters:
        - name: expand
          in: query
          description: The names of resources to attach/expand, specified by a comma-separated list of names.
          type: array
          collectionFormat: csv
          items:
            type: string
            enum: [info, submitter, credits, thumbnail, images, stats, inFavorites, inLibrary]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Maps'
        404:
          description: Map is not found
    patch:
      tags:
        - maps
      summary: Updates a specific map
      parameters:
        - in: body
          description: Map with new values of properties
          schema:
            $ref: '#/definitions/Map'
      responses:
        204:
          description: Map is updated
  /maps/{mapID}/info:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    get:
      tags:
        - maps
      summary: Retrieves info about a specific map
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/MapInfo'
        404:
          description: Map info is not found
    patch:
      tags:
        - maps
      summary: Updates info for a specific map
      parameters:
        - in: body
          description: Map info with new values of properties
          schema:
            $ref: '#/definitions/MapInfo'
      responses:
        204:
          description: Map info is updated
  /maps/{mapID}/credits:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    get:
      tags:
        - maps
      summary: Retrieves a map's credits
      parameters:
        - name: expand
          in: query
          description: The names of resources to attach/expand, specified by a comma-separated list of names.
          type: array
          collectionFormat: csv
          items:
            type: string
            enum: [user]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/MapCredits'
        404:
          description: Map is not found
    post:
      tags:
        - maps
      summary: Creates a map credit
      parameters:
        - in: body
          description: Map credit with new values of properties
          schema:
            $ref: '#/definitions/MapCredit'
      responses:
        200:
          description: Map info is created
          schema:
            $ref: '#/definitions/MapCredit'
  /maps/{mapID}/credits/{mapCredID}:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
      - name: mapCredID
        in: path
        required: true
        description: ID of the credit to find
        type: integer
    get:
      tags:
        - maps
      summary: Retrieves a specific map credit
      parameters:
        - name: expand
          in: query
          description: The names of resources to attach/expand, specified by a comma-separated list of names.
          type: array
          collectionFormat: csv
          items:
            type: string
            enum: [user]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/MapCredit'
        404:
          description: Map credit is not found
    patch:
      tags:
        - maps
      summary: Updates a specific map credit
      parameters:
        - in: body
          description: Map credit with new values of properties
          schema:
            $ref: '#/definitions/MapCredit'
      responses:
        204:
          description: Map credit is updated
    delete:
      tags:
        - maps
      summary: Deletes a specific map credit
      responses:
        200:
          description: Map credit is deleted
  /maps/{mapID}/thumbnail:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    put:
      tags:
        - maps
      summary: Uploads and updates the thumbnail for a map
      consumes:
        - multipart/form-data
      parameters:
        - name: thumbnailFile
          in: formData
          required: true
          description: The thumbnail image file to upload
          type: file
      responses:
        204:
          description: Map thumbnail is updated
        400:
          description: No image file provided or image is invalid format
        404:
          description: Map is not found
  /maps/{mapID}/upload:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    get:
      tags:
        - maps
      summary: Rerieves the location to upload a map file to for a specific map
      responses:
        204:
          description: Map upload location is retrieved
          headers:
            Location:
              schema:
                type: string
              description: A URL pointing to the location to upload the map file
    post:
      tags:
        - maps
      summary: Uploads the map file for a map
      consumes:
        - multipart/form-data
      parameters:
        - name: mapFile
          in: formData
          required: true
          description: The map file to upload
          type: file
      responses:
        200:
          description: Map file is uploaded
        400:
          description: No map file provided
        404:
          description: Map is not found
        409:
          description: Map file has already been uploaded for map
  /maps/{mapID}/download:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    get:
      tags:
        - maps
      summary: Downloads the map file for a map
      produces:
        - application/octet-steam
      responses:
        200:
          description: A map file in BSP format
          schema:
            type: file
        404:
          description: Map is not found
  /maps/{mapID}/images:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    get:
      tags:
        - maps
      summary: Retrieves a specific map's images
      responses:
        200:
          description: A list of map images
          schema:
            $ref: '#/definitions/MapImages'
    post:
      tags:
        - maps
      summary: Create an image for a specific map
      consumes:
        - multipart/form-data
      responses:
        200:
          description: Map image is created
          schema:
            $ref: '#/definitions/MapImage'
        400:
          description: No map image file provided
        404:
          description: Map not found
        409:
          description: Map image file limit reached
  /maps/{mapID}/images/{imgID}:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
      - name: imgID
        in: path
        required: true
        description: ID of the map image to find
        type: string
    get:
      tags:
        - maps
      summary: Retrieves a specific map image
      responses:
        200:
          description: A map image
          schema:
            $ref: '#/definitions/MapImage'
        404:
          description: The map image is not found
    put:
      tags:
        - maps
      summary: Updates a specific map image
      responses:
        204:
          description: Map image is updated
        400:
          description: No map image file provided
        404:
          description: Map image not found
    delete:
      tags:
        - maps
      summary: Deletes a specific map image
      responses:
        200:
          description: Map image is deleted
  /maps/{mapID}/runs:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
    post:
      summary: Submit a run file
      consumes:
        - application/octet-stream
      tags:
        - maps
      parameters:
        - in: body
          required: true
          description: The run file binary data to upload
          type: file
      responses:
        200:
          description: Run file is submitted
          schema:
            allOf:
              - $ref: '#/definitions/Run'
              - type: object
                properties:
                  isPersonalBest:
                    type: boolean
                  isNewWorldRecord:
                    type: boolean
                  stats:
                    $ref: '#/definitions/RunStats'
        400:
          description: No run file provided or run file is invalid
        409:
          description: The map is not accepting submissions (disabled)
    get:
      summary: Retrieves a list of runs for a specific map
      tags:
        - maps
      parameters:
        - name: limit
          in: query
          description: The maximum number of results to show
          type: integer
          default: 10
        - name: offset
          in: query
          description: The offset for the results to show
          type: integer
          default: 0
        - name: playerID
          in: query
          description: Filter by player ID
        - name: playerIDs
          in: query
          description: Filter by player IDs
          type: array
          collectionFormat: csv
        - name: flags
          in: query
          description: Filter by a specific flags value
          type: integer
          default: 0
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Runs'
  /maps/{mapID}/runs/friends:
    parameters:
      - name: runID
        in: path
        required: true
        description: ID of the run to find
        type: string
      - name: runID
        in: path
        required: true
        description: ID of the run to find
        type: string
    get:
      summary: Retrieves a list of runs for a specific map from the authenticated user's Steam friends
      tags:
        - maps
      parameters:
        - name: limit
          in: query
          description: The maximum number of results to show
          type: integer
          default: 10
        - name: offset
          in: query
          description: The offset for the results to show
          type: integer
          default: 0
        - name: flags
          in: query
          description: Filter by a specific flags value
          type: integer
          default: 0
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Runs'
  /maps/{mapID}/runs/{runID}:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
      - name: runID
        in: path
        required: true
        description: ID of the run to find
        type: string
    get:
      summary: Retrieves a specific run
      tags:
        - maps
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Run'
        404:
          description: The run is not found
          schema:
            $ref: '#/definitions/Error'
  /maps/{mapID}/runs/{runID}/download:
    parameters:
      - name: mapID
        in: path
        required: true
        description: ID of the map to find
        type: string
      - name: runID
        in: path
        required: true
        description: ID of the run to find
        type: string
    get:
      tags:
        - maps
      summary: Downloads the run replay file for a run
      produces:
        - application/octet-steam
      responses:
        200:
          description: A run replay file in binary format
          schema:
            type: file
        404:
          description: Run is not found
definitions:
  Map:
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      submitterID:
        type: string
        format: int64
        readOnly: true
      name:
        type: string
        readOnly: true
      statusFlag:
        type: integer
      leaderboardID:
        type: integer
        readOnly: true
      download:
        type: string
        readOnly: true
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  Maps:
    properties:
      count:
        type: integer
      maps:
        type: array
        items:
          $ref: '#/definitions/Map'
  MapInfo:
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      mapID:
        type: integer
        format: int64
        readOnly: true
      description:
        type: string
        nullable: true
      numTracks:
        type: integer
        format: int32
        nullable: true
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  MapTrack:
    properties:
      trackNum:
        type: integer
        format: int8
        readOnly: true
      mapID:
        type: integer
        format: int32
        readOnly: true
      numZones:
        type: integer
        format: int8
        readOnly: true
      isLinear:
        type: boolean
        format: boolean
        readOnly: true
      difficulty:
        type: integer
        format: int8
        readOnly: true
  MapCredit:
    required:
      - mapID
      - type
      - userID
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      mapID:
        type: integer
        format: int32
        readOnly: true
      type:
        type: integer
        format: int64
        minimum: 0
      userID:
        type: string
        format: int64
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  MapCredits:
    properties:
      mapCredits:
        type: array
        items:
          $ref: '#/definitions/MapCredit'
  MapImage:
    properties:
      id:
        type: integer
        readOnly: true
      mapID:
        type: integer
        readOnly: true
      small:
        type: string
      medium:
        type: string
      large:
        type: string
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  MapImages:
    properties:
      images:
        type: array
        items:
          $ref: '#/definitions/MapImage'
  MapStats:
    properties:
      id:
        type: integer
        readOnly: true
      mapID:
        type: integer
        readOnly: true
      totalReviews:
        type: integer
        readOnly: true
      totalDownloads:
        type: integer
        readOnly: true
      totalSubscriptions:
        type: integer
        readOnly: true
      totalPlays:
        type: integer
        readOnly: true
      totalCompletions:
        type: integer
        readOnly: true
      totalUniqueCompletions:
        type: integer
        readOnly: true
      totalTimePlayed:
        type: integer
        readOnly: true
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
