@import '@fontsource/roboto/300.css';
@import '@fontsource/roboto/300-italic.css';
@import '@fontsource/roboto/400.css';
@import '@fontsource/roboto/400-italic.css';
@import '@fontsource/roboto/500.css';
@import '@fontsource/roboto/500-italic.css';
@import '@fontsource/roboto/700.css';
@import '@fontsource/roboto/700-italic.css';

@import './primeng-theme-nolayers.css';
@import './primeng-nolayers.css';
@import './primeng-overrides.css';

@import './shared_styling/fonts/BebasNeue/300.css';
@import './shared_styling/fonts/BebasNeue/400.css';
@import './shared_styling/fonts/BebasNeue/700.css';
@import './shared_styling/colors/colors-css-vars.css';

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --sidenav-width-wide: 15rem;
  --sidenav-width-smol: 3.75rem;
}

@layer base {
  html {
    scroll-behavior: smooth;
    height: 100vh;
    width: 100vw;
  }

  /* If the user prefers dark mode, we of course apply color-scheme: dark, as usual */
  @media (prefers-color-scheme: dark) {
    html {
      color-scheme: dark;
    }
  }

  /* If the user prefers light mode, we still enforce color-scheme: dark, despite the user preference */
  @media (prefers-color-scheme: light) {
    html {
      color-scheme: dark;
    }
  }

  iframe {
    border: none;
  }
}

@layer components {
  m-icon {
    display: inline-block;
    width: 1em;
    height: 1em;
    font-size: 1.5rem;

    & svg {
      vertical-align: middle;
    }
  }

  .m-card {
    border-radius: 0.25rem;
    padding: 1rem;
    border: 1px solid rgb(255 255 255 / 0.05);
    box-shadow: 1px 2px 16px rgb(0 0 0 / 0.4);
    backdrop-filter: none;

    background-color: rgb(var(--gray-600) / 0.8);
  }

  .m-card--fancy {
    background-color: rgb(255 255 255 / 0.05);
    backdrop-filter: blur(48px) brightness(0.9);
  }

  .m-card-title {
    @apply font-display;
    font-weight: 700;
    opacity: 0.875;
    line-height: 1;
    filter: drop-shadow(1px 2px 4px rgb(0 0 0 / 0.3))
      drop-shadow(3px 6px 16px rgb(0 0 0 / 0.4));
  }

  .m-card-inset {
    padding: 0.75rem;
    border-radius: 0.25rem;
    background-color: rgba(0 0 0 / 0.15);
    box-shadow: inset 0 0 0.75rem rgb(0 0 0 / 0.1);
    border: 1px solid rgba(255 255 255 / 0.1);

    &:is(fieldset) {
      padding: 0.25rem 1rem 0.75rem 1rem;
    }
  }

  .m-btn {
    display: flex;
    justify-content: center;
    padding: 0.5rem 0.75rem;
    border-radius: 0.25rem;
    font-weight: 500;
    box-shadow: inset 0 1px 1px white;
    background-color: theme('colors.gray.500');

    @apply bg-gray-600 hover:bg-gray-500 shadow-lg transition-colors;

    &:disabled {
      pointer-events: none;
      filter: contrast(0.3) brightness(0.5);
    }
  }

  .m-btn-blue {
    @apply bg-blue-500 hover:bg-blue-400;
  }

  .m-btn-red {
    @apply bg-red-500 hover:bg-red-400;
  }

  .m-btn-green {
    @apply bg-green-400 hover:bg-green-500;
  }

  .m-btn-orange {
    @apply bg-orange-400 hover:bg-orange-500;
  }

  .m-textinput {
    padding: 0.5rem 1rem;
    /*line-height: 1.25rem;*/
    border-radius: 0.25rem;

    @apply border border-white border-opacity-[0.025];

    transition-duration: 0.1s;
    transition-property: border, background-color, color, box-shadow;
    transition-timing-function: ease-out;

    @apply bg-gray-700 bg-opacity-50;

    &:hover {
      @apply bg-opacity-100 border-opacity-[0.05];
    }

    &:focus {
      outline: none !important;
      @apply bg-opacity-100 border-opacity-[0.1];
    }
  }

  .m-textinput-validated {
    /*
    // Making valid go green feels a bit much
    &.ng-valid.ng-dirty {
      @apply border-green-500 !important;
    }
    */

    &.ng-invalid.ng-dirty {
      @apply border-red-500 !important;
    }

    &.ng-pending.ng-dirty {
      @apply border-orange-500 !important;
    }
  }

  /* Using techniques from https://moderncss.dev/pure-css-custom-checkbox-style/ */
  .m-checkbox {
    vertical-align: middle;
    height: 1.5rem;
    aspect-ratio: 1 / 1;
    /*padding: 1.125rem; !* This value controls the overall width/height of the element.*!*/
    -webkit-appearance: none;
    appearance: none;
    margin: 0;
    font: inherit;
    color: #1896d3;
    content: ' ';
    border-radius: 0.25rem;
    position: relative;
    float: left;

    @apply border border-white border-opacity-[0.05];
    @apply bg-gray-800;

    &:hover {
      @apply bg-gray-700;
      @apply border-opacity-[0.05];
    }

    &:focus {
      outline: none !important;
      @apply border-opacity-[0.1];
    }

    &::before {
      position: absolute;
      content: ' ';
      width: 60%;
      height: 60%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0);
      transition: 0.1s transform ease-in-out;
      background-color: currentColor;
      transform-origin: center;
      clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    }

    &:checked::before {
      transform: translate(-50%, -50%) scale(1);
    }
  }

  .m-radio {
    padding: 0.75rem;
    -webkit-appearance: none;
    appearance: none;
    margin: 0;
    font: inherit;
    color: #1896d3;
    content: ' ';
    border-radius: 50%;
    position: relative;
    float: left;

    @apply border border-gray-300 border-opacity-[0.15];
    @apply bg-gray-800;

    &:hover {
      @apply bg-gray-700;
      @apply border-opacity-[0.2];
    }

    &:focus {
      outline: none !important;
      @apply border-opacity-[0.225];
    }

    &::before {
      position: absolute;
      content: ' ';
      width: 60%;
      height: 60%;
      top: 50%;
      left: 50%;
      border-radius: 50%;
      transform: translate(-50%, -50%) scale(0);
      transition: 0.1s transform ease-in-out;
      background-color: currentColor;
      transform-origin: center;
    }

    &:checked::before {
      transform: translate(-50%, -50%) scale(1);
    }
  }

  .m-badge {
    pointer-events: none;
    border-radius: 1rem;
    text-align: center;
    font-size: 0.875rem;
    font-weight: 500;
    min-width: 1.5rem;
    min-height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 2px 3px 8px black / 50%;
    @apply bg-gray-600;
  }

  .m-badge-blue {
    @apply bg-blue-600;
  }

  .m-badge-red {
    @apply bg-red-600 hover:bg-red-400;
  }

  .m-badge-green {
    @apply bg-green-400 hover:bg-green-500;
  }

  .m-badge-orange {
    @apply bg-orange-400 hover:bg-orange-500;
  }

  .m-spinner-container:not(.m-spinner-container--active) > m-spinner {
    display: none;
  }

  .m-spinner-container--active > *:not(m-spinner) {
    opacity: 0.8;
  }
}

@layer utilities {
  /** Useful class that uses grid to stack children without requiring
    `position: absolute` */
  .stack {
    display: grid;

    > * {
      grid-row: 1;
      grid-column: 1;
    }
  }

  .hover-white-overlay {
    display: flex;
    position: relative;

    &::after {
      position: absolute;
      left: 0;
      top: 0;
      z-index: 1000;
      height: 100%;
      width: 100%;
      background-color: rgb(255 255 255 / 0);
      content: '';
      transition: 0.1s ease-in-out;
    }

    &:hover::after {
      background-color: rgb(255 255 255 / 0.1);
    }
  }

  /*TODO: Tailwind almost supports this, remove me once we're on a release with it has it!*/
  .text-balance {
    text-wrap: balance;
  }

  .small-caps {
    font-variant: small-caps;
  }

  .all-small-caps {
    font-variant: all-small-caps;
  }

  /**
   * @tailwindcss/typography's `prose` class is styled for light-mode by
   * default, and uses prose-invert for dark mode. We're only dark mode, so
   * just apply .prose-invert on top of .prose everywhere.
   */
  .prose {
    @apply prose-invert;
  }

  .scroll-thin::-webkit-scrollbar {
    width: 4px;
    height: 4px;
  }

  .scroll-thin::-webkit-scrollbar-thumb {
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.3);
  }

  .text-shadow {
    text-shadow: 0 2px 0 rgba(0, 0, 0, 0.2);
  }

  .text-shadow-strong {
    text-shadow:
      0 1px 4px rgba(0, 0, 0, 0.15),
      0 2px 1px rgba(0, 0, 0, 0.3);
  }
}
