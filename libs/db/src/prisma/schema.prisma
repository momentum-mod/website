generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  roles Int @default(0) @db.SmallInt /// Bitfield of roles.enum.ts
  bans  Int @default(0) @db.SmallInt /// Bitfield of bans.enum.ts

  /// Optional because placeholders don't have SteamIDs
  steamID BigInt? @unique(map: "user_steamID") @db.BigInt
  alias   String
  avatar  String?
  country String? @db.Char(2)

  userAuth          UserAuth?
  profile           Profile?
  userStats         UserStats?
  submittedMaps     MMap[]
  mapCredits        MapCredit[]
  mapFavorites      MapFavorite[]
  mapLibraryEntries MapLibraryEntry[]
  activities        Activity[]
  follows           Follow[]            @relation("follow_follow")
  followers         Follow[]            @relation("follow_follower")
  mapNotifies       MapNotify[]
  notifications     Notification[]      @relation("notifs_to")
  runSessions       RunSession[]
  leaderboardRuns   LeaderboardRun[]
  pastRuns          PastRun[]
  reportSubmitted   Report[]            @relation("report_submitter")
  reportResolved    Report[]            @relation("report_resolver")
  testingRequests   MapTestingRequest[]
  reviewsSubmitted  MapReview[]         @relation("mapreview_reviewer")
  reviewsResolved   MapReview[]         @relation("mapreview_resolver")
  reviewComments    MapReviewComment[]
  adminActivities   AdminActivity[]

  notifsAbout Notification[] @relation("notifs_about")

  createdAt DateTime @default(now())
}

model Profile {
  bio     String @default("")
  socials Json? /// socials.model.ts

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int  @id
}

model UserAuth {
  refreshToken String?

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int  @id
}

model UserStats {
  totalJumps    BigInt @default(0) @db.BigInt
  totalStrafes  BigInt @default(0) @db.BigInt
  level         Int    @default(1) @db.SmallInt
  cosXP         BigInt @default(0) @db.BigInt
  mapsCompleted Int    @default(0)
  runsSubmitted Int    @default(0)

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int  @id
}

model DeletedSteamID {
  steamID BigInt @id @db.BigInt
}

model Report {
  id Int @id @default(autoincrement())

  type              Int      @db.SmallInt /// report-type.enum.ts
  /// This is used as a primary key into one of many possible tables,
  /// determined by the value of `type`.
  data              BigInt   @db.BigInt
  category          Int      @db.SmallInt
  message           String?
  resolved          Boolean? @default(false)
  resolutionMessage String?

  submitter   User? @relation("report_submitter", fields: [submitterID], references: [id], onDelete: SetNull)
  submitterID Int?

  resolver   User? @relation("report_resolver", fields: [resolverID], references: [id], onDelete: SetNull)
  resolverID Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([resolverID, submitterID])
}

model Activity {
  id Int @id @default(autoincrement())

  type Int @default(0) @db.SmallInt /// activity-type.enum.ts

  /// This is used as a primary key into one of many possible tables,
  /// determined by the value of `type`.
  data BigInt @db.BigInt

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userID])
}

model Follow {
  notifyOn Int @default(0) @db.SmallInt /// Bitfield of activity-type.enum.ts

  followed   User @relation("follow_follower", fields: [followedID], references: [id], onDelete: Cascade)
  followedID Int

  followee   User @relation("follow_follow", fields: [followeeID], references: [id], onDelete: Cascade)
  followeeID Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followeeID, followedID])
}

model Notification {
  id Int @id @default(autoincrement())

  type Int /// notification-type.enum.ts

  targetUser   User @relation("notifs_to", fields: [targetUserID], references: [id], onDelete: Cascade)
  targetUserID Int

  message String?

  user   User? @relation("notifs_about", fields: [userID], references: [id], onDelete: Cascade)
  userID Int?

  map   MMap? @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int?

  run   PastRun? @relation(fields: [runID], references: [id], onDelete: Cascade)
  runID BigInt?

  review   MapReview? @relation(fields: [reviewID], references: [id], onDelete: Cascade)
  reviewID Int?

  createdAt DateTime @default(now())

  @@index(targetUserID)
}

model MapNotify {
  notifyOn Int @db.SmallInt /// Bitfield of activity-type.enum.ts

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userID, mapID])
}

/// The term 'MMap' is used to avoid collisions with the JS data structure, just
/// in cases where the exact name "Map" is used.
model MMap {
  id Int @id @default(autoincrement())

  name     String  @unique
  fileName String? // Optional as isn't set until map is approved
  status   Int     @db.SmallInt /// map-status.enum.ts
  hash     String? @db.Char(40)
  hasVmf   Boolean @default(false)
  zones    Json? /// map-zones.model.ts

  thumbnail   MapImage? @relation("mapimage_thumbnail", fields: [thumbnailID], references: [id], onDelete: SetNull)
  thumbnailID Int?      @unique

  submitter   User? @relation(fields: [submitterID], references: [id], onDelete: SetNull)
  submitterID Int?

  stats MapStats?
  info  MapInfo?

  leaderboards    Leaderboard[]
  leaderboardRuns LeaderboardRun[]
  pastRuns        PastRun[]
  runSessions     RunSession[]
  credits         MapCredit[]
  favorites       MapFavorite[]
  images          MapImage[]
  libraryEntries  MapLibraryEntry[]
  notifies        MapNotify[]
  reviews         MapReview[]
  submission      MapSubmission?
  testingRequests MapTestingRequest[]

  notifsAbout Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // This table is quite small but queried very frequently, so makes sense to index quite a few things.
  // @unique on name provides an index.
  @@index([submitterID])
  @@index([status, createdAt(sort: Desc)])
}

model MapCredit {
  type        Int     @db.SmallInt /// map-credit-type.enum.ts
  description String?

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  @@id([mapID, userID])
  @@index([mapID])
}

model MapFavorite {
  id Int @id @default(autoincrement())

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mapID, userID])
}

model MapImage {
  id Int @id @default(autoincrement())

  thumbnail MMap? @relation("mapimage_thumbnail")

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  @@index([mapID])
}

model MapInfo {
  description  String   @default("")
  youtubeID    String?
  creationDate DateTime

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int  @unique

  @@id([mapID])
}

model MapLibraryEntry {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mapID, userID])
}

model MapStats {
  reviews           Int    @default(0)
  downloads         Int    @default(0)
  subscriptions     Int    @default(0)
  plays             Int    @default(0)
  favorites         Int    @default(0)
  completions       Int    @default(0)
  uniqueCompletions Int    @default(0)
  timePlayed        BigInt @default(0) @db.BigInt

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int  @id
}

model MapTestingRequest {
  mapID Int
  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)

  userID Int
  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)

  state Int @db.SmallInt /// map-testing-request-state.enum.ts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([mapID, userID])
}

model MapSubmission {
  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int  @id

  type Int @db.SmallInt /// map-submission-type.enum.ts

  suggestions  Json  @default("[]") /// Array of map-submission-suggestions.model.ts
  placeholders Json? /// Array of map-submission-placeholder.model.ts
  dates        Json  @default("[]") /// Array of map-submission-dates.model.ts

  versions MapSubmissionVersion[]

  currentVersion   MapSubmissionVersion? @relation(name: "current_version", fields: [currentVersionID], references: [id])
  currentVersionID String?               @unique @db.Uuid
}

model MapSubmissionVersion {
  id String @id @default(uuid()) @db.Uuid // BSP file stored relative to this

  currentVersion MapSubmission? @relation(name: "current_version")

  versionNum Int     @db.SmallInt
  changelog  String?
  hash       String  @db.Char(40)
  hasVmf     Boolean @default(false)
  zones      Json? /// map-zones.model.ts

  submission   MapSubmission @relation(fields: [submissionID], references: [mapID], onDelete: Cascade)
  submissionID Int

  createdAt DateTime @default(now())

  @@index([submissionID])
}

// This model will be greatly expanded in the future to include screenshots,
// replays, savestates etc.
model MapReview {
  id Int @id @default(autoincrement())

  mainText    String
  comments    MapReviewComment[]
  suggestions Json               @default("[]") // Array of map-submission-suggestions.model.ts
  editHistory Json               @default("[]") // Array of map-review-edit-history.model.ts
  imageIDs    String[]

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  reviewer   User @relation(name: "mapreview_reviewer", fields: [reviewerID], references: [id], onDelete: Cascade)
  reviewerID Int

  resolved   Boolean? /// If NULL, the review does not need resolving to pass to FINAL_APPROVAL
  resolver   User?    @relation(name: "mapreview_resolver", fields: [resolverID], references: [id], onDelete: Cascade)
  resolverID Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifsAbout Notification[]

  @@index([mapID])
}

model MapReviewComment {
  id Int @id @default(autoincrement())

  text String

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  review   MapReview @relation(fields: [reviewID], references: [id], onDelete: Cascade)
  reviewID Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewID, createdAt])
}

/// This table stores what a tracks on a map a run can be submitted to, in what
/// gamemode and style, plus metadata about that track in that gamemode e.g. its
/// tier.
///
/// For example, surf_utopia probably just gets gamemode = Gamemode.SURF,
/// trackType = TrackType.MAIN, trackNum = 0 entries, for all the styles surf
/// supports, with ranked = true.
/// A mode that supports several different gamemodes, and has stages,
/// bonuses etc. is likely to have dozens of different entries, perhaps some
/// ranked, others unranked.
model Leaderboard {
  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  gamemode  Int @db.SmallInt
  trackType Int @db.SmallInt
  trackNum  Int @db.SmallInt
  style     Int @db.SmallInt

  // Optional as these don't necessarily apply to stages/bonuses
  tier   Int?     @db.SmallInt
  linear Boolean?

  ranked Boolean

  tags Json @default("[]")

  runs LeaderboardRun[]

  @@id([mapID, gamemode, trackType, trackNum, style])
}

/// This table stores runs _on a leaderboard_. An entry is a unique
/// instance of a userID and the fields that constitute a Leaderboard (`mapID`,
/// `gamemode`, `trackType`, `trackNum`, `style`). By using that combination in
/// our PK, we ensure those entries are unique at a DB level.
///
/// We use B-Tree two indexes
///   - (userID, gamemode, style, mapID, trackType, trackNum): For fetching runs by user for e.g. profile page.
///     Also is a UNIQUE constraint.
///   - (mapID, gamemode, trackType, trackNum, style, time (asc), createdAt (asc)): Indexes in leaderboard order.
///     The idea is we get every distinct leaderboard stacked on top of each other, then ordered by time within the chunk,
///     where ties are simply handled by whatever was submitted first. Note that we store any actual "rank" values - incrementing
///     ranks for all slower runs on a leaderboard is an incredibly slow operation. (TODO: This hasn't been implemented yet).
///     Instead, we index this way to allow us to very efficiently compute ranks per query using window functions.
model LeaderboardRun {
  leaderboard Leaderboard @relation(fields: [mapID, gamemode, trackType, trackNum, style], references: [mapID, gamemode, trackType, trackNum, style], onDelete: Cascade)

  user   User @relation(fields: [userID], references: [id], onDelete: Restrict)
  userID Int

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  gamemode  Int @db.SmallInt
  trackType Int @db.SmallInt
  trackNum  Int @db.SmallInt
  style     Int @db.SmallInt

  /// We don't store ticks in anticipation of future sub-tick system. If ticks
  /// are required, they can be calculated with `time * tickrate of gamemode`.
  time Float @db.Real

  /// We store this for LeaderboardRun and *not* PastRun for space efficiency.
  stats Json /// run-stats.model.ts

  // validated  Boolean // TODO: We'll be using this in future and blocking a bunch of stuff from DTO if false
  replayHash String? @db.Char(40) /// SHA1

  /// Flags are all the styles are run qualifies for. A styled run may qualify
  /// for multiple leaderboards, and an separate entry is made for each.
  /// For example, a sideways surf run (for some track) would be added to the
  /// sideways leaderboard and unstyled leaderboard. This field is used to "tag"
  /// runs one leaderboard as also qualifying for another, e.g. the sideways
  /// run would get a "Sideways" tag on the unstyled leaderboard.
  // This is an array because (a) it allows easier queries for specific flag(s)
  // in Prisma (writing the paginated PastRuns get query raw would be really
  // rough, though we could if absolutely needed), (b) we could conceivable
  // exceed 64 flags at some point. This is of course a very large table where
  // we care about size a great deal, though we expect the *majority* of runs
  // to not to have any non-zero flags.
  // If we need to cut back on the size of this table in the future, we could
  // consider moving this to a bitfield (or adopting pguint for small values).
  // But most runs submitted will not to have any flags, so it's probably okay.
  flags Int[] @db.SmallInt

  rank   Int  @db.Integer // TODO: SoonTM we'll stop storing this and just use a window function over the `time` column.
  rankXP Int? @default(0) // TODO: And this shit will live in redis

  createdAt DateTime @default(now())

  pastRun   PastRun? @relation(fields: [pastRunID], references: [id])
  pastRunID BigInt?  @unique

  // Tempting to add a (userID, createdAt) index here for e.g. user profile
  // page, but the PK index starting with `userID` will do some of the work
  // anyway, proooobably not worth the space. Worth testing out on live DB in
  // future!

  // Unique index starting with userID then profile, for queries like a user's
  // run history.
  @@id([userID, gamemode, style, mapID, trackType, trackNum])
  @@index([mapID, gamemode, trackType, trackNum, style, time(sort: Asc), createdAt(sort: Asc)])
}

/// Very similar to `LeaderboardRun`, but also includes non-PB runs, and
/// therefore doesn't really correspond to a leaderboard - rather all the runs
///that ever qualified for that leaderboard in the past. Used for tracking
/// user's run history.
model PastRun {
  // We could use a composite PK here as `LeaderboardRun` does, using createdAt
  // in the key to ensure uniqueness, but that has several disadvantages:
  //   - Postgres would have to handle a much more expensive unique index, on
  //     a table with very frequent inserts - doubling the already painful cost
  //     of inserts into the LBRun table.
  //   - To maintain a relation between LBRuns and PastRuns (which we use), we'd
  //     need a uniqueness constraint on LeaderboardRun consisting of the
  //     current PK, with createdAt tacked the end - since Prisma/Postgres can't
  //     infer that [userID, gamemode, style, mapID, trackType, trackNum, createdAt]
  //     is unique from [userID, gamemode, style, mapID, trackType, trackNum]
  //     being unique. So we'd have add another very expensive index on
  //     LBRun, or make the PK include createdAt as well, but losing the
  //     uniqueness *without* the createdAt makes backend code more annoying
  //     and frustrating not to have enforced by the DB.
  //   - HTTP queries for specific PastRuns would have to include the
  //     createdAt.
  //   - Using a createdAt in a PK just feels wrong.
  // For now we're not querying this table all that often (the game never does,
  // and nobody even uses the frontend) so we should prioritize speedy inserts
  // over selects - so a incrementing int PK makes the most sense. If we find
  // ourselves querying this more in the future (depends what direction game UI
  // goes in), we should consider more indexing or maybe switching a composite
  // PK.
  id BigInt @id @default(autoincrement())

  user   User @relation(fields: [userID], references: [id], onDelete: Restrict)
  userID Int

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  gamemode  Int @db.SmallInt
  trackType Int @db.SmallInt
  trackNum  Int @db.SmallInt
  style     Int @db.SmallInt

  time Float @db.Real

  flags Int[] @db.SmallInt

  leaderboardRun LeaderboardRun?
  notifsAbout    Notification[]

  createdAt DateTime @default(now())

  // Index for any query that's not specific to a user. But since id is strongly
  // correlated with insertion date (so stuff is generally on same index pages),
  // we probably don't gain much from this - worth testing at some point.
  // @@index([createdAt(sort: Desc)])

  // Not adding more fields to this index due to its size and frequency of
  // insertion. [userID, createdAt, gamemode, style, mapID, trackType, trackNum]
  // would speed up fetches quite a lot, but is an expensive index that'd hurt
  // insertion times during run submission a lot.
  // If we do a per-gamemode user page in the game UI in the future (that'd be
  // queried *very* frequently and is user-specific so bad caching), indexing
  // over [userID, gamemode, createdAt(desc)] would make a lot of sense.
  @@index([userID])
}

/// This model doesn't have a unique constraint on
/// (userID, mapID, gamemode, trackType, trackNum) due to the cost of an
/// index on a table that we insert into so frequently.
model RunSession {
  id BigInt @id @default(autoincrement())

  trackType Int @db.SmallInt
  trackNum  Int @db.SmallInt
  gamemode  Int @db.SmallInt

  timestamps RunSessionTimestamp[]

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  mmap  MMap @relation(fields: [mapID], references: [id], onDelete: Cascade)
  mapID Int

  createdAt DateTime @default(now())

  @@index([userID])
}

model RunSessionTimestamp {
  id BigInt @id @default(autoincrement())

  segment    Int   @db.SmallInt
  checkpoint Int   @db.SmallInt
  time       Float @db.DoublePrecision

  session   RunSession @relation(fields: [sessionID], references: [id], onDelete: Cascade)
  sessionID BigInt

  createdAt DateTime @default(now())

  @@index([sessionID])
}

model AdminActivity {
  id Int @id @default(autoincrement())

  comment String?
  type    Int
  target  BigInt  @db.BigInt
  oldData Json
  newData Json

  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int

  createdAt DateTime @default(now())
}
