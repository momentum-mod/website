
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapSubmission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapSubmission
 * 
 */
export type MapSubmissionModel = runtime.Types.Result.DefaultSelection<Prisma.$MapSubmissionPayload>

export type AggregateMapSubmission = {
  _count: MapSubmissionCountAggregateOutputType | null
  _avg: MapSubmissionAvgAggregateOutputType | null
  _sum: MapSubmissionSumAggregateOutputType | null
  _min: MapSubmissionMinAggregateOutputType | null
  _max: MapSubmissionMaxAggregateOutputType | null
}

export type MapSubmissionAvgAggregateOutputType = {
  mapID: number | null
  type: number | null
}

export type MapSubmissionSumAggregateOutputType = {
  mapID: number | null
  type: number | null
}

export type MapSubmissionMinAggregateOutputType = {
  mapID: number | null
  type: number | null
  discordReviewThread: string | null
}

export type MapSubmissionMaxAggregateOutputType = {
  mapID: number | null
  type: number | null
  discordReviewThread: string | null
}

export type MapSubmissionCountAggregateOutputType = {
  mapID: number
  type: number
  suggestions: number
  placeholders: number
  discordReviewThread: number
  _all: number
}


export type MapSubmissionAvgAggregateInputType = {
  mapID?: true
  type?: true
}

export type MapSubmissionSumAggregateInputType = {
  mapID?: true
  type?: true
}

export type MapSubmissionMinAggregateInputType = {
  mapID?: true
  type?: true
  discordReviewThread?: true
}

export type MapSubmissionMaxAggregateInputType = {
  mapID?: true
  type?: true
  discordReviewThread?: true
}

export type MapSubmissionCountAggregateInputType = {
  mapID?: true
  type?: true
  suggestions?: true
  placeholders?: true
  discordReviewThread?: true
  _all?: true
}

export type MapSubmissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapSubmission to aggregate.
   */
  where?: Prisma.MapSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissions to fetch.
   */
  orderBy?: Prisma.MapSubmissionOrderByWithRelationInput | Prisma.MapSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapSubmissions
  **/
  _count?: true | MapSubmissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapSubmissionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapSubmissionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapSubmissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapSubmissionMaxAggregateInputType
}

export type GetMapSubmissionAggregateType<T extends MapSubmissionAggregateArgs> = {
      [P in keyof T & keyof AggregateMapSubmission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapSubmission[P]>
    : Prisma.GetScalarType<T[P], AggregateMapSubmission[P]>
}




export type MapSubmissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapSubmissionWhereInput
  orderBy?: Prisma.MapSubmissionOrderByWithAggregationInput | Prisma.MapSubmissionOrderByWithAggregationInput[]
  by: Prisma.MapSubmissionScalarFieldEnum[] | Prisma.MapSubmissionScalarFieldEnum
  having?: Prisma.MapSubmissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapSubmissionCountAggregateInputType | true
  _avg?: MapSubmissionAvgAggregateInputType
  _sum?: MapSubmissionSumAggregateInputType
  _min?: MapSubmissionMinAggregateInputType
  _max?: MapSubmissionMaxAggregateInputType
}

export type MapSubmissionGroupByOutputType = {
  mapID: number
  type: number
  suggestions: runtime.JsonValue
  placeholders: runtime.JsonValue | null
  discordReviewThread: string | null
  _count: MapSubmissionCountAggregateOutputType | null
  _avg: MapSubmissionAvgAggregateOutputType | null
  _sum: MapSubmissionSumAggregateOutputType | null
  _min: MapSubmissionMinAggregateOutputType | null
  _max: MapSubmissionMaxAggregateOutputType | null
}

type GetMapSubmissionGroupByPayload<T extends MapSubmissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapSubmissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapSubmissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapSubmissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapSubmissionGroupByOutputType[P]>
      }
    >
  >



export type MapSubmissionWhereInput = {
  AND?: Prisma.MapSubmissionWhereInput | Prisma.MapSubmissionWhereInput[]
  OR?: Prisma.MapSubmissionWhereInput[]
  NOT?: Prisma.MapSubmissionWhereInput | Prisma.MapSubmissionWhereInput[]
  mapID?: Prisma.IntFilter<"MapSubmission"> | number
  type?: Prisma.IntFilter<"MapSubmission"> | number
  suggestions?: Prisma.JsonFilter<"MapSubmission">
  placeholders?: Prisma.JsonNullableFilter<"MapSubmission">
  discordReviewThread?: Prisma.StringNullableFilter<"MapSubmission"> | string | null
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  dates?: Prisma.MapSubmissionDateListRelationFilter
}

export type MapSubmissionOrderByWithRelationInput = {
  mapID?: Prisma.SortOrder
  type?: Prisma.SortOrder
  suggestions?: Prisma.SortOrder
  placeholders?: Prisma.SortOrderInput | Prisma.SortOrder
  discordReviewThread?: Prisma.SortOrderInput | Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
  dates?: Prisma.MapSubmissionDateOrderByRelationAggregateInput
}

export type MapSubmissionWhereUniqueInput = Prisma.AtLeast<{
  mapID?: number
  AND?: Prisma.MapSubmissionWhereInput | Prisma.MapSubmissionWhereInput[]
  OR?: Prisma.MapSubmissionWhereInput[]
  NOT?: Prisma.MapSubmissionWhereInput | Prisma.MapSubmissionWhereInput[]
  type?: Prisma.IntFilter<"MapSubmission"> | number
  suggestions?: Prisma.JsonFilter<"MapSubmission">
  placeholders?: Prisma.JsonNullableFilter<"MapSubmission">
  discordReviewThread?: Prisma.StringNullableFilter<"MapSubmission"> | string | null
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  dates?: Prisma.MapSubmissionDateListRelationFilter
}, "mapID">

export type MapSubmissionOrderByWithAggregationInput = {
  mapID?: Prisma.SortOrder
  type?: Prisma.SortOrder
  suggestions?: Prisma.SortOrder
  placeholders?: Prisma.SortOrderInput | Prisma.SortOrder
  discordReviewThread?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.MapSubmissionCountOrderByAggregateInput
  _avg?: Prisma.MapSubmissionAvgOrderByAggregateInput
  _max?: Prisma.MapSubmissionMaxOrderByAggregateInput
  _min?: Prisma.MapSubmissionMinOrderByAggregateInput
  _sum?: Prisma.MapSubmissionSumOrderByAggregateInput
}

export type MapSubmissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapSubmissionScalarWhereWithAggregatesInput | Prisma.MapSubmissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapSubmissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapSubmissionScalarWhereWithAggregatesInput | Prisma.MapSubmissionScalarWhereWithAggregatesInput[]
  mapID?: Prisma.IntWithAggregatesFilter<"MapSubmission"> | number
  type?: Prisma.IntWithAggregatesFilter<"MapSubmission"> | number
  suggestions?: Prisma.JsonWithAggregatesFilter<"MapSubmission">
  placeholders?: Prisma.JsonNullableWithAggregatesFilter<"MapSubmission">
  discordReviewThread?: Prisma.StringNullableWithAggregatesFilter<"MapSubmission"> | string | null
}

export type MapSubmissionCreateInput = {
  type: number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: string | null
  mmap: Prisma.MMapCreateNestedOneWithoutSubmissionInput
  dates?: Prisma.MapSubmissionDateCreateNestedManyWithoutSubmissionInput
}

export type MapSubmissionUncheckedCreateInput = {
  mapID: number
  type: number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: string | null
  dates?: Prisma.MapSubmissionDateUncheckedCreateNestedManyWithoutSubmissionInput
}

export type MapSubmissionUpdateInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mmap?: Prisma.MMapUpdateOneRequiredWithoutSubmissionNestedInput
  dates?: Prisma.MapSubmissionDateUpdateManyWithoutSubmissionNestedInput
}

export type MapSubmissionUncheckedUpdateInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dates?: Prisma.MapSubmissionDateUncheckedUpdateManyWithoutSubmissionNestedInput
}

export type MapSubmissionCreateManyInput = {
  mapID: number
  type: number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: string | null
}

export type MapSubmissionUpdateManyMutationInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MapSubmissionUncheckedUpdateManyInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MapSubmissionNullableScalarRelationFilter = {
  is?: Prisma.MapSubmissionWhereInput | null
  isNot?: Prisma.MapSubmissionWhereInput | null
}

export type MapSubmissionCountOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  type?: Prisma.SortOrder
  suggestions?: Prisma.SortOrder
  placeholders?: Prisma.SortOrder
  discordReviewThread?: Prisma.SortOrder
}

export type MapSubmissionAvgOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type MapSubmissionMaxOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  type?: Prisma.SortOrder
  discordReviewThread?: Prisma.SortOrder
}

export type MapSubmissionMinOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  type?: Prisma.SortOrder
  discordReviewThread?: Prisma.SortOrder
}

export type MapSubmissionSumOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type MapSubmissionScalarRelationFilter = {
  is?: Prisma.MapSubmissionWhereInput
  isNot?: Prisma.MapSubmissionWhereInput
}

export type MapSubmissionCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionCreateWithoutMmapInput, Prisma.MapSubmissionUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapSubmissionCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapSubmissionWhereUniqueInput
}

export type MapSubmissionUncheckedCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionCreateWithoutMmapInput, Prisma.MapSubmissionUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapSubmissionCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapSubmissionWhereUniqueInput
}

export type MapSubmissionUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionCreateWithoutMmapInput, Prisma.MapSubmissionUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapSubmissionCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapSubmissionUpsertWithoutMmapInput
  disconnect?: Prisma.MapSubmissionWhereInput | boolean
  delete?: Prisma.MapSubmissionWhereInput | boolean
  connect?: Prisma.MapSubmissionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapSubmissionUpdateToOneWithWhereWithoutMmapInput, Prisma.MapSubmissionUpdateWithoutMmapInput>, Prisma.MapSubmissionUncheckedUpdateWithoutMmapInput>
}

export type MapSubmissionUncheckedUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionCreateWithoutMmapInput, Prisma.MapSubmissionUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapSubmissionCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapSubmissionUpsertWithoutMmapInput
  disconnect?: Prisma.MapSubmissionWhereInput | boolean
  delete?: Prisma.MapSubmissionWhereInput | boolean
  connect?: Prisma.MapSubmissionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapSubmissionUpdateToOneWithWhereWithoutMmapInput, Prisma.MapSubmissionUpdateWithoutMmapInput>, Prisma.MapSubmissionUncheckedUpdateWithoutMmapInput>
}

export type MapSubmissionCreateNestedOneWithoutDatesInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionCreateWithoutDatesInput, Prisma.MapSubmissionUncheckedCreateWithoutDatesInput>
  connectOrCreate?: Prisma.MapSubmissionCreateOrConnectWithoutDatesInput
  connect?: Prisma.MapSubmissionWhereUniqueInput
}

export type MapSubmissionUpdateOneRequiredWithoutDatesNestedInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionCreateWithoutDatesInput, Prisma.MapSubmissionUncheckedCreateWithoutDatesInput>
  connectOrCreate?: Prisma.MapSubmissionCreateOrConnectWithoutDatesInput
  upsert?: Prisma.MapSubmissionUpsertWithoutDatesInput
  connect?: Prisma.MapSubmissionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapSubmissionUpdateToOneWithWhereWithoutDatesInput, Prisma.MapSubmissionUpdateWithoutDatesInput>, Prisma.MapSubmissionUncheckedUpdateWithoutDatesInput>
}

export type MapSubmissionCreateWithoutMmapInput = {
  type: number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: string | null
  dates?: Prisma.MapSubmissionDateCreateNestedManyWithoutSubmissionInput
}

export type MapSubmissionUncheckedCreateWithoutMmapInput = {
  type: number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: string | null
  dates?: Prisma.MapSubmissionDateUncheckedCreateNestedManyWithoutSubmissionInput
}

export type MapSubmissionCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapSubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.MapSubmissionCreateWithoutMmapInput, Prisma.MapSubmissionUncheckedCreateWithoutMmapInput>
}

export type MapSubmissionUpsertWithoutMmapInput = {
  update: Prisma.XOR<Prisma.MapSubmissionUpdateWithoutMmapInput, Prisma.MapSubmissionUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapSubmissionCreateWithoutMmapInput, Prisma.MapSubmissionUncheckedCreateWithoutMmapInput>
  where?: Prisma.MapSubmissionWhereInput
}

export type MapSubmissionUpdateToOneWithWhereWithoutMmapInput = {
  where?: Prisma.MapSubmissionWhereInput
  data: Prisma.XOR<Prisma.MapSubmissionUpdateWithoutMmapInput, Prisma.MapSubmissionUncheckedUpdateWithoutMmapInput>
}

export type MapSubmissionUpdateWithoutMmapInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dates?: Prisma.MapSubmissionDateUpdateManyWithoutSubmissionNestedInput
}

export type MapSubmissionUncheckedUpdateWithoutMmapInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dates?: Prisma.MapSubmissionDateUncheckedUpdateManyWithoutSubmissionNestedInput
}

export type MapSubmissionCreateWithoutDatesInput = {
  type: number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: string | null
  mmap: Prisma.MMapCreateNestedOneWithoutSubmissionInput
}

export type MapSubmissionUncheckedCreateWithoutDatesInput = {
  mapID: number
  type: number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: string | null
}

export type MapSubmissionCreateOrConnectWithoutDatesInput = {
  where: Prisma.MapSubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.MapSubmissionCreateWithoutDatesInput, Prisma.MapSubmissionUncheckedCreateWithoutDatesInput>
}

export type MapSubmissionUpsertWithoutDatesInput = {
  update: Prisma.XOR<Prisma.MapSubmissionUpdateWithoutDatesInput, Prisma.MapSubmissionUncheckedUpdateWithoutDatesInput>
  create: Prisma.XOR<Prisma.MapSubmissionCreateWithoutDatesInput, Prisma.MapSubmissionUncheckedCreateWithoutDatesInput>
  where?: Prisma.MapSubmissionWhereInput
}

export type MapSubmissionUpdateToOneWithWhereWithoutDatesInput = {
  where?: Prisma.MapSubmissionWhereInput
  data: Prisma.XOR<Prisma.MapSubmissionUpdateWithoutDatesInput, Prisma.MapSubmissionUncheckedUpdateWithoutDatesInput>
}

export type MapSubmissionUpdateWithoutDatesInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mmap?: Prisma.MMapUpdateOneRequiredWithoutSubmissionNestedInput
}

export type MapSubmissionUncheckedUpdateWithoutDatesInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.IntFieldUpdateOperationsInput | number
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  placeholders?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  discordReviewThread?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type MapSubmissionCountOutputType
 */

export type MapSubmissionCountOutputType = {
  dates: number
}

export type MapSubmissionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dates?: boolean | MapSubmissionCountOutputTypeCountDatesArgs
}

/**
 * MapSubmissionCountOutputType without action
 */
export type MapSubmissionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionCountOutputType
   */
  select?: Prisma.MapSubmissionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MapSubmissionCountOutputType without action
 */
export type MapSubmissionCountOutputTypeCountDatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapSubmissionDateWhereInput
}


export type MapSubmissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  type?: boolean
  suggestions?: boolean
  placeholders?: boolean
  discordReviewThread?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  dates?: boolean | Prisma.MapSubmission$datesArgs<ExtArgs>
  _count?: boolean | Prisma.MapSubmissionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapSubmission"]>

export type MapSubmissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  type?: boolean
  suggestions?: boolean
  placeholders?: boolean
  discordReviewThread?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapSubmission"]>

export type MapSubmissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  type?: boolean
  suggestions?: boolean
  placeholders?: boolean
  discordReviewThread?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapSubmission"]>

export type MapSubmissionSelectScalar = {
  mapID?: boolean
  type?: boolean
  suggestions?: boolean
  placeholders?: boolean
  discordReviewThread?: boolean
}

export type MapSubmissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"mapID" | "type" | "suggestions" | "placeholders" | "discordReviewThread", ExtArgs["result"]["mapSubmission"]>
export type MapSubmissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  dates?: boolean | Prisma.MapSubmission$datesArgs<ExtArgs>
  _count?: boolean | Prisma.MapSubmissionCountOutputTypeDefaultArgs<ExtArgs>
}
export type MapSubmissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapSubmissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}

export type $MapSubmissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapSubmission"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
    dates: Prisma.$MapSubmissionDatePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    mapID: number
    /**
     * map-submission-type.enum.ts
     */
    type: number
    /**
     * Array of MapSubmissionSuggestion model
     */
    suggestions: runtime.JsonValue
    /**
     * Array of MapSubmissionPlaceholder model
     */
    placeholders: runtime.JsonValue | null
    discordReviewThread: string | null
  }, ExtArgs["result"]["mapSubmission"]>
  composites: {}
}

export type MapSubmissionGetPayload<S extends boolean | null | undefined | MapSubmissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload, S>

export type MapSubmissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapSubmissionCountAggregateInputType | true
  }

export interface MapSubmissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapSubmission'], meta: { name: 'MapSubmission' } }
  /**
   * Find zero or one MapSubmission that matches the filter.
   * @param {MapSubmissionFindUniqueArgs} args - Arguments to find a MapSubmission
   * @example
   * // Get one MapSubmission
   * const mapSubmission = await prisma.mapSubmission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapSubmissionFindUniqueArgs>(args: Prisma.SelectSubset<T, MapSubmissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapSubmission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapSubmissionFindUniqueOrThrowArgs} args - Arguments to find a MapSubmission
   * @example
   * // Get one MapSubmission
   * const mapSubmission = await prisma.mapSubmission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapSubmissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapSubmission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionFindFirstArgs} args - Arguments to find a MapSubmission
   * @example
   * // Get one MapSubmission
   * const mapSubmission = await prisma.mapSubmission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapSubmissionFindFirstArgs>(args?: Prisma.SelectSubset<T, MapSubmissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapSubmission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionFindFirstOrThrowArgs} args - Arguments to find a MapSubmission
   * @example
   * // Get one MapSubmission
   * const mapSubmission = await prisma.mapSubmission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapSubmissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapSubmissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapSubmissions
   * const mapSubmissions = await prisma.mapSubmission.findMany()
   * 
   * // Get first 10 MapSubmissions
   * const mapSubmissions = await prisma.mapSubmission.findMany({ take: 10 })
   * 
   * // Only select the `mapID`
   * const mapSubmissionWithMapIDOnly = await prisma.mapSubmission.findMany({ select: { mapID: true } })
   * 
   */
  findMany<T extends MapSubmissionFindManyArgs>(args?: Prisma.SelectSubset<T, MapSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapSubmission.
   * @param {MapSubmissionCreateArgs} args - Arguments to create a MapSubmission.
   * @example
   * // Create one MapSubmission
   * const MapSubmission = await prisma.mapSubmission.create({
   *   data: {
   *     // ... data to create a MapSubmission
   *   }
   * })
   * 
   */
  create<T extends MapSubmissionCreateArgs>(args: Prisma.SelectSubset<T, MapSubmissionCreateArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapSubmissions.
   * @param {MapSubmissionCreateManyArgs} args - Arguments to create many MapSubmissions.
   * @example
   * // Create many MapSubmissions
   * const mapSubmission = await prisma.mapSubmission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapSubmissionCreateManyArgs>(args?: Prisma.SelectSubset<T, MapSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapSubmissions and returns the data saved in the database.
   * @param {MapSubmissionCreateManyAndReturnArgs} args - Arguments to create many MapSubmissions.
   * @example
   * // Create many MapSubmissions
   * const mapSubmission = await prisma.mapSubmission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapSubmissions and only return the `mapID`
   * const mapSubmissionWithMapIDOnly = await prisma.mapSubmission.createManyAndReturn({
   *   select: { mapID: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapSubmissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapSubmission.
   * @param {MapSubmissionDeleteArgs} args - Arguments to delete one MapSubmission.
   * @example
   * // Delete one MapSubmission
   * const MapSubmission = await prisma.mapSubmission.delete({
   *   where: {
   *     // ... filter to delete one MapSubmission
   *   }
   * })
   * 
   */
  delete<T extends MapSubmissionDeleteArgs>(args: Prisma.SelectSubset<T, MapSubmissionDeleteArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapSubmission.
   * @param {MapSubmissionUpdateArgs} args - Arguments to update one MapSubmission.
   * @example
   * // Update one MapSubmission
   * const mapSubmission = await prisma.mapSubmission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapSubmissionUpdateArgs>(args: Prisma.SelectSubset<T, MapSubmissionUpdateArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapSubmissions.
   * @param {MapSubmissionDeleteManyArgs} args - Arguments to filter MapSubmissions to delete.
   * @example
   * // Delete a few MapSubmissions
   * const { count } = await prisma.mapSubmission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapSubmissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapSubmissions
   * const mapSubmission = await prisma.mapSubmission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapSubmissionUpdateManyArgs>(args: Prisma.SelectSubset<T, MapSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapSubmissions and returns the data updated in the database.
   * @param {MapSubmissionUpdateManyAndReturnArgs} args - Arguments to update many MapSubmissions.
   * @example
   * // Update many MapSubmissions
   * const mapSubmission = await prisma.mapSubmission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapSubmissions and only return the `mapID`
   * const mapSubmissionWithMapIDOnly = await prisma.mapSubmission.updateManyAndReturn({
   *   select: { mapID: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapSubmissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapSubmission.
   * @param {MapSubmissionUpsertArgs} args - Arguments to update or create a MapSubmission.
   * @example
   * // Update or create a MapSubmission
   * const mapSubmission = await prisma.mapSubmission.upsert({
   *   create: {
   *     // ... data to create a MapSubmission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapSubmission we want to update
   *   }
   * })
   */
  upsert<T extends MapSubmissionUpsertArgs>(args: Prisma.SelectSubset<T, MapSubmissionUpsertArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionCountArgs} args - Arguments to filter MapSubmissions to count.
   * @example
   * // Count the number of MapSubmissions
   * const count = await prisma.mapSubmission.count({
   *   where: {
   *     // ... the filter for the MapSubmissions we want to count
   *   }
   * })
  **/
  count<T extends MapSubmissionCountArgs>(
    args?: Prisma.Subset<T, MapSubmissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapSubmissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapSubmissionAggregateArgs>(args: Prisma.Subset<T, MapSubmissionAggregateArgs>): Prisma.PrismaPromise<GetMapSubmissionAggregateType<T>>

  /**
   * Group by MapSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapSubmissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapSubmissionGroupByArgs['orderBy'] }
      : { orderBy?: MapSubmissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapSubmission model
 */
readonly fields: MapSubmissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapSubmission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapSubmissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  dates<T extends Prisma.MapSubmission$datesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapSubmission$datesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapSubmission model
 */
export interface MapSubmissionFieldRefs {
  readonly mapID: Prisma.FieldRef<"MapSubmission", 'Int'>
  readonly type: Prisma.FieldRef<"MapSubmission", 'Int'>
  readonly suggestions: Prisma.FieldRef<"MapSubmission", 'Json'>
  readonly placeholders: Prisma.FieldRef<"MapSubmission", 'Json'>
  readonly discordReviewThread: Prisma.FieldRef<"MapSubmission", 'String'>
}
    

// Custom InputTypes
/**
 * MapSubmission findUnique
 */
export type MapSubmissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmission to fetch.
   */
  where: Prisma.MapSubmissionWhereUniqueInput
}

/**
 * MapSubmission findUniqueOrThrow
 */
export type MapSubmissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmission to fetch.
   */
  where: Prisma.MapSubmissionWhereUniqueInput
}

/**
 * MapSubmission findFirst
 */
export type MapSubmissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmission to fetch.
   */
  where?: Prisma.MapSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissions to fetch.
   */
  orderBy?: Prisma.MapSubmissionOrderByWithRelationInput | Prisma.MapSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapSubmissions.
   */
  cursor?: Prisma.MapSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapSubmissions.
   */
  distinct?: Prisma.MapSubmissionScalarFieldEnum | Prisma.MapSubmissionScalarFieldEnum[]
}

/**
 * MapSubmission findFirstOrThrow
 */
export type MapSubmissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmission to fetch.
   */
  where?: Prisma.MapSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissions to fetch.
   */
  orderBy?: Prisma.MapSubmissionOrderByWithRelationInput | Prisma.MapSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapSubmissions.
   */
  cursor?: Prisma.MapSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapSubmissions.
   */
  distinct?: Prisma.MapSubmissionScalarFieldEnum | Prisma.MapSubmissionScalarFieldEnum[]
}

/**
 * MapSubmission findMany
 */
export type MapSubmissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmissions to fetch.
   */
  where?: Prisma.MapSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissions to fetch.
   */
  orderBy?: Prisma.MapSubmissionOrderByWithRelationInput | Prisma.MapSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapSubmissions.
   */
  cursor?: Prisma.MapSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissions.
   */
  skip?: number
  distinct?: Prisma.MapSubmissionScalarFieldEnum | Prisma.MapSubmissionScalarFieldEnum[]
}

/**
 * MapSubmission create
 */
export type MapSubmissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * The data needed to create a MapSubmission.
   */
  data: Prisma.XOR<Prisma.MapSubmissionCreateInput, Prisma.MapSubmissionUncheckedCreateInput>
}

/**
 * MapSubmission createMany
 */
export type MapSubmissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapSubmissions.
   */
  data: Prisma.MapSubmissionCreateManyInput | Prisma.MapSubmissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapSubmission createManyAndReturn
 */
export type MapSubmissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * The data used to create many MapSubmissions.
   */
  data: Prisma.MapSubmissionCreateManyInput | Prisma.MapSubmissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapSubmission update
 */
export type MapSubmissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * The data needed to update a MapSubmission.
   */
  data: Prisma.XOR<Prisma.MapSubmissionUpdateInput, Prisma.MapSubmissionUncheckedUpdateInput>
  /**
   * Choose, which MapSubmission to update.
   */
  where: Prisma.MapSubmissionWhereUniqueInput
}

/**
 * MapSubmission updateMany
 */
export type MapSubmissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapSubmissions.
   */
  data: Prisma.XOR<Prisma.MapSubmissionUpdateManyMutationInput, Prisma.MapSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which MapSubmissions to update
   */
  where?: Prisma.MapSubmissionWhereInput
  /**
   * Limit how many MapSubmissions to update.
   */
  limit?: number
}

/**
 * MapSubmission updateManyAndReturn
 */
export type MapSubmissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * The data used to update MapSubmissions.
   */
  data: Prisma.XOR<Prisma.MapSubmissionUpdateManyMutationInput, Prisma.MapSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which MapSubmissions to update
   */
  where?: Prisma.MapSubmissionWhereInput
  /**
   * Limit how many MapSubmissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapSubmission upsert
 */
export type MapSubmissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * The filter to search for the MapSubmission to update in case it exists.
   */
  where: Prisma.MapSubmissionWhereUniqueInput
  /**
   * In case the MapSubmission found by the `where` argument doesn't exist, create a new MapSubmission with this data.
   */
  create: Prisma.XOR<Prisma.MapSubmissionCreateInput, Prisma.MapSubmissionUncheckedCreateInput>
  /**
   * In case the MapSubmission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapSubmissionUpdateInput, Prisma.MapSubmissionUncheckedUpdateInput>
}

/**
 * MapSubmission delete
 */
export type MapSubmissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
  /**
   * Filter which MapSubmission to delete.
   */
  where: Prisma.MapSubmissionWhereUniqueInput
}

/**
 * MapSubmission deleteMany
 */
export type MapSubmissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapSubmissions to delete
   */
  where?: Prisma.MapSubmissionWhereInput
  /**
   * Limit how many MapSubmissions to delete.
   */
  limit?: number
}

/**
 * MapSubmission.dates
 */
export type MapSubmission$datesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  where?: Prisma.MapSubmissionDateWhereInput
  orderBy?: Prisma.MapSubmissionDateOrderByWithRelationInput | Prisma.MapSubmissionDateOrderByWithRelationInput[]
  cursor?: Prisma.MapSubmissionDateWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MapSubmissionDateScalarFieldEnum | Prisma.MapSubmissionDateScalarFieldEnum[]
}

/**
 * MapSubmission without action
 */
export type MapSubmissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmission
   */
  select?: Prisma.MapSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmission
   */
  omit?: Prisma.MapSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionInclude<ExtArgs> | null
}
