
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapReview` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapReview
 * 
 */
export type MapReviewModel = runtime.Types.Result.DefaultSelection<Prisma.$MapReviewPayload>

export type AggregateMapReview = {
  _count: MapReviewCountAggregateOutputType | null
  _avg: MapReviewAvgAggregateOutputType | null
  _sum: MapReviewSumAggregateOutputType | null
  _min: MapReviewMinAggregateOutputType | null
  _max: MapReviewMaxAggregateOutputType | null
}

export type MapReviewAvgAggregateOutputType = {
  id: number | null
  mapID: number | null
  reviewerID: number | null
  resolverID: number | null
}

export type MapReviewSumAggregateOutputType = {
  id: number | null
  mapID: number | null
  reviewerID: number | null
  resolverID: number | null
}

export type MapReviewMinAggregateOutputType = {
  id: number | null
  mainText: string | null
  mapID: number | null
  reviewerID: number | null
  resolved: boolean | null
  resolverID: number | null
  approves: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapReviewMaxAggregateOutputType = {
  id: number | null
  mainText: string | null
  mapID: number | null
  reviewerID: number | null
  resolved: boolean | null
  resolverID: number | null
  approves: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapReviewCountAggregateOutputType = {
  id: number
  mainText: number
  suggestions: number
  editHistory: number
  imageIDs: number
  mapID: number
  reviewerID: number
  resolved: number
  resolverID: number
  approves: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MapReviewAvgAggregateInputType = {
  id?: true
  mapID?: true
  reviewerID?: true
  resolverID?: true
}

export type MapReviewSumAggregateInputType = {
  id?: true
  mapID?: true
  reviewerID?: true
  resolverID?: true
}

export type MapReviewMinAggregateInputType = {
  id?: true
  mainText?: true
  mapID?: true
  reviewerID?: true
  resolved?: true
  resolverID?: true
  approves?: true
  createdAt?: true
  updatedAt?: true
}

export type MapReviewMaxAggregateInputType = {
  id?: true
  mainText?: true
  mapID?: true
  reviewerID?: true
  resolved?: true
  resolverID?: true
  approves?: true
  createdAt?: true
  updatedAt?: true
}

export type MapReviewCountAggregateInputType = {
  id?: true
  mainText?: true
  suggestions?: true
  editHistory?: true
  imageIDs?: true
  mapID?: true
  reviewerID?: true
  resolved?: true
  resolverID?: true
  approves?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MapReviewAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapReview to aggregate.
   */
  where?: Prisma.MapReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviews to fetch.
   */
  orderBy?: Prisma.MapReviewOrderByWithRelationInput | Prisma.MapReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapReviews
  **/
  _count?: true | MapReviewCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapReviewAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapReviewSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapReviewMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapReviewMaxAggregateInputType
}

export type GetMapReviewAggregateType<T extends MapReviewAggregateArgs> = {
      [P in keyof T & keyof AggregateMapReview]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapReview[P]>
    : Prisma.GetScalarType<T[P], AggregateMapReview[P]>
}




export type MapReviewGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapReviewWhereInput
  orderBy?: Prisma.MapReviewOrderByWithAggregationInput | Prisma.MapReviewOrderByWithAggregationInput[]
  by: Prisma.MapReviewScalarFieldEnum[] | Prisma.MapReviewScalarFieldEnum
  having?: Prisma.MapReviewScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapReviewCountAggregateInputType | true
  _avg?: MapReviewAvgAggregateInputType
  _sum?: MapReviewSumAggregateInputType
  _min?: MapReviewMinAggregateInputType
  _max?: MapReviewMaxAggregateInputType
}

export type MapReviewGroupByOutputType = {
  id: number
  mainText: string
  suggestions: runtime.JsonValue
  editHistory: runtime.JsonValue
  imageIDs: string[]
  mapID: number
  reviewerID: number
  resolved: boolean | null
  resolverID: number | null
  approves: boolean
  createdAt: Date
  updatedAt: Date
  _count: MapReviewCountAggregateOutputType | null
  _avg: MapReviewAvgAggregateOutputType | null
  _sum: MapReviewSumAggregateOutputType | null
  _min: MapReviewMinAggregateOutputType | null
  _max: MapReviewMaxAggregateOutputType | null
}

type GetMapReviewGroupByPayload<T extends MapReviewGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapReviewGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapReviewGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapReviewGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapReviewGroupByOutputType[P]>
      }
    >
  >



export type MapReviewWhereInput = {
  AND?: Prisma.MapReviewWhereInput | Prisma.MapReviewWhereInput[]
  OR?: Prisma.MapReviewWhereInput[]
  NOT?: Prisma.MapReviewWhereInput | Prisma.MapReviewWhereInput[]
  id?: Prisma.IntFilter<"MapReview"> | number
  mainText?: Prisma.StringFilter<"MapReview"> | string
  suggestions?: Prisma.JsonFilter<"MapReview">
  editHistory?: Prisma.JsonFilter<"MapReview">
  imageIDs?: Prisma.StringNullableListFilter<"MapReview">
  mapID?: Prisma.IntFilter<"MapReview"> | number
  reviewerID?: Prisma.IntFilter<"MapReview"> | number
  resolved?: Prisma.BoolNullableFilter<"MapReview"> | boolean | null
  resolverID?: Prisma.IntNullableFilter<"MapReview"> | number | null
  approves?: Prisma.BoolFilter<"MapReview"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MapReview"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapReview"> | Date | string
  comments?: Prisma.MapReviewCommentListRelationFilter
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  reviewer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  resolver?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  notifsAbout?: Prisma.NotificationListRelationFilter
}

export type MapReviewOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  mainText?: Prisma.SortOrder
  suggestions?: Prisma.SortOrder
  editHistory?: Prisma.SortOrder
  imageIDs?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  reviewerID?: Prisma.SortOrder
  resolved?: Prisma.SortOrderInput | Prisma.SortOrder
  resolverID?: Prisma.SortOrderInput | Prisma.SortOrder
  approves?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comments?: Prisma.MapReviewCommentOrderByRelationAggregateInput
  mmap?: Prisma.MMapOrderByWithRelationInput
  reviewer?: Prisma.UserOrderByWithRelationInput
  resolver?: Prisma.UserOrderByWithRelationInput
  notifsAbout?: Prisma.NotificationOrderByRelationAggregateInput
}

export type MapReviewWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MapReviewWhereInput | Prisma.MapReviewWhereInput[]
  OR?: Prisma.MapReviewWhereInput[]
  NOT?: Prisma.MapReviewWhereInput | Prisma.MapReviewWhereInput[]
  mainText?: Prisma.StringFilter<"MapReview"> | string
  suggestions?: Prisma.JsonFilter<"MapReview">
  editHistory?: Prisma.JsonFilter<"MapReview">
  imageIDs?: Prisma.StringNullableListFilter<"MapReview">
  mapID?: Prisma.IntFilter<"MapReview"> | number
  reviewerID?: Prisma.IntFilter<"MapReview"> | number
  resolved?: Prisma.BoolNullableFilter<"MapReview"> | boolean | null
  resolverID?: Prisma.IntNullableFilter<"MapReview"> | number | null
  approves?: Prisma.BoolFilter<"MapReview"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MapReview"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapReview"> | Date | string
  comments?: Prisma.MapReviewCommentListRelationFilter
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  reviewer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  resolver?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  notifsAbout?: Prisma.NotificationListRelationFilter
}, "id">

export type MapReviewOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  mainText?: Prisma.SortOrder
  suggestions?: Prisma.SortOrder
  editHistory?: Prisma.SortOrder
  imageIDs?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  reviewerID?: Prisma.SortOrder
  resolved?: Prisma.SortOrderInput | Prisma.SortOrder
  resolverID?: Prisma.SortOrderInput | Prisma.SortOrder
  approves?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MapReviewCountOrderByAggregateInput
  _avg?: Prisma.MapReviewAvgOrderByAggregateInput
  _max?: Prisma.MapReviewMaxOrderByAggregateInput
  _min?: Prisma.MapReviewMinOrderByAggregateInput
  _sum?: Prisma.MapReviewSumOrderByAggregateInput
}

export type MapReviewScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapReviewScalarWhereWithAggregatesInput | Prisma.MapReviewScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapReviewScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapReviewScalarWhereWithAggregatesInput | Prisma.MapReviewScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MapReview"> | number
  mainText?: Prisma.StringWithAggregatesFilter<"MapReview"> | string
  suggestions?: Prisma.JsonWithAggregatesFilter<"MapReview">
  editHistory?: Prisma.JsonWithAggregatesFilter<"MapReview">
  imageIDs?: Prisma.StringNullableListFilter<"MapReview">
  mapID?: Prisma.IntWithAggregatesFilter<"MapReview"> | number
  reviewerID?: Prisma.IntWithAggregatesFilter<"MapReview"> | number
  resolved?: Prisma.BoolNullableWithAggregatesFilter<"MapReview"> | boolean | null
  resolverID?: Prisma.IntNullableWithAggregatesFilter<"MapReview"> | number | null
  approves?: Prisma.BoolWithAggregatesFilter<"MapReview"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MapReview"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MapReview"> | Date | string
}

export type MapReviewCreateInput = {
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentCreateNestedManyWithoutReviewInput
  mmap: Prisma.MMapCreateNestedOneWithoutReviewsInput
  reviewer: Prisma.UserCreateNestedOneWithoutReviewsSubmittedInput
  resolver?: Prisma.UserCreateNestedOneWithoutReviewsResolvedInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewInput
}

export type MapReviewUncheckedCreateInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  reviewerID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentUncheckedCreateNestedManyWithoutReviewInput
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewInput
}

export type MapReviewUpdateInput = {
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUpdateManyWithoutReviewNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutReviewsNestedInput
  reviewer?: Prisma.UserUpdateOneRequiredWithoutReviewsSubmittedNestedInput
  resolver?: Prisma.UserUpdateOneWithoutReviewsResolvedNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUncheckedUpdateManyWithoutReviewNestedInput
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewNestedInput
}

export type MapReviewCreateManyInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  reviewerID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewUpdateManyMutationInput = {
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewListRelationFilter = {
  every?: Prisma.MapReviewWhereInput
  some?: Prisma.MapReviewWhereInput
  none?: Prisma.MapReviewWhereInput
}

export type MapReviewOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapReviewNullableScalarRelationFilter = {
  is?: Prisma.MapReviewWhereInput | null
  isNot?: Prisma.MapReviewWhereInput | null
}

export type MapReviewCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mainText?: Prisma.SortOrder
  suggestions?: Prisma.SortOrder
  editHistory?: Prisma.SortOrder
  imageIDs?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  reviewerID?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolverID?: Prisma.SortOrder
  approves?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapReviewAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  reviewerID?: Prisma.SortOrder
  resolverID?: Prisma.SortOrder
}

export type MapReviewMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mainText?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  reviewerID?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolverID?: Prisma.SortOrder
  approves?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapReviewMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mainText?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  reviewerID?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  resolverID?: Prisma.SortOrder
  approves?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapReviewSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  reviewerID?: Prisma.SortOrder
  resolverID?: Prisma.SortOrder
}

export type MapReviewScalarRelationFilter = {
  is?: Prisma.MapReviewWhereInput
  isNot?: Prisma.MapReviewWhereInput
}

export type MapReviewCreateNestedManyWithoutReviewerInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutReviewerInput, Prisma.MapReviewUncheckedCreateWithoutReviewerInput> | Prisma.MapReviewCreateWithoutReviewerInput[] | Prisma.MapReviewUncheckedCreateWithoutReviewerInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutReviewerInput | Prisma.MapReviewCreateOrConnectWithoutReviewerInput[]
  createMany?: Prisma.MapReviewCreateManyReviewerInputEnvelope
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
}

export type MapReviewCreateNestedManyWithoutResolverInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutResolverInput, Prisma.MapReviewUncheckedCreateWithoutResolverInput> | Prisma.MapReviewCreateWithoutResolverInput[] | Prisma.MapReviewUncheckedCreateWithoutResolverInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutResolverInput | Prisma.MapReviewCreateOrConnectWithoutResolverInput[]
  createMany?: Prisma.MapReviewCreateManyResolverInputEnvelope
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
}

export type MapReviewUncheckedCreateNestedManyWithoutReviewerInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutReviewerInput, Prisma.MapReviewUncheckedCreateWithoutReviewerInput> | Prisma.MapReviewCreateWithoutReviewerInput[] | Prisma.MapReviewUncheckedCreateWithoutReviewerInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutReviewerInput | Prisma.MapReviewCreateOrConnectWithoutReviewerInput[]
  createMany?: Prisma.MapReviewCreateManyReviewerInputEnvelope
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
}

export type MapReviewUncheckedCreateNestedManyWithoutResolverInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutResolverInput, Prisma.MapReviewUncheckedCreateWithoutResolverInput> | Prisma.MapReviewCreateWithoutResolverInput[] | Prisma.MapReviewUncheckedCreateWithoutResolverInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutResolverInput | Prisma.MapReviewCreateOrConnectWithoutResolverInput[]
  createMany?: Prisma.MapReviewCreateManyResolverInputEnvelope
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
}

export type MapReviewUpdateManyWithoutReviewerNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutReviewerInput, Prisma.MapReviewUncheckedCreateWithoutReviewerInput> | Prisma.MapReviewCreateWithoutReviewerInput[] | Prisma.MapReviewUncheckedCreateWithoutReviewerInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutReviewerInput | Prisma.MapReviewCreateOrConnectWithoutReviewerInput[]
  upsert?: Prisma.MapReviewUpsertWithWhereUniqueWithoutReviewerInput | Prisma.MapReviewUpsertWithWhereUniqueWithoutReviewerInput[]
  createMany?: Prisma.MapReviewCreateManyReviewerInputEnvelope
  set?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  disconnect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  delete?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  update?: Prisma.MapReviewUpdateWithWhereUniqueWithoutReviewerInput | Prisma.MapReviewUpdateWithWhereUniqueWithoutReviewerInput[]
  updateMany?: Prisma.MapReviewUpdateManyWithWhereWithoutReviewerInput | Prisma.MapReviewUpdateManyWithWhereWithoutReviewerInput[]
  deleteMany?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
}

export type MapReviewUpdateManyWithoutResolverNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutResolverInput, Prisma.MapReviewUncheckedCreateWithoutResolverInput> | Prisma.MapReviewCreateWithoutResolverInput[] | Prisma.MapReviewUncheckedCreateWithoutResolverInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutResolverInput | Prisma.MapReviewCreateOrConnectWithoutResolverInput[]
  upsert?: Prisma.MapReviewUpsertWithWhereUniqueWithoutResolverInput | Prisma.MapReviewUpsertWithWhereUniqueWithoutResolverInput[]
  createMany?: Prisma.MapReviewCreateManyResolverInputEnvelope
  set?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  disconnect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  delete?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  update?: Prisma.MapReviewUpdateWithWhereUniqueWithoutResolverInput | Prisma.MapReviewUpdateWithWhereUniqueWithoutResolverInput[]
  updateMany?: Prisma.MapReviewUpdateManyWithWhereWithoutResolverInput | Prisma.MapReviewUpdateManyWithWhereWithoutResolverInput[]
  deleteMany?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
}

export type MapReviewUncheckedUpdateManyWithoutReviewerNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutReviewerInput, Prisma.MapReviewUncheckedCreateWithoutReviewerInput> | Prisma.MapReviewCreateWithoutReviewerInput[] | Prisma.MapReviewUncheckedCreateWithoutReviewerInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutReviewerInput | Prisma.MapReviewCreateOrConnectWithoutReviewerInput[]
  upsert?: Prisma.MapReviewUpsertWithWhereUniqueWithoutReviewerInput | Prisma.MapReviewUpsertWithWhereUniqueWithoutReviewerInput[]
  createMany?: Prisma.MapReviewCreateManyReviewerInputEnvelope
  set?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  disconnect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  delete?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  update?: Prisma.MapReviewUpdateWithWhereUniqueWithoutReviewerInput | Prisma.MapReviewUpdateWithWhereUniqueWithoutReviewerInput[]
  updateMany?: Prisma.MapReviewUpdateManyWithWhereWithoutReviewerInput | Prisma.MapReviewUpdateManyWithWhereWithoutReviewerInput[]
  deleteMany?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
}

export type MapReviewUncheckedUpdateManyWithoutResolverNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutResolverInput, Prisma.MapReviewUncheckedCreateWithoutResolverInput> | Prisma.MapReviewCreateWithoutResolverInput[] | Prisma.MapReviewUncheckedCreateWithoutResolverInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutResolverInput | Prisma.MapReviewCreateOrConnectWithoutResolverInput[]
  upsert?: Prisma.MapReviewUpsertWithWhereUniqueWithoutResolverInput | Prisma.MapReviewUpsertWithWhereUniqueWithoutResolverInput[]
  createMany?: Prisma.MapReviewCreateManyResolverInputEnvelope
  set?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  disconnect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  delete?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  update?: Prisma.MapReviewUpdateWithWhereUniqueWithoutResolverInput | Prisma.MapReviewUpdateWithWhereUniqueWithoutResolverInput[]
  updateMany?: Prisma.MapReviewUpdateManyWithWhereWithoutResolverInput | Prisma.MapReviewUpdateManyWithWhereWithoutResolverInput[]
  deleteMany?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
}

export type MapReviewCreateNestedOneWithoutNotifsAboutInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutNotifsAboutInput, Prisma.MapReviewUncheckedCreateWithoutNotifsAboutInput>
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutNotifsAboutInput
  connect?: Prisma.MapReviewWhereUniqueInput
}

export type MapReviewUpdateOneWithoutNotifsAboutNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutNotifsAboutInput, Prisma.MapReviewUncheckedCreateWithoutNotifsAboutInput>
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutNotifsAboutInput
  upsert?: Prisma.MapReviewUpsertWithoutNotifsAboutInput
  disconnect?: Prisma.MapReviewWhereInput | boolean
  delete?: Prisma.MapReviewWhereInput | boolean
  connect?: Prisma.MapReviewWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapReviewUpdateToOneWithWhereWithoutNotifsAboutInput, Prisma.MapReviewUpdateWithoutNotifsAboutInput>, Prisma.MapReviewUncheckedUpdateWithoutNotifsAboutInput>
}

export type MapReviewCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutMmapInput, Prisma.MapReviewUncheckedCreateWithoutMmapInput> | Prisma.MapReviewCreateWithoutMmapInput[] | Prisma.MapReviewUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutMmapInput | Prisma.MapReviewCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapReviewCreateManyMmapInputEnvelope
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
}

export type MapReviewUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutMmapInput, Prisma.MapReviewUncheckedCreateWithoutMmapInput> | Prisma.MapReviewCreateWithoutMmapInput[] | Prisma.MapReviewUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutMmapInput | Prisma.MapReviewCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapReviewCreateManyMmapInputEnvelope
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
}

export type MapReviewUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutMmapInput, Prisma.MapReviewUncheckedCreateWithoutMmapInput> | Prisma.MapReviewCreateWithoutMmapInput[] | Prisma.MapReviewUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutMmapInput | Prisma.MapReviewCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapReviewUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapReviewUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapReviewCreateManyMmapInputEnvelope
  set?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  disconnect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  delete?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  update?: Prisma.MapReviewUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapReviewUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapReviewUpdateManyWithWhereWithoutMmapInput | Prisma.MapReviewUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
}

export type MapReviewUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutMmapInput, Prisma.MapReviewUncheckedCreateWithoutMmapInput> | Prisma.MapReviewCreateWithoutMmapInput[] | Prisma.MapReviewUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutMmapInput | Prisma.MapReviewCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapReviewUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapReviewUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapReviewCreateManyMmapInputEnvelope
  set?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  disconnect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  delete?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  connect?: Prisma.MapReviewWhereUniqueInput | Prisma.MapReviewWhereUniqueInput[]
  update?: Prisma.MapReviewUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapReviewUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapReviewUpdateManyWithWhereWithoutMmapInput | Prisma.MapReviewUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
}

export type MapReviewCreateimageIDsInput = {
  set: string[]
}

export type MapReviewUpdateimageIDsInput = {
  set?: string[]
  push?: string | string[]
}

export type MapReviewCreateNestedOneWithoutCommentsInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutCommentsInput, Prisma.MapReviewUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutCommentsInput
  connect?: Prisma.MapReviewWhereUniqueInput
}

export type MapReviewUpdateOneRequiredWithoutCommentsNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCreateWithoutCommentsInput, Prisma.MapReviewUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.MapReviewCreateOrConnectWithoutCommentsInput
  upsert?: Prisma.MapReviewUpsertWithoutCommentsInput
  connect?: Prisma.MapReviewWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapReviewUpdateToOneWithWhereWithoutCommentsInput, Prisma.MapReviewUpdateWithoutCommentsInput>, Prisma.MapReviewUncheckedUpdateWithoutCommentsInput>
}

export type MapReviewCreateWithoutReviewerInput = {
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentCreateNestedManyWithoutReviewInput
  mmap: Prisma.MMapCreateNestedOneWithoutReviewsInput
  resolver?: Prisma.UserCreateNestedOneWithoutReviewsResolvedInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewInput
}

export type MapReviewUncheckedCreateWithoutReviewerInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentUncheckedCreateNestedManyWithoutReviewInput
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewInput
}

export type MapReviewCreateOrConnectWithoutReviewerInput = {
  where: Prisma.MapReviewWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutReviewerInput, Prisma.MapReviewUncheckedCreateWithoutReviewerInput>
}

export type MapReviewCreateManyReviewerInputEnvelope = {
  data: Prisma.MapReviewCreateManyReviewerInput | Prisma.MapReviewCreateManyReviewerInput[]
  skipDuplicates?: boolean
}

export type MapReviewCreateWithoutResolverInput = {
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentCreateNestedManyWithoutReviewInput
  mmap: Prisma.MMapCreateNestedOneWithoutReviewsInput
  reviewer: Prisma.UserCreateNestedOneWithoutReviewsSubmittedInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewInput
}

export type MapReviewUncheckedCreateWithoutResolverInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  reviewerID: number
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentUncheckedCreateNestedManyWithoutReviewInput
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewInput
}

export type MapReviewCreateOrConnectWithoutResolverInput = {
  where: Prisma.MapReviewWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutResolverInput, Prisma.MapReviewUncheckedCreateWithoutResolverInput>
}

export type MapReviewCreateManyResolverInputEnvelope = {
  data: Prisma.MapReviewCreateManyResolverInput | Prisma.MapReviewCreateManyResolverInput[]
  skipDuplicates?: boolean
}

export type MapReviewUpsertWithWhereUniqueWithoutReviewerInput = {
  where: Prisma.MapReviewWhereUniqueInput
  update: Prisma.XOR<Prisma.MapReviewUpdateWithoutReviewerInput, Prisma.MapReviewUncheckedUpdateWithoutReviewerInput>
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutReviewerInput, Prisma.MapReviewUncheckedCreateWithoutReviewerInput>
}

export type MapReviewUpdateWithWhereUniqueWithoutReviewerInput = {
  where: Prisma.MapReviewWhereUniqueInput
  data: Prisma.XOR<Prisma.MapReviewUpdateWithoutReviewerInput, Prisma.MapReviewUncheckedUpdateWithoutReviewerInput>
}

export type MapReviewUpdateManyWithWhereWithoutReviewerInput = {
  where: Prisma.MapReviewScalarWhereInput
  data: Prisma.XOR<Prisma.MapReviewUpdateManyMutationInput, Prisma.MapReviewUncheckedUpdateManyWithoutReviewerInput>
}

export type MapReviewScalarWhereInput = {
  AND?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
  OR?: Prisma.MapReviewScalarWhereInput[]
  NOT?: Prisma.MapReviewScalarWhereInput | Prisma.MapReviewScalarWhereInput[]
  id?: Prisma.IntFilter<"MapReview"> | number
  mainText?: Prisma.StringFilter<"MapReview"> | string
  suggestions?: Prisma.JsonFilter<"MapReview">
  editHistory?: Prisma.JsonFilter<"MapReview">
  imageIDs?: Prisma.StringNullableListFilter<"MapReview">
  mapID?: Prisma.IntFilter<"MapReview"> | number
  reviewerID?: Prisma.IntFilter<"MapReview"> | number
  resolved?: Prisma.BoolNullableFilter<"MapReview"> | boolean | null
  resolverID?: Prisma.IntNullableFilter<"MapReview"> | number | null
  approves?: Prisma.BoolFilter<"MapReview"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MapReview"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapReview"> | Date | string
}

export type MapReviewUpsertWithWhereUniqueWithoutResolverInput = {
  where: Prisma.MapReviewWhereUniqueInput
  update: Prisma.XOR<Prisma.MapReviewUpdateWithoutResolverInput, Prisma.MapReviewUncheckedUpdateWithoutResolverInput>
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutResolverInput, Prisma.MapReviewUncheckedCreateWithoutResolverInput>
}

export type MapReviewUpdateWithWhereUniqueWithoutResolverInput = {
  where: Prisma.MapReviewWhereUniqueInput
  data: Prisma.XOR<Prisma.MapReviewUpdateWithoutResolverInput, Prisma.MapReviewUncheckedUpdateWithoutResolverInput>
}

export type MapReviewUpdateManyWithWhereWithoutResolverInput = {
  where: Prisma.MapReviewScalarWhereInput
  data: Prisma.XOR<Prisma.MapReviewUpdateManyMutationInput, Prisma.MapReviewUncheckedUpdateManyWithoutResolverInput>
}

export type MapReviewCreateWithoutNotifsAboutInput = {
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentCreateNestedManyWithoutReviewInput
  mmap: Prisma.MMapCreateNestedOneWithoutReviewsInput
  reviewer: Prisma.UserCreateNestedOneWithoutReviewsSubmittedInput
  resolver?: Prisma.UserCreateNestedOneWithoutReviewsResolvedInput
}

export type MapReviewUncheckedCreateWithoutNotifsAboutInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  reviewerID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentUncheckedCreateNestedManyWithoutReviewInput
}

export type MapReviewCreateOrConnectWithoutNotifsAboutInput = {
  where: Prisma.MapReviewWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutNotifsAboutInput, Prisma.MapReviewUncheckedCreateWithoutNotifsAboutInput>
}

export type MapReviewUpsertWithoutNotifsAboutInput = {
  update: Prisma.XOR<Prisma.MapReviewUpdateWithoutNotifsAboutInput, Prisma.MapReviewUncheckedUpdateWithoutNotifsAboutInput>
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutNotifsAboutInput, Prisma.MapReviewUncheckedCreateWithoutNotifsAboutInput>
  where?: Prisma.MapReviewWhereInput
}

export type MapReviewUpdateToOneWithWhereWithoutNotifsAboutInput = {
  where?: Prisma.MapReviewWhereInput
  data: Prisma.XOR<Prisma.MapReviewUpdateWithoutNotifsAboutInput, Prisma.MapReviewUncheckedUpdateWithoutNotifsAboutInput>
}

export type MapReviewUpdateWithoutNotifsAboutInput = {
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUpdateManyWithoutReviewNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutReviewsNestedInput
  reviewer?: Prisma.UserUpdateOneRequiredWithoutReviewsSubmittedNestedInput
  resolver?: Prisma.UserUpdateOneWithoutReviewsResolvedNestedInput
}

export type MapReviewUncheckedUpdateWithoutNotifsAboutInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUncheckedUpdateManyWithoutReviewNestedInput
}

export type MapReviewCreateWithoutMmapInput = {
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentCreateNestedManyWithoutReviewInput
  reviewer: Prisma.UserCreateNestedOneWithoutReviewsSubmittedInput
  resolver?: Prisma.UserCreateNestedOneWithoutReviewsResolvedInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewInput
}

export type MapReviewUncheckedCreateWithoutMmapInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  reviewerID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.MapReviewCommentUncheckedCreateNestedManyWithoutReviewInput
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewInput
}

export type MapReviewCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapReviewWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutMmapInput, Prisma.MapReviewUncheckedCreateWithoutMmapInput>
}

export type MapReviewCreateManyMmapInputEnvelope = {
  data: Prisma.MapReviewCreateManyMmapInput | Prisma.MapReviewCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type MapReviewUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapReviewWhereUniqueInput
  update: Prisma.XOR<Prisma.MapReviewUpdateWithoutMmapInput, Prisma.MapReviewUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutMmapInput, Prisma.MapReviewUncheckedCreateWithoutMmapInput>
}

export type MapReviewUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapReviewWhereUniqueInput
  data: Prisma.XOR<Prisma.MapReviewUpdateWithoutMmapInput, Prisma.MapReviewUncheckedUpdateWithoutMmapInput>
}

export type MapReviewUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.MapReviewScalarWhereInput
  data: Prisma.XOR<Prisma.MapReviewUpdateManyMutationInput, Prisma.MapReviewUncheckedUpdateManyWithoutMmapInput>
}

export type MapReviewCreateWithoutCommentsInput = {
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutReviewsInput
  reviewer: Prisma.UserCreateNestedOneWithoutReviewsSubmittedInput
  resolver?: Prisma.UserCreateNestedOneWithoutReviewsResolvedInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewInput
}

export type MapReviewUncheckedCreateWithoutCommentsInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  reviewerID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewInput
}

export type MapReviewCreateOrConnectWithoutCommentsInput = {
  where: Prisma.MapReviewWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutCommentsInput, Prisma.MapReviewUncheckedCreateWithoutCommentsInput>
}

export type MapReviewUpsertWithoutCommentsInput = {
  update: Prisma.XOR<Prisma.MapReviewUpdateWithoutCommentsInput, Prisma.MapReviewUncheckedUpdateWithoutCommentsInput>
  create: Prisma.XOR<Prisma.MapReviewCreateWithoutCommentsInput, Prisma.MapReviewUncheckedCreateWithoutCommentsInput>
  where?: Prisma.MapReviewWhereInput
}

export type MapReviewUpdateToOneWithWhereWithoutCommentsInput = {
  where?: Prisma.MapReviewWhereInput
  data: Prisma.XOR<Prisma.MapReviewUpdateWithoutCommentsInput, Prisma.MapReviewUncheckedUpdateWithoutCommentsInput>
}

export type MapReviewUpdateWithoutCommentsInput = {
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutReviewsNestedInput
  reviewer?: Prisma.UserUpdateOneRequiredWithoutReviewsSubmittedNestedInput
  resolver?: Prisma.UserUpdateOneWithoutReviewsResolvedNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateWithoutCommentsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewNestedInput
}

export type MapReviewCreateManyReviewerInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewCreateManyResolverInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  mapID: number
  reviewerID: number
  resolved?: boolean | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewUpdateWithoutReviewerInput = {
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUpdateManyWithoutReviewNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutReviewsNestedInput
  resolver?: Prisma.UserUpdateOneWithoutReviewsResolvedNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateWithoutReviewerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUncheckedUpdateManyWithoutReviewNestedInput
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateManyWithoutReviewerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewUpdateWithoutResolverInput = {
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUpdateManyWithoutReviewNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutReviewsNestedInput
  reviewer?: Prisma.UserUpdateOneRequiredWithoutReviewsSubmittedNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateWithoutResolverInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUncheckedUpdateManyWithoutReviewNestedInput
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateManyWithoutResolverInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewCreateManyMmapInput = {
  id?: number
  mainText: string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewCreateimageIDsInput | string[]
  reviewerID: number
  resolved?: boolean | null
  resolverID?: number | null
  approves?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewUpdateWithoutMmapInput = {
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUpdateManyWithoutReviewNestedInput
  reviewer?: Prisma.UserUpdateOneRequiredWithoutReviewsSubmittedNestedInput
  resolver?: Prisma.UserUpdateOneWithoutReviewsResolvedNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateWithoutMmapInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.MapReviewCommentUncheckedUpdateManyWithoutReviewNestedInput
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewNestedInput
}

export type MapReviewUncheckedUpdateManyWithoutMmapInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mainText?: Prisma.StringFieldUpdateOperationsInput | string
  suggestions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  editHistory?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  imageIDs?: Prisma.MapReviewUpdateimageIDsInput | string[]
  reviewerID?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  resolverID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  approves?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MapReviewCountOutputType
 */

export type MapReviewCountOutputType = {
  comments: number
  notifsAbout: number
}

export type MapReviewCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comments?: boolean | MapReviewCountOutputTypeCountCommentsArgs
  notifsAbout?: boolean | MapReviewCountOutputTypeCountNotifsAboutArgs
}

/**
 * MapReviewCountOutputType without action
 */
export type MapReviewCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewCountOutputType
   */
  select?: Prisma.MapReviewCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MapReviewCountOutputType without action
 */
export type MapReviewCountOutputTypeCountCommentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapReviewCommentWhereInput
}

/**
 * MapReviewCountOutputType without action
 */
export type MapReviewCountOutputTypeCountNotifsAboutArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationWhereInput
}


export type MapReviewSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mainText?: boolean
  suggestions?: boolean
  editHistory?: boolean
  imageIDs?: boolean
  mapID?: boolean
  reviewerID?: boolean
  resolved?: boolean
  resolverID?: boolean
  approves?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comments?: boolean | Prisma.MapReview$commentsArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  reviewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  resolver?: boolean | Prisma.MapReview$resolverArgs<ExtArgs>
  notifsAbout?: boolean | Prisma.MapReview$notifsAboutArgs<ExtArgs>
  _count?: boolean | Prisma.MapReviewCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapReview"]>

export type MapReviewSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mainText?: boolean
  suggestions?: boolean
  editHistory?: boolean
  imageIDs?: boolean
  mapID?: boolean
  reviewerID?: boolean
  resolved?: boolean
  resolverID?: boolean
  approves?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  reviewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  resolver?: boolean | Prisma.MapReview$resolverArgs<ExtArgs>
}, ExtArgs["result"]["mapReview"]>

export type MapReviewSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mainText?: boolean
  suggestions?: boolean
  editHistory?: boolean
  imageIDs?: boolean
  mapID?: boolean
  reviewerID?: boolean
  resolved?: boolean
  resolverID?: boolean
  approves?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  reviewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  resolver?: boolean | Prisma.MapReview$resolverArgs<ExtArgs>
}, ExtArgs["result"]["mapReview"]>

export type MapReviewSelectScalar = {
  id?: boolean
  mainText?: boolean
  suggestions?: boolean
  editHistory?: boolean
  imageIDs?: boolean
  mapID?: boolean
  reviewerID?: boolean
  resolved?: boolean
  resolverID?: boolean
  approves?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MapReviewOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "mainText" | "suggestions" | "editHistory" | "imageIDs" | "mapID" | "reviewerID" | "resolved" | "resolverID" | "approves" | "createdAt" | "updatedAt", ExtArgs["result"]["mapReview"]>
export type MapReviewInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comments?: boolean | Prisma.MapReview$commentsArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  reviewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  resolver?: boolean | Prisma.MapReview$resolverArgs<ExtArgs>
  notifsAbout?: boolean | Prisma.MapReview$notifsAboutArgs<ExtArgs>
  _count?: boolean | Prisma.MapReviewCountOutputTypeDefaultArgs<ExtArgs>
}
export type MapReviewIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  reviewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  resolver?: boolean | Prisma.MapReview$resolverArgs<ExtArgs>
}
export type MapReviewIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  reviewer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  resolver?: boolean | Prisma.MapReview$resolverArgs<ExtArgs>
}

export type $MapReviewPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapReview"
  objects: {
    comments: Prisma.$MapReviewCommentPayload<ExtArgs>[]
    mmap: Prisma.$MMapPayload<ExtArgs>
    reviewer: Prisma.$UserPayload<ExtArgs>
    resolver: Prisma.$UserPayload<ExtArgs> | null
    notifsAbout: Prisma.$NotificationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    mainText: string
    /**
     * Array of MapSubmissionSuggestion model
     */
    suggestions: runtime.JsonValue
    /**
     * Array of MapReviewEdit model
     */
    editHistory: runtime.JsonValue
    imageIDs: string[]
    mapID: number
    reviewerID: number
    /**
     * If NULL, the review does not need resolving to pass to FINAL_APPROVAL
     */
    resolved: boolean | null
    resolverID: number | null
    approves: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mapReview"]>
  composites: {}
}

export type MapReviewGetPayload<S extends boolean | null | undefined | MapReviewDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapReviewPayload, S>

export type MapReviewCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapReviewCountAggregateInputType | true
  }

export interface MapReviewDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapReview'], meta: { name: 'MapReview' } }
  /**
   * Find zero or one MapReview that matches the filter.
   * @param {MapReviewFindUniqueArgs} args - Arguments to find a MapReview
   * @example
   * // Get one MapReview
   * const mapReview = await prisma.mapReview.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapReviewFindUniqueArgs>(args: Prisma.SelectSubset<T, MapReviewFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapReview that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapReviewFindUniqueOrThrowArgs} args - Arguments to find a MapReview
   * @example
   * // Get one MapReview
   * const mapReview = await prisma.mapReview.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapReviewFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapReview that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewFindFirstArgs} args - Arguments to find a MapReview
   * @example
   * // Get one MapReview
   * const mapReview = await prisma.mapReview.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapReviewFindFirstArgs>(args?: Prisma.SelectSubset<T, MapReviewFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapReview that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewFindFirstOrThrowArgs} args - Arguments to find a MapReview
   * @example
   * // Get one MapReview
   * const mapReview = await prisma.mapReview.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapReviewFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapReviews that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapReviews
   * const mapReviews = await prisma.mapReview.findMany()
   * 
   * // Get first 10 MapReviews
   * const mapReviews = await prisma.mapReview.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mapReviewWithIdOnly = await prisma.mapReview.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MapReviewFindManyArgs>(args?: Prisma.SelectSubset<T, MapReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapReview.
   * @param {MapReviewCreateArgs} args - Arguments to create a MapReview.
   * @example
   * // Create one MapReview
   * const MapReview = await prisma.mapReview.create({
   *   data: {
   *     // ... data to create a MapReview
   *   }
   * })
   * 
   */
  create<T extends MapReviewCreateArgs>(args: Prisma.SelectSubset<T, MapReviewCreateArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapReviews.
   * @param {MapReviewCreateManyArgs} args - Arguments to create many MapReviews.
   * @example
   * // Create many MapReviews
   * const mapReview = await prisma.mapReview.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapReviewCreateManyArgs>(args?: Prisma.SelectSubset<T, MapReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapReviews and returns the data saved in the database.
   * @param {MapReviewCreateManyAndReturnArgs} args - Arguments to create many MapReviews.
   * @example
   * // Create many MapReviews
   * const mapReview = await prisma.mapReview.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapReviews and only return the `id`
   * const mapReviewWithIdOnly = await prisma.mapReview.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapReviewCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapReview.
   * @param {MapReviewDeleteArgs} args - Arguments to delete one MapReview.
   * @example
   * // Delete one MapReview
   * const MapReview = await prisma.mapReview.delete({
   *   where: {
   *     // ... filter to delete one MapReview
   *   }
   * })
   * 
   */
  delete<T extends MapReviewDeleteArgs>(args: Prisma.SelectSubset<T, MapReviewDeleteArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapReview.
   * @param {MapReviewUpdateArgs} args - Arguments to update one MapReview.
   * @example
   * // Update one MapReview
   * const mapReview = await prisma.mapReview.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapReviewUpdateArgs>(args: Prisma.SelectSubset<T, MapReviewUpdateArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapReviews.
   * @param {MapReviewDeleteManyArgs} args - Arguments to filter MapReviews to delete.
   * @example
   * // Delete a few MapReviews
   * const { count } = await prisma.mapReview.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapReviewDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapReviews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapReviews
   * const mapReview = await prisma.mapReview.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapReviewUpdateManyArgs>(args: Prisma.SelectSubset<T, MapReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapReviews and returns the data updated in the database.
   * @param {MapReviewUpdateManyAndReturnArgs} args - Arguments to update many MapReviews.
   * @example
   * // Update many MapReviews
   * const mapReview = await prisma.mapReview.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapReviews and only return the `id`
   * const mapReviewWithIdOnly = await prisma.mapReview.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapReviewUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapReview.
   * @param {MapReviewUpsertArgs} args - Arguments to update or create a MapReview.
   * @example
   * // Update or create a MapReview
   * const mapReview = await prisma.mapReview.upsert({
   *   create: {
   *     // ... data to create a MapReview
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapReview we want to update
   *   }
   * })
   */
  upsert<T extends MapReviewUpsertArgs>(args: Prisma.SelectSubset<T, MapReviewUpsertArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapReviews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCountArgs} args - Arguments to filter MapReviews to count.
   * @example
   * // Count the number of MapReviews
   * const count = await prisma.mapReview.count({
   *   where: {
   *     // ... the filter for the MapReviews we want to count
   *   }
   * })
  **/
  count<T extends MapReviewCountArgs>(
    args?: Prisma.Subset<T, MapReviewCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapReviewCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapReview.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapReviewAggregateArgs>(args: Prisma.Subset<T, MapReviewAggregateArgs>): Prisma.PrismaPromise<GetMapReviewAggregateType<T>>

  /**
   * Group by MapReview.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapReviewGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapReviewGroupByArgs['orderBy'] }
      : { orderBy?: MapReviewGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapReview model
 */
readonly fields: MapReviewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapReview.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapReviewClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  comments<T extends Prisma.MapReview$commentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapReview$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  reviewer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  resolver<T extends Prisma.MapReview$resolverArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapReview$resolverArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  notifsAbout<T extends Prisma.MapReview$notifsAboutArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapReview$notifsAboutArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapReview model
 */
export interface MapReviewFieldRefs {
  readonly id: Prisma.FieldRef<"MapReview", 'Int'>
  readonly mainText: Prisma.FieldRef<"MapReview", 'String'>
  readonly suggestions: Prisma.FieldRef<"MapReview", 'Json'>
  readonly editHistory: Prisma.FieldRef<"MapReview", 'Json'>
  readonly imageIDs: Prisma.FieldRef<"MapReview", 'String[]'>
  readonly mapID: Prisma.FieldRef<"MapReview", 'Int'>
  readonly reviewerID: Prisma.FieldRef<"MapReview", 'Int'>
  readonly resolved: Prisma.FieldRef<"MapReview", 'Boolean'>
  readonly resolverID: Prisma.FieldRef<"MapReview", 'Int'>
  readonly approves: Prisma.FieldRef<"MapReview", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"MapReview", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MapReview", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MapReview findUnique
 */
export type MapReviewFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * Filter, which MapReview to fetch.
   */
  where: Prisma.MapReviewWhereUniqueInput
}

/**
 * MapReview findUniqueOrThrow
 */
export type MapReviewFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * Filter, which MapReview to fetch.
   */
  where: Prisma.MapReviewWhereUniqueInput
}

/**
 * MapReview findFirst
 */
export type MapReviewFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * Filter, which MapReview to fetch.
   */
  where?: Prisma.MapReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviews to fetch.
   */
  orderBy?: Prisma.MapReviewOrderByWithRelationInput | Prisma.MapReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapReviews.
   */
  cursor?: Prisma.MapReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapReviews.
   */
  distinct?: Prisma.MapReviewScalarFieldEnum | Prisma.MapReviewScalarFieldEnum[]
}

/**
 * MapReview findFirstOrThrow
 */
export type MapReviewFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * Filter, which MapReview to fetch.
   */
  where?: Prisma.MapReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviews to fetch.
   */
  orderBy?: Prisma.MapReviewOrderByWithRelationInput | Prisma.MapReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapReviews.
   */
  cursor?: Prisma.MapReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapReviews.
   */
  distinct?: Prisma.MapReviewScalarFieldEnum | Prisma.MapReviewScalarFieldEnum[]
}

/**
 * MapReview findMany
 */
export type MapReviewFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * Filter, which MapReviews to fetch.
   */
  where?: Prisma.MapReviewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviews to fetch.
   */
  orderBy?: Prisma.MapReviewOrderByWithRelationInput | Prisma.MapReviewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapReviews.
   */
  cursor?: Prisma.MapReviewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviews.
   */
  skip?: number
  distinct?: Prisma.MapReviewScalarFieldEnum | Prisma.MapReviewScalarFieldEnum[]
}

/**
 * MapReview create
 */
export type MapReviewCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * The data needed to create a MapReview.
   */
  data: Prisma.XOR<Prisma.MapReviewCreateInput, Prisma.MapReviewUncheckedCreateInput>
}

/**
 * MapReview createMany
 */
export type MapReviewCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapReviews.
   */
  data: Prisma.MapReviewCreateManyInput | Prisma.MapReviewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapReview createManyAndReturn
 */
export type MapReviewCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * The data used to create many MapReviews.
   */
  data: Prisma.MapReviewCreateManyInput | Prisma.MapReviewCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapReview update
 */
export type MapReviewUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * The data needed to update a MapReview.
   */
  data: Prisma.XOR<Prisma.MapReviewUpdateInput, Prisma.MapReviewUncheckedUpdateInput>
  /**
   * Choose, which MapReview to update.
   */
  where: Prisma.MapReviewWhereUniqueInput
}

/**
 * MapReview updateMany
 */
export type MapReviewUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapReviews.
   */
  data: Prisma.XOR<Prisma.MapReviewUpdateManyMutationInput, Prisma.MapReviewUncheckedUpdateManyInput>
  /**
   * Filter which MapReviews to update
   */
  where?: Prisma.MapReviewWhereInput
  /**
   * Limit how many MapReviews to update.
   */
  limit?: number
}

/**
 * MapReview updateManyAndReturn
 */
export type MapReviewUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * The data used to update MapReviews.
   */
  data: Prisma.XOR<Prisma.MapReviewUpdateManyMutationInput, Prisma.MapReviewUncheckedUpdateManyInput>
  /**
   * Filter which MapReviews to update
   */
  where?: Prisma.MapReviewWhereInput
  /**
   * Limit how many MapReviews to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapReview upsert
 */
export type MapReviewUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * The filter to search for the MapReview to update in case it exists.
   */
  where: Prisma.MapReviewWhereUniqueInput
  /**
   * In case the MapReview found by the `where` argument doesn't exist, create a new MapReview with this data.
   */
  create: Prisma.XOR<Prisma.MapReviewCreateInput, Prisma.MapReviewUncheckedCreateInput>
  /**
   * In case the MapReview was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapReviewUpdateInput, Prisma.MapReviewUncheckedUpdateInput>
}

/**
 * MapReview delete
 */
export type MapReviewDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
  /**
   * Filter which MapReview to delete.
   */
  where: Prisma.MapReviewWhereUniqueInput
}

/**
 * MapReview deleteMany
 */
export type MapReviewDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapReviews to delete
   */
  where?: Prisma.MapReviewWhereInput
  /**
   * Limit how many MapReviews to delete.
   */
  limit?: number
}

/**
 * MapReview.comments
 */
export type MapReview$commentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  where?: Prisma.MapReviewCommentWhereInput
  orderBy?: Prisma.MapReviewCommentOrderByWithRelationInput | Prisma.MapReviewCommentOrderByWithRelationInput[]
  cursor?: Prisma.MapReviewCommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MapReviewCommentScalarFieldEnum | Prisma.MapReviewCommentScalarFieldEnum[]
}

/**
 * MapReview.resolver
 */
export type MapReview$resolverArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * MapReview.notifsAbout
 */
export type MapReview$notifsAboutArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null
  where?: Prisma.NotificationWhereInput
  orderBy?: Prisma.NotificationOrderByWithRelationInput | Prisma.NotificationOrderByWithRelationInput[]
  cursor?: Prisma.NotificationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationScalarFieldEnum | Prisma.NotificationScalarFieldEnum[]
}

/**
 * MapReview without action
 */
export type MapReviewDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReview
   */
  select?: Prisma.MapReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReview
   */
  omit?: Prisma.MapReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewInclude<ExtArgs> | null
}
