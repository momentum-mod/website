
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapVersion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapVersion
 * 
 */
export type MapVersionModel = runtime.Types.Result.DefaultSelection<Prisma.$MapVersionPayload>

export type AggregateMapVersion = {
  _count: MapVersionCountAggregateOutputType | null
  _avg: MapVersionAvgAggregateOutputType | null
  _sum: MapVersionSumAggregateOutputType | null
  _min: MapVersionMinAggregateOutputType | null
  _max: MapVersionMaxAggregateOutputType | null
}

export type MapVersionAvgAggregateOutputType = {
  versionNum: number | null
  submitterID: number | null
  mapID: number | null
}

export type MapVersionSumAggregateOutputType = {
  versionNum: number | null
  submitterID: number | null
  mapID: number | null
}

export type MapVersionMinAggregateOutputType = {
  id: string | null
  versionNum: number | null
  changelog: string | null
  bspHash: string | null
  zoneHash: string | null
  bspDownloadId: string | null
  vmfDownloadId: string | null
  zones: string | null
  submitterID: number | null
  mapID: number | null
  createdAt: Date | null
}

export type MapVersionMaxAggregateOutputType = {
  id: string | null
  versionNum: number | null
  changelog: string | null
  bspHash: string | null
  zoneHash: string | null
  bspDownloadId: string | null
  vmfDownloadId: string | null
  zones: string | null
  submitterID: number | null
  mapID: number | null
  createdAt: Date | null
}

export type MapVersionCountAggregateOutputType = {
  id: number
  versionNum: number
  changelog: number
  bspHash: number
  zoneHash: number
  bspDownloadId: number
  vmfDownloadId: number
  zones: number
  submitterID: number
  mapID: number
  createdAt: number
  _all: number
}


export type MapVersionAvgAggregateInputType = {
  versionNum?: true
  submitterID?: true
  mapID?: true
}

export type MapVersionSumAggregateInputType = {
  versionNum?: true
  submitterID?: true
  mapID?: true
}

export type MapVersionMinAggregateInputType = {
  id?: true
  versionNum?: true
  changelog?: true
  bspHash?: true
  zoneHash?: true
  bspDownloadId?: true
  vmfDownloadId?: true
  zones?: true
  submitterID?: true
  mapID?: true
  createdAt?: true
}

export type MapVersionMaxAggregateInputType = {
  id?: true
  versionNum?: true
  changelog?: true
  bspHash?: true
  zoneHash?: true
  bspDownloadId?: true
  vmfDownloadId?: true
  zones?: true
  submitterID?: true
  mapID?: true
  createdAt?: true
}

export type MapVersionCountAggregateInputType = {
  id?: true
  versionNum?: true
  changelog?: true
  bspHash?: true
  zoneHash?: true
  bspDownloadId?: true
  vmfDownloadId?: true
  zones?: true
  submitterID?: true
  mapID?: true
  createdAt?: true
  _all?: true
}

export type MapVersionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapVersion to aggregate.
   */
  where?: Prisma.MapVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapVersions to fetch.
   */
  orderBy?: Prisma.MapVersionOrderByWithRelationInput | Prisma.MapVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapVersions
  **/
  _count?: true | MapVersionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapVersionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapVersionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapVersionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapVersionMaxAggregateInputType
}

export type GetMapVersionAggregateType<T extends MapVersionAggregateArgs> = {
      [P in keyof T & keyof AggregateMapVersion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapVersion[P]>
    : Prisma.GetScalarType<T[P], AggregateMapVersion[P]>
}




export type MapVersionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapVersionWhereInput
  orderBy?: Prisma.MapVersionOrderByWithAggregationInput | Prisma.MapVersionOrderByWithAggregationInput[]
  by: Prisma.MapVersionScalarFieldEnum[] | Prisma.MapVersionScalarFieldEnum
  having?: Prisma.MapVersionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapVersionCountAggregateInputType | true
  _avg?: MapVersionAvgAggregateInputType
  _sum?: MapVersionSumAggregateInputType
  _min?: MapVersionMinAggregateInputType
  _max?: MapVersionMaxAggregateInputType
}

export type MapVersionGroupByOutputType = {
  id: string
  versionNum: number
  changelog: string | null
  bspHash: string | null
  zoneHash: string | null
  bspDownloadId: string | null
  vmfDownloadId: string | null
  zones: string | null
  submitterID: number | null
  mapID: number
  createdAt: Date
  _count: MapVersionCountAggregateOutputType | null
  _avg: MapVersionAvgAggregateOutputType | null
  _sum: MapVersionSumAggregateOutputType | null
  _min: MapVersionMinAggregateOutputType | null
  _max: MapVersionMaxAggregateOutputType | null
}

type GetMapVersionGroupByPayload<T extends MapVersionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapVersionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapVersionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapVersionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapVersionGroupByOutputType[P]>
      }
    >
  >



export type MapVersionWhereInput = {
  AND?: Prisma.MapVersionWhereInput | Prisma.MapVersionWhereInput[]
  OR?: Prisma.MapVersionWhereInput[]
  NOT?: Prisma.MapVersionWhereInput | Prisma.MapVersionWhereInput[]
  id?: Prisma.UuidFilter<"MapVersion"> | string
  versionNum?: Prisma.IntFilter<"MapVersion"> | number
  changelog?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  bspHash?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  zoneHash?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  bspDownloadId?: Prisma.UuidNullableFilter<"MapVersion"> | string | null
  vmfDownloadId?: Prisma.UuidNullableFilter<"MapVersion"> | string | null
  zones?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  submitterID?: Prisma.IntNullableFilter<"MapVersion"> | number | null
  mapID?: Prisma.IntFilter<"MapVersion"> | number
  createdAt?: Prisma.DateTimeFilter<"MapVersion"> | Date | string
  submitter?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  currentVersion?: Prisma.XOR<Prisma.MMapNullableScalarRelationFilter, Prisma.MMapWhereInput> | null
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}

export type MapVersionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  versionNum?: Prisma.SortOrder
  changelog?: Prisma.SortOrderInput | Prisma.SortOrder
  bspHash?: Prisma.SortOrderInput | Prisma.SortOrder
  zoneHash?: Prisma.SortOrderInput | Prisma.SortOrder
  bspDownloadId?: Prisma.SortOrderInput | Prisma.SortOrder
  vmfDownloadId?: Prisma.SortOrderInput | Prisma.SortOrder
  zones?: Prisma.SortOrderInput | Prisma.SortOrder
  submitterID?: Prisma.SortOrderInput | Prisma.SortOrder
  mapID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  submitter?: Prisma.UserOrderByWithRelationInput
  currentVersion?: Prisma.MMapOrderByWithRelationInput
  mmap?: Prisma.MMapOrderByWithRelationInput
}

export type MapVersionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MapVersionWhereInput | Prisma.MapVersionWhereInput[]
  OR?: Prisma.MapVersionWhereInput[]
  NOT?: Prisma.MapVersionWhereInput | Prisma.MapVersionWhereInput[]
  versionNum?: Prisma.IntFilter<"MapVersion"> | number
  changelog?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  bspHash?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  zoneHash?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  bspDownloadId?: Prisma.UuidNullableFilter<"MapVersion"> | string | null
  vmfDownloadId?: Prisma.UuidNullableFilter<"MapVersion"> | string | null
  zones?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  submitterID?: Prisma.IntNullableFilter<"MapVersion"> | number | null
  mapID?: Prisma.IntFilter<"MapVersion"> | number
  createdAt?: Prisma.DateTimeFilter<"MapVersion"> | Date | string
  submitter?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  currentVersion?: Prisma.XOR<Prisma.MMapNullableScalarRelationFilter, Prisma.MMapWhereInput> | null
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}, "id">

export type MapVersionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  versionNum?: Prisma.SortOrder
  changelog?: Prisma.SortOrderInput | Prisma.SortOrder
  bspHash?: Prisma.SortOrderInput | Prisma.SortOrder
  zoneHash?: Prisma.SortOrderInput | Prisma.SortOrder
  bspDownloadId?: Prisma.SortOrderInput | Prisma.SortOrder
  vmfDownloadId?: Prisma.SortOrderInput | Prisma.SortOrder
  zones?: Prisma.SortOrderInput | Prisma.SortOrder
  submitterID?: Prisma.SortOrderInput | Prisma.SortOrder
  mapID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.MapVersionCountOrderByAggregateInput
  _avg?: Prisma.MapVersionAvgOrderByAggregateInput
  _max?: Prisma.MapVersionMaxOrderByAggregateInput
  _min?: Prisma.MapVersionMinOrderByAggregateInput
  _sum?: Prisma.MapVersionSumOrderByAggregateInput
}

export type MapVersionScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapVersionScalarWhereWithAggregatesInput | Prisma.MapVersionScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapVersionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapVersionScalarWhereWithAggregatesInput | Prisma.MapVersionScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"MapVersion"> | string
  versionNum?: Prisma.IntWithAggregatesFilter<"MapVersion"> | number
  changelog?: Prisma.StringNullableWithAggregatesFilter<"MapVersion"> | string | null
  bspHash?: Prisma.StringNullableWithAggregatesFilter<"MapVersion"> | string | null
  zoneHash?: Prisma.StringNullableWithAggregatesFilter<"MapVersion"> | string | null
  bspDownloadId?: Prisma.UuidNullableWithAggregatesFilter<"MapVersion"> | string | null
  vmfDownloadId?: Prisma.UuidNullableWithAggregatesFilter<"MapVersion"> | string | null
  zones?: Prisma.StringNullableWithAggregatesFilter<"MapVersion"> | string | null
  submitterID?: Prisma.IntNullableWithAggregatesFilter<"MapVersion"> | number | null
  mapID?: Prisma.IntWithAggregatesFilter<"MapVersion"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MapVersion"> | Date | string
}

export type MapVersionCreateInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  createdAt?: Date | string
  submitter?: Prisma.UserCreateNestedOneWithoutSubmittedMapVersionsInput
  currentVersion?: Prisma.MMapCreateNestedOneWithoutCurrentVersionInput
  mmap: Prisma.MMapCreateNestedOneWithoutVersionsInput
}

export type MapVersionUncheckedCreateInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  submitterID?: number | null
  mapID: number
  createdAt?: Date | string
  currentVersion?: Prisma.MMapUncheckedCreateNestedOneWithoutCurrentVersionInput
}

export type MapVersionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submitter?: Prisma.UserUpdateOneWithoutSubmittedMapVersionsNestedInput
  currentVersion?: Prisma.MMapUpdateOneWithoutCurrentVersionNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutVersionsNestedInput
}

export type MapVersionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submitterID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentVersion?: Prisma.MMapUncheckedUpdateOneWithoutCurrentVersionNestedInput
}

export type MapVersionCreateManyInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  submitterID?: number | null
  mapID: number
  createdAt?: Date | string
}

export type MapVersionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapVersionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submitterID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapVersionListRelationFilter = {
  every?: Prisma.MapVersionWhereInput
  some?: Prisma.MapVersionWhereInput
  none?: Prisma.MapVersionWhereInput
}

export type MapVersionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapVersionNullableScalarRelationFilter = {
  is?: Prisma.MapVersionWhereInput | null
  isNot?: Prisma.MapVersionWhereInput | null
}

export type MapVersionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  versionNum?: Prisma.SortOrder
  changelog?: Prisma.SortOrder
  bspHash?: Prisma.SortOrder
  zoneHash?: Prisma.SortOrder
  bspDownloadId?: Prisma.SortOrder
  vmfDownloadId?: Prisma.SortOrder
  zones?: Prisma.SortOrder
  submitterID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MapVersionAvgOrderByAggregateInput = {
  versionNum?: Prisma.SortOrder
  submitterID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapVersionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  versionNum?: Prisma.SortOrder
  changelog?: Prisma.SortOrder
  bspHash?: Prisma.SortOrder
  zoneHash?: Prisma.SortOrder
  bspDownloadId?: Prisma.SortOrder
  vmfDownloadId?: Prisma.SortOrder
  zones?: Prisma.SortOrder
  submitterID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MapVersionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  versionNum?: Prisma.SortOrder
  changelog?: Prisma.SortOrder
  bspHash?: Prisma.SortOrder
  zoneHash?: Prisma.SortOrder
  bspDownloadId?: Prisma.SortOrder
  vmfDownloadId?: Prisma.SortOrder
  zones?: Prisma.SortOrder
  submitterID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MapVersionSumOrderByAggregateInput = {
  versionNum?: Prisma.SortOrder
  submitterID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapVersionCreateNestedManyWithoutSubmitterInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutSubmitterInput, Prisma.MapVersionUncheckedCreateWithoutSubmitterInput> | Prisma.MapVersionCreateWithoutSubmitterInput[] | Prisma.MapVersionUncheckedCreateWithoutSubmitterInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutSubmitterInput | Prisma.MapVersionCreateOrConnectWithoutSubmitterInput[]
  createMany?: Prisma.MapVersionCreateManySubmitterInputEnvelope
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
}

export type MapVersionUncheckedCreateNestedManyWithoutSubmitterInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutSubmitterInput, Prisma.MapVersionUncheckedCreateWithoutSubmitterInput> | Prisma.MapVersionCreateWithoutSubmitterInput[] | Prisma.MapVersionUncheckedCreateWithoutSubmitterInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutSubmitterInput | Prisma.MapVersionCreateOrConnectWithoutSubmitterInput[]
  createMany?: Prisma.MapVersionCreateManySubmitterInputEnvelope
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
}

export type MapVersionUpdateManyWithoutSubmitterNestedInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutSubmitterInput, Prisma.MapVersionUncheckedCreateWithoutSubmitterInput> | Prisma.MapVersionCreateWithoutSubmitterInput[] | Prisma.MapVersionUncheckedCreateWithoutSubmitterInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutSubmitterInput | Prisma.MapVersionCreateOrConnectWithoutSubmitterInput[]
  upsert?: Prisma.MapVersionUpsertWithWhereUniqueWithoutSubmitterInput | Prisma.MapVersionUpsertWithWhereUniqueWithoutSubmitterInput[]
  createMany?: Prisma.MapVersionCreateManySubmitterInputEnvelope
  set?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  disconnect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  delete?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  update?: Prisma.MapVersionUpdateWithWhereUniqueWithoutSubmitterInput | Prisma.MapVersionUpdateWithWhereUniqueWithoutSubmitterInput[]
  updateMany?: Prisma.MapVersionUpdateManyWithWhereWithoutSubmitterInput | Prisma.MapVersionUpdateManyWithWhereWithoutSubmitterInput[]
  deleteMany?: Prisma.MapVersionScalarWhereInput | Prisma.MapVersionScalarWhereInput[]
}

export type MapVersionUncheckedUpdateManyWithoutSubmitterNestedInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutSubmitterInput, Prisma.MapVersionUncheckedCreateWithoutSubmitterInput> | Prisma.MapVersionCreateWithoutSubmitterInput[] | Prisma.MapVersionUncheckedCreateWithoutSubmitterInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutSubmitterInput | Prisma.MapVersionCreateOrConnectWithoutSubmitterInput[]
  upsert?: Prisma.MapVersionUpsertWithWhereUniqueWithoutSubmitterInput | Prisma.MapVersionUpsertWithWhereUniqueWithoutSubmitterInput[]
  createMany?: Prisma.MapVersionCreateManySubmitterInputEnvelope
  set?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  disconnect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  delete?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  update?: Prisma.MapVersionUpdateWithWhereUniqueWithoutSubmitterInput | Prisma.MapVersionUpdateWithWhereUniqueWithoutSubmitterInput[]
  updateMany?: Prisma.MapVersionUpdateManyWithWhereWithoutSubmitterInput | Prisma.MapVersionUpdateManyWithWhereWithoutSubmitterInput[]
  deleteMany?: Prisma.MapVersionScalarWhereInput | Prisma.MapVersionScalarWhereInput[]
}

export type MapVersionCreateNestedOneWithoutCurrentVersionInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutCurrentVersionInput, Prisma.MapVersionUncheckedCreateWithoutCurrentVersionInput>
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutCurrentVersionInput
  connect?: Prisma.MapVersionWhereUniqueInput
}

export type MapVersionCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutMmapInput, Prisma.MapVersionUncheckedCreateWithoutMmapInput> | Prisma.MapVersionCreateWithoutMmapInput[] | Prisma.MapVersionUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutMmapInput | Prisma.MapVersionCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapVersionCreateManyMmapInputEnvelope
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
}

export type MapVersionUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutMmapInput, Prisma.MapVersionUncheckedCreateWithoutMmapInput> | Prisma.MapVersionCreateWithoutMmapInput[] | Prisma.MapVersionUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutMmapInput | Prisma.MapVersionCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapVersionCreateManyMmapInputEnvelope
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
}

export type MapVersionUpdateOneWithoutCurrentVersionNestedInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutCurrentVersionInput, Prisma.MapVersionUncheckedCreateWithoutCurrentVersionInput>
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutCurrentVersionInput
  upsert?: Prisma.MapVersionUpsertWithoutCurrentVersionInput
  disconnect?: Prisma.MapVersionWhereInput | boolean
  delete?: Prisma.MapVersionWhereInput | boolean
  connect?: Prisma.MapVersionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapVersionUpdateToOneWithWhereWithoutCurrentVersionInput, Prisma.MapVersionUpdateWithoutCurrentVersionInput>, Prisma.MapVersionUncheckedUpdateWithoutCurrentVersionInput>
}

export type MapVersionUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutMmapInput, Prisma.MapVersionUncheckedCreateWithoutMmapInput> | Prisma.MapVersionCreateWithoutMmapInput[] | Prisma.MapVersionUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutMmapInput | Prisma.MapVersionCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapVersionUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapVersionUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapVersionCreateManyMmapInputEnvelope
  set?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  disconnect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  delete?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  update?: Prisma.MapVersionUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapVersionUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapVersionUpdateManyWithWhereWithoutMmapInput | Prisma.MapVersionUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapVersionScalarWhereInput | Prisma.MapVersionScalarWhereInput[]
}

export type MapVersionUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapVersionCreateWithoutMmapInput, Prisma.MapVersionUncheckedCreateWithoutMmapInput> | Prisma.MapVersionCreateWithoutMmapInput[] | Prisma.MapVersionUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapVersionCreateOrConnectWithoutMmapInput | Prisma.MapVersionCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapVersionUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapVersionUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapVersionCreateManyMmapInputEnvelope
  set?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  disconnect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  delete?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  connect?: Prisma.MapVersionWhereUniqueInput | Prisma.MapVersionWhereUniqueInput[]
  update?: Prisma.MapVersionUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapVersionUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapVersionUpdateManyWithWhereWithoutMmapInput | Prisma.MapVersionUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapVersionScalarWhereInput | Prisma.MapVersionScalarWhereInput[]
}

export type MapVersionCreateWithoutSubmitterInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  createdAt?: Date | string
  currentVersion?: Prisma.MMapCreateNestedOneWithoutCurrentVersionInput
  mmap: Prisma.MMapCreateNestedOneWithoutVersionsInput
}

export type MapVersionUncheckedCreateWithoutSubmitterInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  mapID: number
  createdAt?: Date | string
  currentVersion?: Prisma.MMapUncheckedCreateNestedOneWithoutCurrentVersionInput
}

export type MapVersionCreateOrConnectWithoutSubmitterInput = {
  where: Prisma.MapVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.MapVersionCreateWithoutSubmitterInput, Prisma.MapVersionUncheckedCreateWithoutSubmitterInput>
}

export type MapVersionCreateManySubmitterInputEnvelope = {
  data: Prisma.MapVersionCreateManySubmitterInput | Prisma.MapVersionCreateManySubmitterInput[]
  skipDuplicates?: boolean
}

export type MapVersionUpsertWithWhereUniqueWithoutSubmitterInput = {
  where: Prisma.MapVersionWhereUniqueInput
  update: Prisma.XOR<Prisma.MapVersionUpdateWithoutSubmitterInput, Prisma.MapVersionUncheckedUpdateWithoutSubmitterInput>
  create: Prisma.XOR<Prisma.MapVersionCreateWithoutSubmitterInput, Prisma.MapVersionUncheckedCreateWithoutSubmitterInput>
}

export type MapVersionUpdateWithWhereUniqueWithoutSubmitterInput = {
  where: Prisma.MapVersionWhereUniqueInput
  data: Prisma.XOR<Prisma.MapVersionUpdateWithoutSubmitterInput, Prisma.MapVersionUncheckedUpdateWithoutSubmitterInput>
}

export type MapVersionUpdateManyWithWhereWithoutSubmitterInput = {
  where: Prisma.MapVersionScalarWhereInput
  data: Prisma.XOR<Prisma.MapVersionUpdateManyMutationInput, Prisma.MapVersionUncheckedUpdateManyWithoutSubmitterInput>
}

export type MapVersionScalarWhereInput = {
  AND?: Prisma.MapVersionScalarWhereInput | Prisma.MapVersionScalarWhereInput[]
  OR?: Prisma.MapVersionScalarWhereInput[]
  NOT?: Prisma.MapVersionScalarWhereInput | Prisma.MapVersionScalarWhereInput[]
  id?: Prisma.UuidFilter<"MapVersion"> | string
  versionNum?: Prisma.IntFilter<"MapVersion"> | number
  changelog?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  bspHash?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  zoneHash?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  bspDownloadId?: Prisma.UuidNullableFilter<"MapVersion"> | string | null
  vmfDownloadId?: Prisma.UuidNullableFilter<"MapVersion"> | string | null
  zones?: Prisma.StringNullableFilter<"MapVersion"> | string | null
  submitterID?: Prisma.IntNullableFilter<"MapVersion"> | number | null
  mapID?: Prisma.IntFilter<"MapVersion"> | number
  createdAt?: Prisma.DateTimeFilter<"MapVersion"> | Date | string
}

export type MapVersionCreateWithoutCurrentVersionInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  createdAt?: Date | string
  submitter?: Prisma.UserCreateNestedOneWithoutSubmittedMapVersionsInput
  mmap: Prisma.MMapCreateNestedOneWithoutVersionsInput
}

export type MapVersionUncheckedCreateWithoutCurrentVersionInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  submitterID?: number | null
  mapID: number
  createdAt?: Date | string
}

export type MapVersionCreateOrConnectWithoutCurrentVersionInput = {
  where: Prisma.MapVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.MapVersionCreateWithoutCurrentVersionInput, Prisma.MapVersionUncheckedCreateWithoutCurrentVersionInput>
}

export type MapVersionCreateWithoutMmapInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  createdAt?: Date | string
  submitter?: Prisma.UserCreateNestedOneWithoutSubmittedMapVersionsInput
  currentVersion?: Prisma.MMapCreateNestedOneWithoutCurrentVersionInput
}

export type MapVersionUncheckedCreateWithoutMmapInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  submitterID?: number | null
  createdAt?: Date | string
  currentVersion?: Prisma.MMapUncheckedCreateNestedOneWithoutCurrentVersionInput
}

export type MapVersionCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.MapVersionCreateWithoutMmapInput, Prisma.MapVersionUncheckedCreateWithoutMmapInput>
}

export type MapVersionCreateManyMmapInputEnvelope = {
  data: Prisma.MapVersionCreateManyMmapInput | Prisma.MapVersionCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type MapVersionUpsertWithoutCurrentVersionInput = {
  update: Prisma.XOR<Prisma.MapVersionUpdateWithoutCurrentVersionInput, Prisma.MapVersionUncheckedUpdateWithoutCurrentVersionInput>
  create: Prisma.XOR<Prisma.MapVersionCreateWithoutCurrentVersionInput, Prisma.MapVersionUncheckedCreateWithoutCurrentVersionInput>
  where?: Prisma.MapVersionWhereInput
}

export type MapVersionUpdateToOneWithWhereWithoutCurrentVersionInput = {
  where?: Prisma.MapVersionWhereInput
  data: Prisma.XOR<Prisma.MapVersionUpdateWithoutCurrentVersionInput, Prisma.MapVersionUncheckedUpdateWithoutCurrentVersionInput>
}

export type MapVersionUpdateWithoutCurrentVersionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submitter?: Prisma.UserUpdateOneWithoutSubmittedMapVersionsNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutVersionsNestedInput
}

export type MapVersionUncheckedUpdateWithoutCurrentVersionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submitterID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapVersionUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapVersionWhereUniqueInput
  update: Prisma.XOR<Prisma.MapVersionUpdateWithoutMmapInput, Prisma.MapVersionUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapVersionCreateWithoutMmapInput, Prisma.MapVersionUncheckedCreateWithoutMmapInput>
}

export type MapVersionUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapVersionWhereUniqueInput
  data: Prisma.XOR<Prisma.MapVersionUpdateWithoutMmapInput, Prisma.MapVersionUncheckedUpdateWithoutMmapInput>
}

export type MapVersionUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.MapVersionScalarWhereInput
  data: Prisma.XOR<Prisma.MapVersionUpdateManyMutationInput, Prisma.MapVersionUncheckedUpdateManyWithoutMmapInput>
}

export type MapVersionCreateManySubmitterInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  mapID: number
  createdAt?: Date | string
}

export type MapVersionUpdateWithoutSubmitterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentVersion?: Prisma.MMapUpdateOneWithoutCurrentVersionNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutVersionsNestedInput
}

export type MapVersionUncheckedUpdateWithoutSubmitterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentVersion?: Prisma.MMapUncheckedUpdateOneWithoutCurrentVersionNestedInput
}

export type MapVersionUncheckedUpdateManyWithoutSubmitterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapVersionCreateManyMmapInput = {
  id?: string
  versionNum: number
  changelog?: string | null
  bspHash?: string | null
  zoneHash?: string | null
  bspDownloadId?: string | null
  vmfDownloadId?: string | null
  zones?: string | null
  submitterID?: number | null
  createdAt?: Date | string
}

export type MapVersionUpdateWithoutMmapInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submitter?: Prisma.UserUpdateOneWithoutSubmittedMapVersionsNestedInput
  currentVersion?: Prisma.MMapUpdateOneWithoutCurrentVersionNestedInput
}

export type MapVersionUncheckedUpdateWithoutMmapInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submitterID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currentVersion?: Prisma.MMapUncheckedUpdateOneWithoutCurrentVersionNestedInput
}

export type MapVersionUncheckedUpdateManyWithoutMmapInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNum?: Prisma.IntFieldUpdateOperationsInput | number
  changelog?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zoneHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bspDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vmfDownloadId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submitterID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MapVersionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  versionNum?: boolean
  changelog?: boolean
  bspHash?: boolean
  zoneHash?: boolean
  bspDownloadId?: boolean
  vmfDownloadId?: boolean
  zones?: boolean
  submitterID?: boolean
  mapID?: boolean
  createdAt?: boolean
  submitter?: boolean | Prisma.MapVersion$submitterArgs<ExtArgs>
  currentVersion?: boolean | Prisma.MapVersion$currentVersionArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapVersion"]>

export type MapVersionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  versionNum?: boolean
  changelog?: boolean
  bspHash?: boolean
  zoneHash?: boolean
  bspDownloadId?: boolean
  vmfDownloadId?: boolean
  zones?: boolean
  submitterID?: boolean
  mapID?: boolean
  createdAt?: boolean
  submitter?: boolean | Prisma.MapVersion$submitterArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapVersion"]>

export type MapVersionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  versionNum?: boolean
  changelog?: boolean
  bspHash?: boolean
  zoneHash?: boolean
  bspDownloadId?: boolean
  vmfDownloadId?: boolean
  zones?: boolean
  submitterID?: boolean
  mapID?: boolean
  createdAt?: boolean
  submitter?: boolean | Prisma.MapVersion$submitterArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapVersion"]>

export type MapVersionSelectScalar = {
  id?: boolean
  versionNum?: boolean
  changelog?: boolean
  bspHash?: boolean
  zoneHash?: boolean
  bspDownloadId?: boolean
  vmfDownloadId?: boolean
  zones?: boolean
  submitterID?: boolean
  mapID?: boolean
  createdAt?: boolean
}

export type MapVersionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "versionNum" | "changelog" | "bspHash" | "zoneHash" | "bspDownloadId" | "vmfDownloadId" | "zones" | "submitterID" | "mapID" | "createdAt", ExtArgs["result"]["mapVersion"]>
export type MapVersionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  submitter?: boolean | Prisma.MapVersion$submitterArgs<ExtArgs>
  currentVersion?: boolean | Prisma.MapVersion$currentVersionArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapVersionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  submitter?: boolean | Prisma.MapVersion$submitterArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapVersionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  submitter?: boolean | Prisma.MapVersion$submitterArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}

export type $MapVersionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapVersion"
  objects: {
    submitter: Prisma.$UserPayload<ExtArgs> | null
    currentVersion: Prisma.$MMapPayload<ExtArgs> | null
    mmap: Prisma.$MMapPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    versionNum: number
    changelog: string | null
    bspHash: string | null
    zoneHash: string | null
    bspDownloadId: string | null
    vmfDownloadId: string | null
    zones: string | null
    submitterID: number | null
    mapID: number
    createdAt: Date
  }, ExtArgs["result"]["mapVersion"]>
  composites: {}
}

export type MapVersionGetPayload<S extends boolean | null | undefined | MapVersionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapVersionPayload, S>

export type MapVersionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapVersionCountAggregateInputType | true
  }

export interface MapVersionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapVersion'], meta: { name: 'MapVersion' } }
  /**
   * Find zero or one MapVersion that matches the filter.
   * @param {MapVersionFindUniqueArgs} args - Arguments to find a MapVersion
   * @example
   * // Get one MapVersion
   * const mapVersion = await prisma.mapVersion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapVersionFindUniqueArgs>(args: Prisma.SelectSubset<T, MapVersionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapVersion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapVersionFindUniqueOrThrowArgs} args - Arguments to find a MapVersion
   * @example
   * // Get one MapVersion
   * const mapVersion = await prisma.mapVersion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapVersionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapVersion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapVersionFindFirstArgs} args - Arguments to find a MapVersion
   * @example
   * // Get one MapVersion
   * const mapVersion = await prisma.mapVersion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapVersionFindFirstArgs>(args?: Prisma.SelectSubset<T, MapVersionFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapVersion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapVersionFindFirstOrThrowArgs} args - Arguments to find a MapVersion
   * @example
   * // Get one MapVersion
   * const mapVersion = await prisma.mapVersion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapVersionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapVersions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapVersionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapVersions
   * const mapVersions = await prisma.mapVersion.findMany()
   * 
   * // Get first 10 MapVersions
   * const mapVersions = await prisma.mapVersion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mapVersionWithIdOnly = await prisma.mapVersion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MapVersionFindManyArgs>(args?: Prisma.SelectSubset<T, MapVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapVersion.
   * @param {MapVersionCreateArgs} args - Arguments to create a MapVersion.
   * @example
   * // Create one MapVersion
   * const MapVersion = await prisma.mapVersion.create({
   *   data: {
   *     // ... data to create a MapVersion
   *   }
   * })
   * 
   */
  create<T extends MapVersionCreateArgs>(args: Prisma.SelectSubset<T, MapVersionCreateArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapVersions.
   * @param {MapVersionCreateManyArgs} args - Arguments to create many MapVersions.
   * @example
   * // Create many MapVersions
   * const mapVersion = await prisma.mapVersion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapVersionCreateManyArgs>(args?: Prisma.SelectSubset<T, MapVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapVersions and returns the data saved in the database.
   * @param {MapVersionCreateManyAndReturnArgs} args - Arguments to create many MapVersions.
   * @example
   * // Create many MapVersions
   * const mapVersion = await prisma.mapVersion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapVersions and only return the `id`
   * const mapVersionWithIdOnly = await prisma.mapVersion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapVersionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapVersion.
   * @param {MapVersionDeleteArgs} args - Arguments to delete one MapVersion.
   * @example
   * // Delete one MapVersion
   * const MapVersion = await prisma.mapVersion.delete({
   *   where: {
   *     // ... filter to delete one MapVersion
   *   }
   * })
   * 
   */
  delete<T extends MapVersionDeleteArgs>(args: Prisma.SelectSubset<T, MapVersionDeleteArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapVersion.
   * @param {MapVersionUpdateArgs} args - Arguments to update one MapVersion.
   * @example
   * // Update one MapVersion
   * const mapVersion = await prisma.mapVersion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapVersionUpdateArgs>(args: Prisma.SelectSubset<T, MapVersionUpdateArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapVersions.
   * @param {MapVersionDeleteManyArgs} args - Arguments to filter MapVersions to delete.
   * @example
   * // Delete a few MapVersions
   * const { count } = await prisma.mapVersion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapVersionDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapVersionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapVersions
   * const mapVersion = await prisma.mapVersion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapVersionUpdateManyArgs>(args: Prisma.SelectSubset<T, MapVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapVersions and returns the data updated in the database.
   * @param {MapVersionUpdateManyAndReturnArgs} args - Arguments to update many MapVersions.
   * @example
   * // Update many MapVersions
   * const mapVersion = await prisma.mapVersion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapVersions and only return the `id`
   * const mapVersionWithIdOnly = await prisma.mapVersion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapVersionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapVersion.
   * @param {MapVersionUpsertArgs} args - Arguments to update or create a MapVersion.
   * @example
   * // Update or create a MapVersion
   * const mapVersion = await prisma.mapVersion.upsert({
   *   create: {
   *     // ... data to create a MapVersion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapVersion we want to update
   *   }
   * })
   */
  upsert<T extends MapVersionUpsertArgs>(args: Prisma.SelectSubset<T, MapVersionUpsertArgs<ExtArgs>>): Prisma.Prisma__MapVersionClient<runtime.Types.Result.GetResult<Prisma.$MapVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapVersionCountArgs} args - Arguments to filter MapVersions to count.
   * @example
   * // Count the number of MapVersions
   * const count = await prisma.mapVersion.count({
   *   where: {
   *     // ... the filter for the MapVersions we want to count
   *   }
   * })
  **/
  count<T extends MapVersionCountArgs>(
    args?: Prisma.Subset<T, MapVersionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapVersionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapVersionAggregateArgs>(args: Prisma.Subset<T, MapVersionAggregateArgs>): Prisma.PrismaPromise<GetMapVersionAggregateType<T>>

  /**
   * Group by MapVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapVersionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapVersionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapVersionGroupByArgs['orderBy'] }
      : { orderBy?: MapVersionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapVersion model
 */
readonly fields: MapVersionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapVersion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapVersionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  submitter<T extends Prisma.MapVersion$submitterArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapVersion$submitterArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  currentVersion<T extends Prisma.MapVersion$currentVersionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapVersion$currentVersionArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapVersion model
 */
export interface MapVersionFieldRefs {
  readonly id: Prisma.FieldRef<"MapVersion", 'String'>
  readonly versionNum: Prisma.FieldRef<"MapVersion", 'Int'>
  readonly changelog: Prisma.FieldRef<"MapVersion", 'String'>
  readonly bspHash: Prisma.FieldRef<"MapVersion", 'String'>
  readonly zoneHash: Prisma.FieldRef<"MapVersion", 'String'>
  readonly bspDownloadId: Prisma.FieldRef<"MapVersion", 'String'>
  readonly vmfDownloadId: Prisma.FieldRef<"MapVersion", 'String'>
  readonly zones: Prisma.FieldRef<"MapVersion", 'String'>
  readonly submitterID: Prisma.FieldRef<"MapVersion", 'Int'>
  readonly mapID: Prisma.FieldRef<"MapVersion", 'Int'>
  readonly createdAt: Prisma.FieldRef<"MapVersion", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MapVersion findUnique
 */
export type MapVersionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * Filter, which MapVersion to fetch.
   */
  where: Prisma.MapVersionWhereUniqueInput
}

/**
 * MapVersion findUniqueOrThrow
 */
export type MapVersionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * Filter, which MapVersion to fetch.
   */
  where: Prisma.MapVersionWhereUniqueInput
}

/**
 * MapVersion findFirst
 */
export type MapVersionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * Filter, which MapVersion to fetch.
   */
  where?: Prisma.MapVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapVersions to fetch.
   */
  orderBy?: Prisma.MapVersionOrderByWithRelationInput | Prisma.MapVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapVersions.
   */
  cursor?: Prisma.MapVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapVersions.
   */
  distinct?: Prisma.MapVersionScalarFieldEnum | Prisma.MapVersionScalarFieldEnum[]
}

/**
 * MapVersion findFirstOrThrow
 */
export type MapVersionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * Filter, which MapVersion to fetch.
   */
  where?: Prisma.MapVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapVersions to fetch.
   */
  orderBy?: Prisma.MapVersionOrderByWithRelationInput | Prisma.MapVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapVersions.
   */
  cursor?: Prisma.MapVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapVersions.
   */
  distinct?: Prisma.MapVersionScalarFieldEnum | Prisma.MapVersionScalarFieldEnum[]
}

/**
 * MapVersion findMany
 */
export type MapVersionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * Filter, which MapVersions to fetch.
   */
  where?: Prisma.MapVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapVersions to fetch.
   */
  orderBy?: Prisma.MapVersionOrderByWithRelationInput | Prisma.MapVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapVersions.
   */
  cursor?: Prisma.MapVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapVersions.
   */
  skip?: number
  distinct?: Prisma.MapVersionScalarFieldEnum | Prisma.MapVersionScalarFieldEnum[]
}

/**
 * MapVersion create
 */
export type MapVersionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * The data needed to create a MapVersion.
   */
  data: Prisma.XOR<Prisma.MapVersionCreateInput, Prisma.MapVersionUncheckedCreateInput>
}

/**
 * MapVersion createMany
 */
export type MapVersionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapVersions.
   */
  data: Prisma.MapVersionCreateManyInput | Prisma.MapVersionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapVersion createManyAndReturn
 */
export type MapVersionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * The data used to create many MapVersions.
   */
  data: Prisma.MapVersionCreateManyInput | Prisma.MapVersionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapVersion update
 */
export type MapVersionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * The data needed to update a MapVersion.
   */
  data: Prisma.XOR<Prisma.MapVersionUpdateInput, Prisma.MapVersionUncheckedUpdateInput>
  /**
   * Choose, which MapVersion to update.
   */
  where: Prisma.MapVersionWhereUniqueInput
}

/**
 * MapVersion updateMany
 */
export type MapVersionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapVersions.
   */
  data: Prisma.XOR<Prisma.MapVersionUpdateManyMutationInput, Prisma.MapVersionUncheckedUpdateManyInput>
  /**
   * Filter which MapVersions to update
   */
  where?: Prisma.MapVersionWhereInput
  /**
   * Limit how many MapVersions to update.
   */
  limit?: number
}

/**
 * MapVersion updateManyAndReturn
 */
export type MapVersionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * The data used to update MapVersions.
   */
  data: Prisma.XOR<Prisma.MapVersionUpdateManyMutationInput, Prisma.MapVersionUncheckedUpdateManyInput>
  /**
   * Filter which MapVersions to update
   */
  where?: Prisma.MapVersionWhereInput
  /**
   * Limit how many MapVersions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapVersion upsert
 */
export type MapVersionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * The filter to search for the MapVersion to update in case it exists.
   */
  where: Prisma.MapVersionWhereUniqueInput
  /**
   * In case the MapVersion found by the `where` argument doesn't exist, create a new MapVersion with this data.
   */
  create: Prisma.XOR<Prisma.MapVersionCreateInput, Prisma.MapVersionUncheckedCreateInput>
  /**
   * In case the MapVersion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapVersionUpdateInput, Prisma.MapVersionUncheckedUpdateInput>
}

/**
 * MapVersion delete
 */
export type MapVersionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
  /**
   * Filter which MapVersion to delete.
   */
  where: Prisma.MapVersionWhereUniqueInput
}

/**
 * MapVersion deleteMany
 */
export type MapVersionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapVersions to delete
   */
  where?: Prisma.MapVersionWhereInput
  /**
   * Limit how many MapVersions to delete.
   */
  limit?: number
}

/**
 * MapVersion.submitter
 */
export type MapVersion$submitterArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * MapVersion.currentVersion
 */
export type MapVersion$currentVersionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MMap
   */
  select?: Prisma.MMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MMap
   */
  omit?: Prisma.MMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MMapInclude<ExtArgs> | null
  where?: Prisma.MMapWhereInput
}

/**
 * MapVersion without action
 */
export type MapVersionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapVersion
   */
  select?: Prisma.MapVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapVersion
   */
  omit?: Prisma.MapVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapVersionInclude<ExtArgs> | null
}
