
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserStats` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserStats
 * 
 */
export type UserStatsModel = runtime.Types.Result.DefaultSelection<Prisma.$UserStatsPayload>

export type AggregateUserStats = {
  _count: UserStatsCountAggregateOutputType | null
  _avg: UserStatsAvgAggregateOutputType | null
  _sum: UserStatsSumAggregateOutputType | null
  _min: UserStatsMinAggregateOutputType | null
  _max: UserStatsMaxAggregateOutputType | null
}

export type UserStatsAvgAggregateOutputType = {
  totalJumps: number | null
  totalStrafes: number | null
  level: number | null
  cosXP: number | null
  mapsCompleted: number | null
  runsSubmitted: number | null
  userID: number | null
}

export type UserStatsSumAggregateOutputType = {
  totalJumps: bigint | null
  totalStrafes: bigint | null
  level: number | null
  cosXP: bigint | null
  mapsCompleted: number | null
  runsSubmitted: number | null
  userID: number | null
}

export type UserStatsMinAggregateOutputType = {
  totalJumps: bigint | null
  totalStrafes: bigint | null
  level: number | null
  cosXP: bigint | null
  mapsCompleted: number | null
  runsSubmitted: number | null
  userID: number | null
}

export type UserStatsMaxAggregateOutputType = {
  totalJumps: bigint | null
  totalStrafes: bigint | null
  level: number | null
  cosXP: bigint | null
  mapsCompleted: number | null
  runsSubmitted: number | null
  userID: number | null
}

export type UserStatsCountAggregateOutputType = {
  totalJumps: number
  totalStrafes: number
  level: number
  cosXP: number
  mapsCompleted: number
  runsSubmitted: number
  userID: number
  _all: number
}


export type UserStatsAvgAggregateInputType = {
  totalJumps?: true
  totalStrafes?: true
  level?: true
  cosXP?: true
  mapsCompleted?: true
  runsSubmitted?: true
  userID?: true
}

export type UserStatsSumAggregateInputType = {
  totalJumps?: true
  totalStrafes?: true
  level?: true
  cosXP?: true
  mapsCompleted?: true
  runsSubmitted?: true
  userID?: true
}

export type UserStatsMinAggregateInputType = {
  totalJumps?: true
  totalStrafes?: true
  level?: true
  cosXP?: true
  mapsCompleted?: true
  runsSubmitted?: true
  userID?: true
}

export type UserStatsMaxAggregateInputType = {
  totalJumps?: true
  totalStrafes?: true
  level?: true
  cosXP?: true
  mapsCompleted?: true
  runsSubmitted?: true
  userID?: true
}

export type UserStatsCountAggregateInputType = {
  totalJumps?: true
  totalStrafes?: true
  level?: true
  cosXP?: true
  mapsCompleted?: true
  runsSubmitted?: true
  userID?: true
  _all?: true
}

export type UserStatsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserStats to aggregate.
   */
  where?: Prisma.UserStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserStats to fetch.
   */
  orderBy?: Prisma.UserStatsOrderByWithRelationInput | Prisma.UserStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserStats
  **/
  _count?: true | UserStatsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserStatsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserStatsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserStatsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserStatsMaxAggregateInputType
}

export type GetUserStatsAggregateType<T extends UserStatsAggregateArgs> = {
      [P in keyof T & keyof AggregateUserStats]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserStats[P]>
    : Prisma.GetScalarType<T[P], AggregateUserStats[P]>
}




export type UserStatsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserStatsWhereInput
  orderBy?: Prisma.UserStatsOrderByWithAggregationInput | Prisma.UserStatsOrderByWithAggregationInput[]
  by: Prisma.UserStatsScalarFieldEnum[] | Prisma.UserStatsScalarFieldEnum
  having?: Prisma.UserStatsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserStatsCountAggregateInputType | true
  _avg?: UserStatsAvgAggregateInputType
  _sum?: UserStatsSumAggregateInputType
  _min?: UserStatsMinAggregateInputType
  _max?: UserStatsMaxAggregateInputType
}

export type UserStatsGroupByOutputType = {
  totalJumps: bigint
  totalStrafes: bigint
  level: number
  cosXP: bigint
  mapsCompleted: number
  runsSubmitted: number
  userID: number
  _count: UserStatsCountAggregateOutputType | null
  _avg: UserStatsAvgAggregateOutputType | null
  _sum: UserStatsSumAggregateOutputType | null
  _min: UserStatsMinAggregateOutputType | null
  _max: UserStatsMaxAggregateOutputType | null
}

type GetUserStatsGroupByPayload<T extends UserStatsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserStatsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserStatsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserStatsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserStatsGroupByOutputType[P]>
      }
    >
  >



export type UserStatsWhereInput = {
  AND?: Prisma.UserStatsWhereInput | Prisma.UserStatsWhereInput[]
  OR?: Prisma.UserStatsWhereInput[]
  NOT?: Prisma.UserStatsWhereInput | Prisma.UserStatsWhereInput[]
  totalJumps?: Prisma.BigIntFilter<"UserStats"> | bigint | number
  totalStrafes?: Prisma.BigIntFilter<"UserStats"> | bigint | number
  level?: Prisma.IntFilter<"UserStats"> | number
  cosXP?: Prisma.BigIntFilter<"UserStats"> | bigint | number
  mapsCompleted?: Prisma.IntFilter<"UserStats"> | number
  runsSubmitted?: Prisma.IntFilter<"UserStats"> | number
  userID?: Prisma.IntFilter<"UserStats"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserStatsOrderByWithRelationInput = {
  totalJumps?: Prisma.SortOrder
  totalStrafes?: Prisma.SortOrder
  level?: Prisma.SortOrder
  cosXP?: Prisma.SortOrder
  mapsCompleted?: Prisma.SortOrder
  runsSubmitted?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserStatsWhereUniqueInput = Prisma.AtLeast<{
  userID?: number
  AND?: Prisma.UserStatsWhereInput | Prisma.UserStatsWhereInput[]
  OR?: Prisma.UserStatsWhereInput[]
  NOT?: Prisma.UserStatsWhereInput | Prisma.UserStatsWhereInput[]
  totalJumps?: Prisma.BigIntFilter<"UserStats"> | bigint | number
  totalStrafes?: Prisma.BigIntFilter<"UserStats"> | bigint | number
  level?: Prisma.IntFilter<"UserStats"> | number
  cosXP?: Prisma.BigIntFilter<"UserStats"> | bigint | number
  mapsCompleted?: Prisma.IntFilter<"UserStats"> | number
  runsSubmitted?: Prisma.IntFilter<"UserStats"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "userID">

export type UserStatsOrderByWithAggregationInput = {
  totalJumps?: Prisma.SortOrder
  totalStrafes?: Prisma.SortOrder
  level?: Prisma.SortOrder
  cosXP?: Prisma.SortOrder
  mapsCompleted?: Prisma.SortOrder
  runsSubmitted?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  _count?: Prisma.UserStatsCountOrderByAggregateInput
  _avg?: Prisma.UserStatsAvgOrderByAggregateInput
  _max?: Prisma.UserStatsMaxOrderByAggregateInput
  _min?: Prisma.UserStatsMinOrderByAggregateInput
  _sum?: Prisma.UserStatsSumOrderByAggregateInput
}

export type UserStatsScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserStatsScalarWhereWithAggregatesInput | Prisma.UserStatsScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserStatsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserStatsScalarWhereWithAggregatesInput | Prisma.UserStatsScalarWhereWithAggregatesInput[]
  totalJumps?: Prisma.BigIntWithAggregatesFilter<"UserStats"> | bigint | number
  totalStrafes?: Prisma.BigIntWithAggregatesFilter<"UserStats"> | bigint | number
  level?: Prisma.IntWithAggregatesFilter<"UserStats"> | number
  cosXP?: Prisma.BigIntWithAggregatesFilter<"UserStats"> | bigint | number
  mapsCompleted?: Prisma.IntWithAggregatesFilter<"UserStats"> | number
  runsSubmitted?: Prisma.IntWithAggregatesFilter<"UserStats"> | number
  userID?: Prisma.IntWithAggregatesFilter<"UserStats"> | number
}

export type UserStatsCreateInput = {
  totalJumps?: bigint | number
  totalStrafes?: bigint | number
  level?: number
  cosXP?: bigint | number
  mapsCompleted?: number
  runsSubmitted?: number
  user: Prisma.UserCreateNestedOneWithoutUserStatsInput
}

export type UserStatsUncheckedCreateInput = {
  totalJumps?: bigint | number
  totalStrafes?: bigint | number
  level?: number
  cosXP?: bigint | number
  mapsCompleted?: number
  runsSubmitted?: number
  userID: number
}

export type UserStatsUpdateInput = {
  totalJumps?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  totalStrafes?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  cosXP?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapsCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  runsSubmitted?: Prisma.IntFieldUpdateOperationsInput | number
  user?: Prisma.UserUpdateOneRequiredWithoutUserStatsNestedInput
}

export type UserStatsUncheckedUpdateInput = {
  totalJumps?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  totalStrafes?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  cosXP?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapsCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  runsSubmitted?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserStatsCreateManyInput = {
  totalJumps?: bigint | number
  totalStrafes?: bigint | number
  level?: number
  cosXP?: bigint | number
  mapsCompleted?: number
  runsSubmitted?: number
  userID: number
}

export type UserStatsUpdateManyMutationInput = {
  totalJumps?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  totalStrafes?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  cosXP?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapsCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  runsSubmitted?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserStatsUncheckedUpdateManyInput = {
  totalJumps?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  totalStrafes?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  cosXP?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapsCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  runsSubmitted?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserStatsNullableScalarRelationFilter = {
  is?: Prisma.UserStatsWhereInput | null
  isNot?: Prisma.UserStatsWhereInput | null
}

export type UserStatsCountOrderByAggregateInput = {
  totalJumps?: Prisma.SortOrder
  totalStrafes?: Prisma.SortOrder
  level?: Prisma.SortOrder
  cosXP?: Prisma.SortOrder
  mapsCompleted?: Prisma.SortOrder
  runsSubmitted?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type UserStatsAvgOrderByAggregateInput = {
  totalJumps?: Prisma.SortOrder
  totalStrafes?: Prisma.SortOrder
  level?: Prisma.SortOrder
  cosXP?: Prisma.SortOrder
  mapsCompleted?: Prisma.SortOrder
  runsSubmitted?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type UserStatsMaxOrderByAggregateInput = {
  totalJumps?: Prisma.SortOrder
  totalStrafes?: Prisma.SortOrder
  level?: Prisma.SortOrder
  cosXP?: Prisma.SortOrder
  mapsCompleted?: Prisma.SortOrder
  runsSubmitted?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type UserStatsMinOrderByAggregateInput = {
  totalJumps?: Prisma.SortOrder
  totalStrafes?: Prisma.SortOrder
  level?: Prisma.SortOrder
  cosXP?: Prisma.SortOrder
  mapsCompleted?: Prisma.SortOrder
  runsSubmitted?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type UserStatsSumOrderByAggregateInput = {
  totalJumps?: Prisma.SortOrder
  totalStrafes?: Prisma.SortOrder
  level?: Prisma.SortOrder
  cosXP?: Prisma.SortOrder
  mapsCompleted?: Prisma.SortOrder
  runsSubmitted?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type UserStatsCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserStatsCreateWithoutUserInput, Prisma.UserStatsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserStatsCreateOrConnectWithoutUserInput
  connect?: Prisma.UserStatsWhereUniqueInput
}

export type UserStatsUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserStatsCreateWithoutUserInput, Prisma.UserStatsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserStatsCreateOrConnectWithoutUserInput
  connect?: Prisma.UserStatsWhereUniqueInput
}

export type UserStatsUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserStatsCreateWithoutUserInput, Prisma.UserStatsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserStatsCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserStatsUpsertWithoutUserInput
  disconnect?: Prisma.UserStatsWhereInput | boolean
  delete?: Prisma.UserStatsWhereInput | boolean
  connect?: Prisma.UserStatsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserStatsUpdateToOneWithWhereWithoutUserInput, Prisma.UserStatsUpdateWithoutUserInput>, Prisma.UserStatsUncheckedUpdateWithoutUserInput>
}

export type UserStatsUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserStatsCreateWithoutUserInput, Prisma.UserStatsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserStatsCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserStatsUpsertWithoutUserInput
  disconnect?: Prisma.UserStatsWhereInput | boolean
  delete?: Prisma.UserStatsWhereInput | boolean
  connect?: Prisma.UserStatsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserStatsUpdateToOneWithWhereWithoutUserInput, Prisma.UserStatsUpdateWithoutUserInput>, Prisma.UserStatsUncheckedUpdateWithoutUserInput>
}

export type BigIntFieldUpdateOperationsInput = {
  set?: bigint | number
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type UserStatsCreateWithoutUserInput = {
  totalJumps?: bigint | number
  totalStrafes?: bigint | number
  level?: number
  cosXP?: bigint | number
  mapsCompleted?: number
  runsSubmitted?: number
}

export type UserStatsUncheckedCreateWithoutUserInput = {
  totalJumps?: bigint | number
  totalStrafes?: bigint | number
  level?: number
  cosXP?: bigint | number
  mapsCompleted?: number
  runsSubmitted?: number
}

export type UserStatsCreateOrConnectWithoutUserInput = {
  where: Prisma.UserStatsWhereUniqueInput
  create: Prisma.XOR<Prisma.UserStatsCreateWithoutUserInput, Prisma.UserStatsUncheckedCreateWithoutUserInput>
}

export type UserStatsUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserStatsUpdateWithoutUserInput, Prisma.UserStatsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserStatsCreateWithoutUserInput, Prisma.UserStatsUncheckedCreateWithoutUserInput>
  where?: Prisma.UserStatsWhereInput
}

export type UserStatsUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserStatsWhereInput
  data: Prisma.XOR<Prisma.UserStatsUpdateWithoutUserInput, Prisma.UserStatsUncheckedUpdateWithoutUserInput>
}

export type UserStatsUpdateWithoutUserInput = {
  totalJumps?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  totalStrafes?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  cosXP?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapsCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  runsSubmitted?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserStatsUncheckedUpdateWithoutUserInput = {
  totalJumps?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  totalStrafes?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  level?: Prisma.IntFieldUpdateOperationsInput | number
  cosXP?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapsCompleted?: Prisma.IntFieldUpdateOperationsInput | number
  runsSubmitted?: Prisma.IntFieldUpdateOperationsInput | number
}



export type UserStatsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  totalJumps?: boolean
  totalStrafes?: boolean
  level?: boolean
  cosXP?: boolean
  mapsCompleted?: boolean
  runsSubmitted?: boolean
  userID?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userStats"]>

export type UserStatsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  totalJumps?: boolean
  totalStrafes?: boolean
  level?: boolean
  cosXP?: boolean
  mapsCompleted?: boolean
  runsSubmitted?: boolean
  userID?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userStats"]>

export type UserStatsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  totalJumps?: boolean
  totalStrafes?: boolean
  level?: boolean
  cosXP?: boolean
  mapsCompleted?: boolean
  runsSubmitted?: boolean
  userID?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userStats"]>

export type UserStatsSelectScalar = {
  totalJumps?: boolean
  totalStrafes?: boolean
  level?: boolean
  cosXP?: boolean
  mapsCompleted?: boolean
  runsSubmitted?: boolean
  userID?: boolean
}

export type UserStatsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"totalJumps" | "totalStrafes" | "level" | "cosXP" | "mapsCompleted" | "runsSubmitted" | "userID", ExtArgs["result"]["userStats"]>
export type UserStatsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserStatsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserStatsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserStatsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserStats"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    totalJumps: bigint
    totalStrafes: bigint
    level: number
    cosXP: bigint
    mapsCompleted: number
    runsSubmitted: number
    userID: number
  }, ExtArgs["result"]["userStats"]>
  composites: {}
}

export type UserStatsGetPayload<S extends boolean | null | undefined | UserStatsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserStatsPayload, S>

export type UserStatsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserStatsCountAggregateInputType | true
  }

export interface UserStatsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStats'], meta: { name: 'UserStats' } }
  /**
   * Find zero or one UserStats that matches the filter.
   * @param {UserStatsFindUniqueArgs} args - Arguments to find a UserStats
   * @example
   * // Get one UserStats
   * const userStats = await prisma.userStats.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserStatsFindUniqueArgs>(args: Prisma.SelectSubset<T, UserStatsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserStats that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserStatsFindUniqueOrThrowArgs} args - Arguments to find a UserStats
   * @example
   * // Get one UserStats
   * const userStats = await prisma.userStats.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserStatsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserStatsFindFirstArgs} args - Arguments to find a UserStats
   * @example
   * // Get one UserStats
   * const userStats = await prisma.userStats.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserStatsFindFirstArgs>(args?: Prisma.SelectSubset<T, UserStatsFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserStats that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserStatsFindFirstOrThrowArgs} args - Arguments to find a UserStats
   * @example
   * // Get one UserStats
   * const userStats = await prisma.userStats.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserStatsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserStatsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserStats
   * const userStats = await prisma.userStats.findMany()
   * 
   * // Get first 10 UserStats
   * const userStats = await prisma.userStats.findMany({ take: 10 })
   * 
   * // Only select the `totalJumps`
   * const userStatsWithTotalJumpsOnly = await prisma.userStats.findMany({ select: { totalJumps: true } })
   * 
   */
  findMany<T extends UserStatsFindManyArgs>(args?: Prisma.SelectSubset<T, UserStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserStats.
   * @param {UserStatsCreateArgs} args - Arguments to create a UserStats.
   * @example
   * // Create one UserStats
   * const UserStats = await prisma.userStats.create({
   *   data: {
   *     // ... data to create a UserStats
   *   }
   * })
   * 
   */
  create<T extends UserStatsCreateArgs>(args: Prisma.SelectSubset<T, UserStatsCreateArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserStats.
   * @param {UserStatsCreateManyArgs} args - Arguments to create many UserStats.
   * @example
   * // Create many UserStats
   * const userStats = await prisma.userStats.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserStatsCreateManyArgs>(args?: Prisma.SelectSubset<T, UserStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserStats and returns the data saved in the database.
   * @param {UserStatsCreateManyAndReturnArgs} args - Arguments to create many UserStats.
   * @example
   * // Create many UserStats
   * const userStats = await prisma.userStats.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserStats and only return the `totalJumps`
   * const userStatsWithTotalJumpsOnly = await prisma.userStats.createManyAndReturn({
   *   select: { totalJumps: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserStatsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserStats.
   * @param {UserStatsDeleteArgs} args - Arguments to delete one UserStats.
   * @example
   * // Delete one UserStats
   * const UserStats = await prisma.userStats.delete({
   *   where: {
   *     // ... filter to delete one UserStats
   *   }
   * })
   * 
   */
  delete<T extends UserStatsDeleteArgs>(args: Prisma.SelectSubset<T, UserStatsDeleteArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserStats.
   * @param {UserStatsUpdateArgs} args - Arguments to update one UserStats.
   * @example
   * // Update one UserStats
   * const userStats = await prisma.userStats.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserStatsUpdateArgs>(args: Prisma.SelectSubset<T, UserStatsUpdateArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserStats.
   * @param {UserStatsDeleteManyArgs} args - Arguments to filter UserStats to delete.
   * @example
   * // Delete a few UserStats
   * const { count } = await prisma.userStats.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserStatsDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserStatsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserStats
   * const userStats = await prisma.userStats.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserStatsUpdateManyArgs>(args: Prisma.SelectSubset<T, UserStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserStats and returns the data updated in the database.
   * @param {UserStatsUpdateManyAndReturnArgs} args - Arguments to update many UserStats.
   * @example
   * // Update many UserStats
   * const userStats = await prisma.userStats.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserStats and only return the `totalJumps`
   * const userStatsWithTotalJumpsOnly = await prisma.userStats.updateManyAndReturn({
   *   select: { totalJumps: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserStatsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserStats.
   * @param {UserStatsUpsertArgs} args - Arguments to update or create a UserStats.
   * @example
   * // Update or create a UserStats
   * const userStats = await prisma.userStats.upsert({
   *   create: {
   *     // ... data to create a UserStats
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserStats we want to update
   *   }
   * })
   */
  upsert<T extends UserStatsUpsertArgs>(args: Prisma.SelectSubset<T, UserStatsUpsertArgs<ExtArgs>>): Prisma.Prisma__UserStatsClient<runtime.Types.Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserStatsCountArgs} args - Arguments to filter UserStats to count.
   * @example
   * // Count the number of UserStats
   * const count = await prisma.userStats.count({
   *   where: {
   *     // ... the filter for the UserStats we want to count
   *   }
   * })
  **/
  count<T extends UserStatsCountArgs>(
    args?: Prisma.Subset<T, UserStatsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserStatsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserStatsAggregateArgs>(args: Prisma.Subset<T, UserStatsAggregateArgs>): Prisma.PrismaPromise<GetUserStatsAggregateType<T>>

  /**
   * Group by UserStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserStatsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserStatsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserStatsGroupByArgs['orderBy'] }
      : { orderBy?: UserStatsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserStats model
 */
readonly fields: UserStatsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserStats.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserStatsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserStats model
 */
export interface UserStatsFieldRefs {
  readonly totalJumps: Prisma.FieldRef<"UserStats", 'BigInt'>
  readonly totalStrafes: Prisma.FieldRef<"UserStats", 'BigInt'>
  readonly level: Prisma.FieldRef<"UserStats", 'Int'>
  readonly cosXP: Prisma.FieldRef<"UserStats", 'BigInt'>
  readonly mapsCompleted: Prisma.FieldRef<"UserStats", 'Int'>
  readonly runsSubmitted: Prisma.FieldRef<"UserStats", 'Int'>
  readonly userID: Prisma.FieldRef<"UserStats", 'Int'>
}
    

// Custom InputTypes
/**
 * UserStats findUnique
 */
export type UserStatsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * Filter, which UserStats to fetch.
   */
  where: Prisma.UserStatsWhereUniqueInput
}

/**
 * UserStats findUniqueOrThrow
 */
export type UserStatsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * Filter, which UserStats to fetch.
   */
  where: Prisma.UserStatsWhereUniqueInput
}

/**
 * UserStats findFirst
 */
export type UserStatsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * Filter, which UserStats to fetch.
   */
  where?: Prisma.UserStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserStats to fetch.
   */
  orderBy?: Prisma.UserStatsOrderByWithRelationInput | Prisma.UserStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserStats.
   */
  cursor?: Prisma.UserStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserStats.
   */
  distinct?: Prisma.UserStatsScalarFieldEnum | Prisma.UserStatsScalarFieldEnum[]
}

/**
 * UserStats findFirstOrThrow
 */
export type UserStatsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * Filter, which UserStats to fetch.
   */
  where?: Prisma.UserStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserStats to fetch.
   */
  orderBy?: Prisma.UserStatsOrderByWithRelationInput | Prisma.UserStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserStats.
   */
  cursor?: Prisma.UserStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserStats.
   */
  distinct?: Prisma.UserStatsScalarFieldEnum | Prisma.UserStatsScalarFieldEnum[]
}

/**
 * UserStats findMany
 */
export type UserStatsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * Filter, which UserStats to fetch.
   */
  where?: Prisma.UserStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserStats to fetch.
   */
  orderBy?: Prisma.UserStatsOrderByWithRelationInput | Prisma.UserStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserStats.
   */
  cursor?: Prisma.UserStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserStats.
   */
  skip?: number
  distinct?: Prisma.UserStatsScalarFieldEnum | Prisma.UserStatsScalarFieldEnum[]
}

/**
 * UserStats create
 */
export type UserStatsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * The data needed to create a UserStats.
   */
  data: Prisma.XOR<Prisma.UserStatsCreateInput, Prisma.UserStatsUncheckedCreateInput>
}

/**
 * UserStats createMany
 */
export type UserStatsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserStats.
   */
  data: Prisma.UserStatsCreateManyInput | Prisma.UserStatsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserStats createManyAndReturn
 */
export type UserStatsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * The data used to create many UserStats.
   */
  data: Prisma.UserStatsCreateManyInput | Prisma.UserStatsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserStats update
 */
export type UserStatsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * The data needed to update a UserStats.
   */
  data: Prisma.XOR<Prisma.UserStatsUpdateInput, Prisma.UserStatsUncheckedUpdateInput>
  /**
   * Choose, which UserStats to update.
   */
  where: Prisma.UserStatsWhereUniqueInput
}

/**
 * UserStats updateMany
 */
export type UserStatsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserStats.
   */
  data: Prisma.XOR<Prisma.UserStatsUpdateManyMutationInput, Prisma.UserStatsUncheckedUpdateManyInput>
  /**
   * Filter which UserStats to update
   */
  where?: Prisma.UserStatsWhereInput
  /**
   * Limit how many UserStats to update.
   */
  limit?: number
}

/**
 * UserStats updateManyAndReturn
 */
export type UserStatsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * The data used to update UserStats.
   */
  data: Prisma.XOR<Prisma.UserStatsUpdateManyMutationInput, Prisma.UserStatsUncheckedUpdateManyInput>
  /**
   * Filter which UserStats to update
   */
  where?: Prisma.UserStatsWhereInput
  /**
   * Limit how many UserStats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserStats upsert
 */
export type UserStatsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * The filter to search for the UserStats to update in case it exists.
   */
  where: Prisma.UserStatsWhereUniqueInput
  /**
   * In case the UserStats found by the `where` argument doesn't exist, create a new UserStats with this data.
   */
  create: Prisma.XOR<Prisma.UserStatsCreateInput, Prisma.UserStatsUncheckedCreateInput>
  /**
   * In case the UserStats was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserStatsUpdateInput, Prisma.UserStatsUncheckedUpdateInput>
}

/**
 * UserStats delete
 */
export type UserStatsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
  /**
   * Filter which UserStats to delete.
   */
  where: Prisma.UserStatsWhereUniqueInput
}

/**
 * UserStats deleteMany
 */
export type UserStatsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserStats to delete
   */
  where?: Prisma.UserStatsWhereInput
  /**
   * Limit how many UserStats to delete.
   */
  limit?: number
}

/**
 * UserStats without action
 */
export type UserStatsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserStats
   */
  select?: Prisma.UserStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserStats
   */
  omit?: Prisma.UserStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserStatsInclude<ExtArgs> | null
}
