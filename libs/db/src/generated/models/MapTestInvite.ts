
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapTestInvite` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapTestInvite
 * 
 */
export type MapTestInviteModel = runtime.Types.Result.DefaultSelection<Prisma.$MapTestInvitePayload>

export type AggregateMapTestInvite = {
  _count: MapTestInviteCountAggregateOutputType | null
  _avg: MapTestInviteAvgAggregateOutputType | null
  _sum: MapTestInviteSumAggregateOutputType | null
  _min: MapTestInviteMinAggregateOutputType | null
  _max: MapTestInviteMaxAggregateOutputType | null
}

export type MapTestInviteAvgAggregateOutputType = {
  mapID: number | null
  userID: number | null
  state: number | null
}

export type MapTestInviteSumAggregateOutputType = {
  mapID: number | null
  userID: number | null
  state: number | null
}

export type MapTestInviteMinAggregateOutputType = {
  mapID: number | null
  userID: number | null
  state: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapTestInviteMaxAggregateOutputType = {
  mapID: number | null
  userID: number | null
  state: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapTestInviteCountAggregateOutputType = {
  mapID: number
  userID: number
  state: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MapTestInviteAvgAggregateInputType = {
  mapID?: true
  userID?: true
  state?: true
}

export type MapTestInviteSumAggregateInputType = {
  mapID?: true
  userID?: true
  state?: true
}

export type MapTestInviteMinAggregateInputType = {
  mapID?: true
  userID?: true
  state?: true
  createdAt?: true
  updatedAt?: true
}

export type MapTestInviteMaxAggregateInputType = {
  mapID?: true
  userID?: true
  state?: true
  createdAt?: true
  updatedAt?: true
}

export type MapTestInviteCountAggregateInputType = {
  mapID?: true
  userID?: true
  state?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MapTestInviteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapTestInvite to aggregate.
   */
  where?: Prisma.MapTestInviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapTestInvites to fetch.
   */
  orderBy?: Prisma.MapTestInviteOrderByWithRelationInput | Prisma.MapTestInviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapTestInviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapTestInvites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapTestInvites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapTestInvites
  **/
  _count?: true | MapTestInviteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapTestInviteAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapTestInviteSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapTestInviteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapTestInviteMaxAggregateInputType
}

export type GetMapTestInviteAggregateType<T extends MapTestInviteAggregateArgs> = {
      [P in keyof T & keyof AggregateMapTestInvite]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapTestInvite[P]>
    : Prisma.GetScalarType<T[P], AggregateMapTestInvite[P]>
}




export type MapTestInviteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapTestInviteWhereInput
  orderBy?: Prisma.MapTestInviteOrderByWithAggregationInput | Prisma.MapTestInviteOrderByWithAggregationInput[]
  by: Prisma.MapTestInviteScalarFieldEnum[] | Prisma.MapTestInviteScalarFieldEnum
  having?: Prisma.MapTestInviteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapTestInviteCountAggregateInputType | true
  _avg?: MapTestInviteAvgAggregateInputType
  _sum?: MapTestInviteSumAggregateInputType
  _min?: MapTestInviteMinAggregateInputType
  _max?: MapTestInviteMaxAggregateInputType
}

export type MapTestInviteGroupByOutputType = {
  mapID: number
  userID: number
  state: number
  createdAt: Date
  updatedAt: Date
  _count: MapTestInviteCountAggregateOutputType | null
  _avg: MapTestInviteAvgAggregateOutputType | null
  _sum: MapTestInviteSumAggregateOutputType | null
  _min: MapTestInviteMinAggregateOutputType | null
  _max: MapTestInviteMaxAggregateOutputType | null
}

type GetMapTestInviteGroupByPayload<T extends MapTestInviteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapTestInviteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapTestInviteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapTestInviteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapTestInviteGroupByOutputType[P]>
      }
    >
  >



export type MapTestInviteWhereInput = {
  AND?: Prisma.MapTestInviteWhereInput | Prisma.MapTestInviteWhereInput[]
  OR?: Prisma.MapTestInviteWhereInput[]
  NOT?: Prisma.MapTestInviteWhereInput | Prisma.MapTestInviteWhereInput[]
  mapID?: Prisma.IntFilter<"MapTestInvite"> | number
  userID?: Prisma.IntFilter<"MapTestInvite"> | number
  state?: Prisma.IntFilter<"MapTestInvite"> | number
  createdAt?: Prisma.DateTimeFilter<"MapTestInvite"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapTestInvite"> | Date | string
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MapTestInviteOrderByWithRelationInput = {
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type MapTestInviteWhereUniqueInput = Prisma.AtLeast<{
  mapID_userID?: Prisma.MapTestInviteMapIDUserIDCompoundUniqueInput
  AND?: Prisma.MapTestInviteWhereInput | Prisma.MapTestInviteWhereInput[]
  OR?: Prisma.MapTestInviteWhereInput[]
  NOT?: Prisma.MapTestInviteWhereInput | Prisma.MapTestInviteWhereInput[]
  mapID?: Prisma.IntFilter<"MapTestInvite"> | number
  userID?: Prisma.IntFilter<"MapTestInvite"> | number
  state?: Prisma.IntFilter<"MapTestInvite"> | number
  createdAt?: Prisma.DateTimeFilter<"MapTestInvite"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapTestInvite"> | Date | string
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "mapID_userID">

export type MapTestInviteOrderByWithAggregationInput = {
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MapTestInviteCountOrderByAggregateInput
  _avg?: Prisma.MapTestInviteAvgOrderByAggregateInput
  _max?: Prisma.MapTestInviteMaxOrderByAggregateInput
  _min?: Prisma.MapTestInviteMinOrderByAggregateInput
  _sum?: Prisma.MapTestInviteSumOrderByAggregateInput
}

export type MapTestInviteScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapTestInviteScalarWhereWithAggregatesInput | Prisma.MapTestInviteScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapTestInviteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapTestInviteScalarWhereWithAggregatesInput | Prisma.MapTestInviteScalarWhereWithAggregatesInput[]
  mapID?: Prisma.IntWithAggregatesFilter<"MapTestInvite"> | number
  userID?: Prisma.IntWithAggregatesFilter<"MapTestInvite"> | number
  state?: Prisma.IntWithAggregatesFilter<"MapTestInvite"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MapTestInvite"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MapTestInvite"> | Date | string
}

export type MapTestInviteCreateInput = {
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutTestInvitesInput
  user: Prisma.UserCreateNestedOneWithoutTestInvitesInput
}

export type MapTestInviteUncheckedCreateInput = {
  mapID: number
  userID: number
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapTestInviteUpdateInput = {
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutTestInvitesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutTestInvitesNestedInput
}

export type MapTestInviteUncheckedUpdateInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapTestInviteCreateManyInput = {
  mapID: number
  userID: number
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapTestInviteUpdateManyMutationInput = {
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapTestInviteUncheckedUpdateManyInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapTestInviteListRelationFilter = {
  every?: Prisma.MapTestInviteWhereInput
  some?: Prisma.MapTestInviteWhereInput
  none?: Prisma.MapTestInviteWhereInput
}

export type MapTestInviteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapTestInviteMapIDUserIDCompoundUniqueInput = {
  mapID: number
  userID: number
}

export type MapTestInviteCountOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapTestInviteAvgOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  state?: Prisma.SortOrder
}

export type MapTestInviteMaxOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapTestInviteMinOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  state?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapTestInviteSumOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  state?: Prisma.SortOrder
}

export type MapTestInviteCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutUserInput, Prisma.MapTestInviteUncheckedCreateWithoutUserInput> | Prisma.MapTestInviteCreateWithoutUserInput[] | Prisma.MapTestInviteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutUserInput | Prisma.MapTestInviteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapTestInviteCreateManyUserInputEnvelope
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
}

export type MapTestInviteUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutUserInput, Prisma.MapTestInviteUncheckedCreateWithoutUserInput> | Prisma.MapTestInviteCreateWithoutUserInput[] | Prisma.MapTestInviteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutUserInput | Prisma.MapTestInviteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapTestInviteCreateManyUserInputEnvelope
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
}

export type MapTestInviteUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutUserInput, Prisma.MapTestInviteUncheckedCreateWithoutUserInput> | Prisma.MapTestInviteCreateWithoutUserInput[] | Prisma.MapTestInviteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutUserInput | Prisma.MapTestInviteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapTestInviteUpsertWithWhereUniqueWithoutUserInput | Prisma.MapTestInviteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapTestInviteCreateManyUserInputEnvelope
  set?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  disconnect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  delete?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  update?: Prisma.MapTestInviteUpdateWithWhereUniqueWithoutUserInput | Prisma.MapTestInviteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapTestInviteUpdateManyWithWhereWithoutUserInput | Prisma.MapTestInviteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapTestInviteScalarWhereInput | Prisma.MapTestInviteScalarWhereInput[]
}

export type MapTestInviteUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutUserInput, Prisma.MapTestInviteUncheckedCreateWithoutUserInput> | Prisma.MapTestInviteCreateWithoutUserInput[] | Prisma.MapTestInviteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutUserInput | Prisma.MapTestInviteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapTestInviteUpsertWithWhereUniqueWithoutUserInput | Prisma.MapTestInviteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapTestInviteCreateManyUserInputEnvelope
  set?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  disconnect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  delete?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  update?: Prisma.MapTestInviteUpdateWithWhereUniqueWithoutUserInput | Prisma.MapTestInviteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapTestInviteUpdateManyWithWhereWithoutUserInput | Prisma.MapTestInviteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapTestInviteScalarWhereInput | Prisma.MapTestInviteScalarWhereInput[]
}

export type MapTestInviteCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutMmapInput, Prisma.MapTestInviteUncheckedCreateWithoutMmapInput> | Prisma.MapTestInviteCreateWithoutMmapInput[] | Prisma.MapTestInviteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutMmapInput | Prisma.MapTestInviteCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapTestInviteCreateManyMmapInputEnvelope
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
}

export type MapTestInviteUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutMmapInput, Prisma.MapTestInviteUncheckedCreateWithoutMmapInput> | Prisma.MapTestInviteCreateWithoutMmapInput[] | Prisma.MapTestInviteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutMmapInput | Prisma.MapTestInviteCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapTestInviteCreateManyMmapInputEnvelope
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
}

export type MapTestInviteUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutMmapInput, Prisma.MapTestInviteUncheckedCreateWithoutMmapInput> | Prisma.MapTestInviteCreateWithoutMmapInput[] | Prisma.MapTestInviteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutMmapInput | Prisma.MapTestInviteCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapTestInviteUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapTestInviteUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapTestInviteCreateManyMmapInputEnvelope
  set?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  disconnect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  delete?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  update?: Prisma.MapTestInviteUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapTestInviteUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapTestInviteUpdateManyWithWhereWithoutMmapInput | Prisma.MapTestInviteUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapTestInviteScalarWhereInput | Prisma.MapTestInviteScalarWhereInput[]
}

export type MapTestInviteUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapTestInviteCreateWithoutMmapInput, Prisma.MapTestInviteUncheckedCreateWithoutMmapInput> | Prisma.MapTestInviteCreateWithoutMmapInput[] | Prisma.MapTestInviteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapTestInviteCreateOrConnectWithoutMmapInput | Prisma.MapTestInviteCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapTestInviteUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapTestInviteUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapTestInviteCreateManyMmapInputEnvelope
  set?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  disconnect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  delete?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  connect?: Prisma.MapTestInviteWhereUniqueInput | Prisma.MapTestInviteWhereUniqueInput[]
  update?: Prisma.MapTestInviteUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapTestInviteUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapTestInviteUpdateManyWithWhereWithoutMmapInput | Prisma.MapTestInviteUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapTestInviteScalarWhereInput | Prisma.MapTestInviteScalarWhereInput[]
}

export type MapTestInviteCreateWithoutUserInput = {
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutTestInvitesInput
}

export type MapTestInviteUncheckedCreateWithoutUserInput = {
  mapID: number
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapTestInviteCreateOrConnectWithoutUserInput = {
  where: Prisma.MapTestInviteWhereUniqueInput
  create: Prisma.XOR<Prisma.MapTestInviteCreateWithoutUserInput, Prisma.MapTestInviteUncheckedCreateWithoutUserInput>
}

export type MapTestInviteCreateManyUserInputEnvelope = {
  data: Prisma.MapTestInviteCreateManyUserInput | Prisma.MapTestInviteCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MapTestInviteUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapTestInviteWhereUniqueInput
  update: Prisma.XOR<Prisma.MapTestInviteUpdateWithoutUserInput, Prisma.MapTestInviteUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MapTestInviteCreateWithoutUserInput, Prisma.MapTestInviteUncheckedCreateWithoutUserInput>
}

export type MapTestInviteUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapTestInviteWhereUniqueInput
  data: Prisma.XOR<Prisma.MapTestInviteUpdateWithoutUserInput, Prisma.MapTestInviteUncheckedUpdateWithoutUserInput>
}

export type MapTestInviteUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MapTestInviteScalarWhereInput
  data: Prisma.XOR<Prisma.MapTestInviteUpdateManyMutationInput, Prisma.MapTestInviteUncheckedUpdateManyWithoutUserInput>
}

export type MapTestInviteScalarWhereInput = {
  AND?: Prisma.MapTestInviteScalarWhereInput | Prisma.MapTestInviteScalarWhereInput[]
  OR?: Prisma.MapTestInviteScalarWhereInput[]
  NOT?: Prisma.MapTestInviteScalarWhereInput | Prisma.MapTestInviteScalarWhereInput[]
  mapID?: Prisma.IntFilter<"MapTestInvite"> | number
  userID?: Prisma.IntFilter<"MapTestInvite"> | number
  state?: Prisma.IntFilter<"MapTestInvite"> | number
  createdAt?: Prisma.DateTimeFilter<"MapTestInvite"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapTestInvite"> | Date | string
}

export type MapTestInviteCreateWithoutMmapInput = {
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutTestInvitesInput
}

export type MapTestInviteUncheckedCreateWithoutMmapInput = {
  userID: number
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapTestInviteCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapTestInviteWhereUniqueInput
  create: Prisma.XOR<Prisma.MapTestInviteCreateWithoutMmapInput, Prisma.MapTestInviteUncheckedCreateWithoutMmapInput>
}

export type MapTestInviteCreateManyMmapInputEnvelope = {
  data: Prisma.MapTestInviteCreateManyMmapInput | Prisma.MapTestInviteCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type MapTestInviteUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapTestInviteWhereUniqueInput
  update: Prisma.XOR<Prisma.MapTestInviteUpdateWithoutMmapInput, Prisma.MapTestInviteUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapTestInviteCreateWithoutMmapInput, Prisma.MapTestInviteUncheckedCreateWithoutMmapInput>
}

export type MapTestInviteUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapTestInviteWhereUniqueInput
  data: Prisma.XOR<Prisma.MapTestInviteUpdateWithoutMmapInput, Prisma.MapTestInviteUncheckedUpdateWithoutMmapInput>
}

export type MapTestInviteUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.MapTestInviteScalarWhereInput
  data: Prisma.XOR<Prisma.MapTestInviteUpdateManyMutationInput, Prisma.MapTestInviteUncheckedUpdateManyWithoutMmapInput>
}

export type MapTestInviteCreateManyUserInput = {
  mapID: number
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapTestInviteUpdateWithoutUserInput = {
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutTestInvitesNestedInput
}

export type MapTestInviteUncheckedUpdateWithoutUserInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapTestInviteUncheckedUpdateManyWithoutUserInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapTestInviteCreateManyMmapInput = {
  userID: number
  state: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapTestInviteUpdateWithoutMmapInput = {
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTestInvitesNestedInput
}

export type MapTestInviteUncheckedUpdateWithoutMmapInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapTestInviteUncheckedUpdateManyWithoutMmapInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  state?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MapTestInviteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  userID?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapTestInvite"]>

export type MapTestInviteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  userID?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapTestInvite"]>

export type MapTestInviteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  userID?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapTestInvite"]>

export type MapTestInviteSelectScalar = {
  mapID?: boolean
  userID?: boolean
  state?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MapTestInviteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"mapID" | "userID" | "state" | "createdAt" | "updatedAt", ExtArgs["result"]["mapTestInvite"]>
export type MapTestInviteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapTestInviteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapTestInviteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MapTestInvitePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapTestInvite"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    mapID: number
    userID: number
    /**
     * map-testing-request-state.enum.ts
     */
    state: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mapTestInvite"]>
  composites: {}
}

export type MapTestInviteGetPayload<S extends boolean | null | undefined | MapTestInviteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload, S>

export type MapTestInviteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapTestInviteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapTestInviteCountAggregateInputType | true
  }

export interface MapTestInviteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapTestInvite'], meta: { name: 'MapTestInvite' } }
  /**
   * Find zero or one MapTestInvite that matches the filter.
   * @param {MapTestInviteFindUniqueArgs} args - Arguments to find a MapTestInvite
   * @example
   * // Get one MapTestInvite
   * const mapTestInvite = await prisma.mapTestInvite.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapTestInviteFindUniqueArgs>(args: Prisma.SelectSubset<T, MapTestInviteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapTestInvite that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapTestInviteFindUniqueOrThrowArgs} args - Arguments to find a MapTestInvite
   * @example
   * // Get one MapTestInvite
   * const mapTestInvite = await prisma.mapTestInvite.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapTestInviteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapTestInviteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapTestInvite that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapTestInviteFindFirstArgs} args - Arguments to find a MapTestInvite
   * @example
   * // Get one MapTestInvite
   * const mapTestInvite = await prisma.mapTestInvite.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapTestInviteFindFirstArgs>(args?: Prisma.SelectSubset<T, MapTestInviteFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapTestInvite that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapTestInviteFindFirstOrThrowArgs} args - Arguments to find a MapTestInvite
   * @example
   * // Get one MapTestInvite
   * const mapTestInvite = await prisma.mapTestInvite.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapTestInviteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapTestInviteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapTestInvites that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapTestInviteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapTestInvites
   * const mapTestInvites = await prisma.mapTestInvite.findMany()
   * 
   * // Get first 10 MapTestInvites
   * const mapTestInvites = await prisma.mapTestInvite.findMany({ take: 10 })
   * 
   * // Only select the `mapID`
   * const mapTestInviteWithMapIDOnly = await prisma.mapTestInvite.findMany({ select: { mapID: true } })
   * 
   */
  findMany<T extends MapTestInviteFindManyArgs>(args?: Prisma.SelectSubset<T, MapTestInviteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapTestInvite.
   * @param {MapTestInviteCreateArgs} args - Arguments to create a MapTestInvite.
   * @example
   * // Create one MapTestInvite
   * const MapTestInvite = await prisma.mapTestInvite.create({
   *   data: {
   *     // ... data to create a MapTestInvite
   *   }
   * })
   * 
   */
  create<T extends MapTestInviteCreateArgs>(args: Prisma.SelectSubset<T, MapTestInviteCreateArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapTestInvites.
   * @param {MapTestInviteCreateManyArgs} args - Arguments to create many MapTestInvites.
   * @example
   * // Create many MapTestInvites
   * const mapTestInvite = await prisma.mapTestInvite.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapTestInviteCreateManyArgs>(args?: Prisma.SelectSubset<T, MapTestInviteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapTestInvites and returns the data saved in the database.
   * @param {MapTestInviteCreateManyAndReturnArgs} args - Arguments to create many MapTestInvites.
   * @example
   * // Create many MapTestInvites
   * const mapTestInvite = await prisma.mapTestInvite.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapTestInvites and only return the `mapID`
   * const mapTestInviteWithMapIDOnly = await prisma.mapTestInvite.createManyAndReturn({
   *   select: { mapID: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapTestInviteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapTestInviteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapTestInvite.
   * @param {MapTestInviteDeleteArgs} args - Arguments to delete one MapTestInvite.
   * @example
   * // Delete one MapTestInvite
   * const MapTestInvite = await prisma.mapTestInvite.delete({
   *   where: {
   *     // ... filter to delete one MapTestInvite
   *   }
   * })
   * 
   */
  delete<T extends MapTestInviteDeleteArgs>(args: Prisma.SelectSubset<T, MapTestInviteDeleteArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapTestInvite.
   * @param {MapTestInviteUpdateArgs} args - Arguments to update one MapTestInvite.
   * @example
   * // Update one MapTestInvite
   * const mapTestInvite = await prisma.mapTestInvite.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapTestInviteUpdateArgs>(args: Prisma.SelectSubset<T, MapTestInviteUpdateArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapTestInvites.
   * @param {MapTestInviteDeleteManyArgs} args - Arguments to filter MapTestInvites to delete.
   * @example
   * // Delete a few MapTestInvites
   * const { count } = await prisma.mapTestInvite.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapTestInviteDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapTestInviteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapTestInvites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapTestInviteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapTestInvites
   * const mapTestInvite = await prisma.mapTestInvite.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapTestInviteUpdateManyArgs>(args: Prisma.SelectSubset<T, MapTestInviteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapTestInvites and returns the data updated in the database.
   * @param {MapTestInviteUpdateManyAndReturnArgs} args - Arguments to update many MapTestInvites.
   * @example
   * // Update many MapTestInvites
   * const mapTestInvite = await prisma.mapTestInvite.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapTestInvites and only return the `mapID`
   * const mapTestInviteWithMapIDOnly = await prisma.mapTestInvite.updateManyAndReturn({
   *   select: { mapID: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapTestInviteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapTestInviteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapTestInvite.
   * @param {MapTestInviteUpsertArgs} args - Arguments to update or create a MapTestInvite.
   * @example
   * // Update or create a MapTestInvite
   * const mapTestInvite = await prisma.mapTestInvite.upsert({
   *   create: {
   *     // ... data to create a MapTestInvite
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapTestInvite we want to update
   *   }
   * })
   */
  upsert<T extends MapTestInviteUpsertArgs>(args: Prisma.SelectSubset<T, MapTestInviteUpsertArgs<ExtArgs>>): Prisma.Prisma__MapTestInviteClient<runtime.Types.Result.GetResult<Prisma.$MapTestInvitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapTestInvites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapTestInviteCountArgs} args - Arguments to filter MapTestInvites to count.
   * @example
   * // Count the number of MapTestInvites
   * const count = await prisma.mapTestInvite.count({
   *   where: {
   *     // ... the filter for the MapTestInvites we want to count
   *   }
   * })
  **/
  count<T extends MapTestInviteCountArgs>(
    args?: Prisma.Subset<T, MapTestInviteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapTestInviteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapTestInvite.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapTestInviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapTestInviteAggregateArgs>(args: Prisma.Subset<T, MapTestInviteAggregateArgs>): Prisma.PrismaPromise<GetMapTestInviteAggregateType<T>>

  /**
   * Group by MapTestInvite.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapTestInviteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapTestInviteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapTestInviteGroupByArgs['orderBy'] }
      : { orderBy?: MapTestInviteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapTestInviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapTestInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapTestInvite model
 */
readonly fields: MapTestInviteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapTestInvite.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapTestInviteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapTestInvite model
 */
export interface MapTestInviteFieldRefs {
  readonly mapID: Prisma.FieldRef<"MapTestInvite", 'Int'>
  readonly userID: Prisma.FieldRef<"MapTestInvite", 'Int'>
  readonly state: Prisma.FieldRef<"MapTestInvite", 'Int'>
  readonly createdAt: Prisma.FieldRef<"MapTestInvite", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MapTestInvite", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MapTestInvite findUnique
 */
export type MapTestInviteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * Filter, which MapTestInvite to fetch.
   */
  where: Prisma.MapTestInviteWhereUniqueInput
}

/**
 * MapTestInvite findUniqueOrThrow
 */
export type MapTestInviteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * Filter, which MapTestInvite to fetch.
   */
  where: Prisma.MapTestInviteWhereUniqueInput
}

/**
 * MapTestInvite findFirst
 */
export type MapTestInviteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * Filter, which MapTestInvite to fetch.
   */
  where?: Prisma.MapTestInviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapTestInvites to fetch.
   */
  orderBy?: Prisma.MapTestInviteOrderByWithRelationInput | Prisma.MapTestInviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapTestInvites.
   */
  cursor?: Prisma.MapTestInviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapTestInvites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapTestInvites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapTestInvites.
   */
  distinct?: Prisma.MapTestInviteScalarFieldEnum | Prisma.MapTestInviteScalarFieldEnum[]
}

/**
 * MapTestInvite findFirstOrThrow
 */
export type MapTestInviteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * Filter, which MapTestInvite to fetch.
   */
  where?: Prisma.MapTestInviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapTestInvites to fetch.
   */
  orderBy?: Prisma.MapTestInviteOrderByWithRelationInput | Prisma.MapTestInviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapTestInvites.
   */
  cursor?: Prisma.MapTestInviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapTestInvites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapTestInvites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapTestInvites.
   */
  distinct?: Prisma.MapTestInviteScalarFieldEnum | Prisma.MapTestInviteScalarFieldEnum[]
}

/**
 * MapTestInvite findMany
 */
export type MapTestInviteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * Filter, which MapTestInvites to fetch.
   */
  where?: Prisma.MapTestInviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapTestInvites to fetch.
   */
  orderBy?: Prisma.MapTestInviteOrderByWithRelationInput | Prisma.MapTestInviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapTestInvites.
   */
  cursor?: Prisma.MapTestInviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapTestInvites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapTestInvites.
   */
  skip?: number
  distinct?: Prisma.MapTestInviteScalarFieldEnum | Prisma.MapTestInviteScalarFieldEnum[]
}

/**
 * MapTestInvite create
 */
export type MapTestInviteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * The data needed to create a MapTestInvite.
   */
  data: Prisma.XOR<Prisma.MapTestInviteCreateInput, Prisma.MapTestInviteUncheckedCreateInput>
}

/**
 * MapTestInvite createMany
 */
export type MapTestInviteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapTestInvites.
   */
  data: Prisma.MapTestInviteCreateManyInput | Prisma.MapTestInviteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapTestInvite createManyAndReturn
 */
export type MapTestInviteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * The data used to create many MapTestInvites.
   */
  data: Prisma.MapTestInviteCreateManyInput | Prisma.MapTestInviteCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapTestInvite update
 */
export type MapTestInviteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * The data needed to update a MapTestInvite.
   */
  data: Prisma.XOR<Prisma.MapTestInviteUpdateInput, Prisma.MapTestInviteUncheckedUpdateInput>
  /**
   * Choose, which MapTestInvite to update.
   */
  where: Prisma.MapTestInviteWhereUniqueInput
}

/**
 * MapTestInvite updateMany
 */
export type MapTestInviteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapTestInvites.
   */
  data: Prisma.XOR<Prisma.MapTestInviteUpdateManyMutationInput, Prisma.MapTestInviteUncheckedUpdateManyInput>
  /**
   * Filter which MapTestInvites to update
   */
  where?: Prisma.MapTestInviteWhereInput
  /**
   * Limit how many MapTestInvites to update.
   */
  limit?: number
}

/**
 * MapTestInvite updateManyAndReturn
 */
export type MapTestInviteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * The data used to update MapTestInvites.
   */
  data: Prisma.XOR<Prisma.MapTestInviteUpdateManyMutationInput, Prisma.MapTestInviteUncheckedUpdateManyInput>
  /**
   * Filter which MapTestInvites to update
   */
  where?: Prisma.MapTestInviteWhereInput
  /**
   * Limit how many MapTestInvites to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapTestInvite upsert
 */
export type MapTestInviteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * The filter to search for the MapTestInvite to update in case it exists.
   */
  where: Prisma.MapTestInviteWhereUniqueInput
  /**
   * In case the MapTestInvite found by the `where` argument doesn't exist, create a new MapTestInvite with this data.
   */
  create: Prisma.XOR<Prisma.MapTestInviteCreateInput, Prisma.MapTestInviteUncheckedCreateInput>
  /**
   * In case the MapTestInvite was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapTestInviteUpdateInput, Prisma.MapTestInviteUncheckedUpdateInput>
}

/**
 * MapTestInvite delete
 */
export type MapTestInviteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
  /**
   * Filter which MapTestInvite to delete.
   */
  where: Prisma.MapTestInviteWhereUniqueInput
}

/**
 * MapTestInvite deleteMany
 */
export type MapTestInviteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapTestInvites to delete
   */
  where?: Prisma.MapTestInviteWhereInput
  /**
   * Limit how many MapTestInvites to delete.
   */
  limit?: number
}

/**
 * MapTestInvite without action
 */
export type MapTestInviteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapTestInvite
   */
  select?: Prisma.MapTestInviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapTestInvite
   */
  omit?: Prisma.MapTestInviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapTestInviteInclude<ExtArgs> | null
}
