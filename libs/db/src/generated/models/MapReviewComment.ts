
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapReviewComment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapReviewComment
 * 
 */
export type MapReviewCommentModel = runtime.Types.Result.DefaultSelection<Prisma.$MapReviewCommentPayload>

export type AggregateMapReviewComment = {
  _count: MapReviewCommentCountAggregateOutputType | null
  _avg: MapReviewCommentAvgAggregateOutputType | null
  _sum: MapReviewCommentSumAggregateOutputType | null
  _min: MapReviewCommentMinAggregateOutputType | null
  _max: MapReviewCommentMaxAggregateOutputType | null
}

export type MapReviewCommentAvgAggregateOutputType = {
  id: number | null
  userID: number | null
  reviewID: number | null
}

export type MapReviewCommentSumAggregateOutputType = {
  id: number | null
  userID: number | null
  reviewID: number | null
}

export type MapReviewCommentMinAggregateOutputType = {
  id: number | null
  text: string | null
  userID: number | null
  reviewID: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapReviewCommentMaxAggregateOutputType = {
  id: number | null
  text: string | null
  userID: number | null
  reviewID: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapReviewCommentCountAggregateOutputType = {
  id: number
  text: number
  userID: number
  reviewID: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MapReviewCommentAvgAggregateInputType = {
  id?: true
  userID?: true
  reviewID?: true
}

export type MapReviewCommentSumAggregateInputType = {
  id?: true
  userID?: true
  reviewID?: true
}

export type MapReviewCommentMinAggregateInputType = {
  id?: true
  text?: true
  userID?: true
  reviewID?: true
  createdAt?: true
  updatedAt?: true
}

export type MapReviewCommentMaxAggregateInputType = {
  id?: true
  text?: true
  userID?: true
  reviewID?: true
  createdAt?: true
  updatedAt?: true
}

export type MapReviewCommentCountAggregateInputType = {
  id?: true
  text?: true
  userID?: true
  reviewID?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MapReviewCommentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapReviewComment to aggregate.
   */
  where?: Prisma.MapReviewCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewComments to fetch.
   */
  orderBy?: Prisma.MapReviewCommentOrderByWithRelationInput | Prisma.MapReviewCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapReviewCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapReviewComments
  **/
  _count?: true | MapReviewCommentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapReviewCommentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapReviewCommentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapReviewCommentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapReviewCommentMaxAggregateInputType
}

export type GetMapReviewCommentAggregateType<T extends MapReviewCommentAggregateArgs> = {
      [P in keyof T & keyof AggregateMapReviewComment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapReviewComment[P]>
    : Prisma.GetScalarType<T[P], AggregateMapReviewComment[P]>
}




export type MapReviewCommentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapReviewCommentWhereInput
  orderBy?: Prisma.MapReviewCommentOrderByWithAggregationInput | Prisma.MapReviewCommentOrderByWithAggregationInput[]
  by: Prisma.MapReviewCommentScalarFieldEnum[] | Prisma.MapReviewCommentScalarFieldEnum
  having?: Prisma.MapReviewCommentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapReviewCommentCountAggregateInputType | true
  _avg?: MapReviewCommentAvgAggregateInputType
  _sum?: MapReviewCommentSumAggregateInputType
  _min?: MapReviewCommentMinAggregateInputType
  _max?: MapReviewCommentMaxAggregateInputType
}

export type MapReviewCommentGroupByOutputType = {
  id: number
  text: string
  userID: number
  reviewID: number
  createdAt: Date
  updatedAt: Date
  _count: MapReviewCommentCountAggregateOutputType | null
  _avg: MapReviewCommentAvgAggregateOutputType | null
  _sum: MapReviewCommentSumAggregateOutputType | null
  _min: MapReviewCommentMinAggregateOutputType | null
  _max: MapReviewCommentMaxAggregateOutputType | null
}

type GetMapReviewCommentGroupByPayload<T extends MapReviewCommentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapReviewCommentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapReviewCommentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapReviewCommentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapReviewCommentGroupByOutputType[P]>
      }
    >
  >



export type MapReviewCommentWhereInput = {
  AND?: Prisma.MapReviewCommentWhereInput | Prisma.MapReviewCommentWhereInput[]
  OR?: Prisma.MapReviewCommentWhereInput[]
  NOT?: Prisma.MapReviewCommentWhereInput | Prisma.MapReviewCommentWhereInput[]
  id?: Prisma.IntFilter<"MapReviewComment"> | number
  text?: Prisma.StringFilter<"MapReviewComment"> | string
  userID?: Prisma.IntFilter<"MapReviewComment"> | number
  reviewID?: Prisma.IntFilter<"MapReviewComment"> | number
  createdAt?: Prisma.DateTimeFilter<"MapReviewComment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapReviewComment"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  review?: Prisma.XOR<Prisma.MapReviewScalarRelationFilter, Prisma.MapReviewWhereInput>
  notifsAbout?: Prisma.NotificationListRelationFilter
}

export type MapReviewCommentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  reviewID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  review?: Prisma.MapReviewOrderByWithRelationInput
  notifsAbout?: Prisma.NotificationOrderByRelationAggregateInput
}

export type MapReviewCommentWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MapReviewCommentWhereInput | Prisma.MapReviewCommentWhereInput[]
  OR?: Prisma.MapReviewCommentWhereInput[]
  NOT?: Prisma.MapReviewCommentWhereInput | Prisma.MapReviewCommentWhereInput[]
  text?: Prisma.StringFilter<"MapReviewComment"> | string
  userID?: Prisma.IntFilter<"MapReviewComment"> | number
  reviewID?: Prisma.IntFilter<"MapReviewComment"> | number
  createdAt?: Prisma.DateTimeFilter<"MapReviewComment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapReviewComment"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  review?: Prisma.XOR<Prisma.MapReviewScalarRelationFilter, Prisma.MapReviewWhereInput>
  notifsAbout?: Prisma.NotificationListRelationFilter
}, "id">

export type MapReviewCommentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  reviewID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MapReviewCommentCountOrderByAggregateInput
  _avg?: Prisma.MapReviewCommentAvgOrderByAggregateInput
  _max?: Prisma.MapReviewCommentMaxOrderByAggregateInput
  _min?: Prisma.MapReviewCommentMinOrderByAggregateInput
  _sum?: Prisma.MapReviewCommentSumOrderByAggregateInput
}

export type MapReviewCommentScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapReviewCommentScalarWhereWithAggregatesInput | Prisma.MapReviewCommentScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapReviewCommentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapReviewCommentScalarWhereWithAggregatesInput | Prisma.MapReviewCommentScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MapReviewComment"> | number
  text?: Prisma.StringWithAggregatesFilter<"MapReviewComment"> | string
  userID?: Prisma.IntWithAggregatesFilter<"MapReviewComment"> | number
  reviewID?: Prisma.IntWithAggregatesFilter<"MapReviewComment"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MapReviewComment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MapReviewComment"> | Date | string
}

export type MapReviewCommentCreateInput = {
  text: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutReviewCommentsInput
  review: Prisma.MapReviewCreateNestedOneWithoutCommentsInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewCommentInput
}

export type MapReviewCommentUncheckedCreateInput = {
  id?: number
  text: string
  userID: number
  reviewID: number
  createdAt?: Date | string
  updatedAt?: Date | string
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewCommentInput
}

export type MapReviewCommentUpdateInput = {
  text?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutReviewCommentsNestedInput
  review?: Prisma.MapReviewUpdateOneRequiredWithoutCommentsNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewCommentNestedInput
}

export type MapReviewCommentUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewCommentNestedInput
}

export type MapReviewCommentCreateManyInput = {
  id?: number
  text: string
  userID: number
  reviewID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewCommentUpdateManyMutationInput = {
  text?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewCommentUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewCommentListRelationFilter = {
  every?: Prisma.MapReviewCommentWhereInput
  some?: Prisma.MapReviewCommentWhereInput
  none?: Prisma.MapReviewCommentWhereInput
}

export type MapReviewCommentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapReviewCommentNullableScalarRelationFilter = {
  is?: Prisma.MapReviewCommentWhereInput | null
  isNot?: Prisma.MapReviewCommentWhereInput | null
}

export type MapReviewCommentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  reviewID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapReviewCommentAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  reviewID?: Prisma.SortOrder
}

export type MapReviewCommentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  reviewID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapReviewCommentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  reviewID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapReviewCommentSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  reviewID?: Prisma.SortOrder
}

export type MapReviewCommentCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutUserInput, Prisma.MapReviewCommentUncheckedCreateWithoutUserInput> | Prisma.MapReviewCommentCreateWithoutUserInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutUserInput | Prisma.MapReviewCommentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapReviewCommentCreateManyUserInputEnvelope
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
}

export type MapReviewCommentUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutUserInput, Prisma.MapReviewCommentUncheckedCreateWithoutUserInput> | Prisma.MapReviewCommentCreateWithoutUserInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutUserInput | Prisma.MapReviewCommentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapReviewCommentCreateManyUserInputEnvelope
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
}

export type MapReviewCommentUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutUserInput, Prisma.MapReviewCommentUncheckedCreateWithoutUserInput> | Prisma.MapReviewCommentCreateWithoutUserInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutUserInput | Prisma.MapReviewCommentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutUserInput | Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapReviewCommentCreateManyUserInputEnvelope
  set?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  disconnect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  delete?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  update?: Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutUserInput | Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapReviewCommentUpdateManyWithWhereWithoutUserInput | Prisma.MapReviewCommentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapReviewCommentScalarWhereInput | Prisma.MapReviewCommentScalarWhereInput[]
}

export type MapReviewCommentUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutUserInput, Prisma.MapReviewCommentUncheckedCreateWithoutUserInput> | Prisma.MapReviewCommentCreateWithoutUserInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutUserInput | Prisma.MapReviewCommentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutUserInput | Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapReviewCommentCreateManyUserInputEnvelope
  set?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  disconnect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  delete?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  update?: Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutUserInput | Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapReviewCommentUpdateManyWithWhereWithoutUserInput | Prisma.MapReviewCommentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapReviewCommentScalarWhereInput | Prisma.MapReviewCommentScalarWhereInput[]
}

export type MapReviewCommentCreateNestedOneWithoutNotifsAboutInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutNotifsAboutInput, Prisma.MapReviewCommentUncheckedCreateWithoutNotifsAboutInput>
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutNotifsAboutInput
  connect?: Prisma.MapReviewCommentWhereUniqueInput
}

export type MapReviewCommentUpdateOneWithoutNotifsAboutNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutNotifsAboutInput, Prisma.MapReviewCommentUncheckedCreateWithoutNotifsAboutInput>
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutNotifsAboutInput
  upsert?: Prisma.MapReviewCommentUpsertWithoutNotifsAboutInput
  disconnect?: Prisma.MapReviewCommentWhereInput | boolean
  delete?: Prisma.MapReviewCommentWhereInput | boolean
  connect?: Prisma.MapReviewCommentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapReviewCommentUpdateToOneWithWhereWithoutNotifsAboutInput, Prisma.MapReviewCommentUpdateWithoutNotifsAboutInput>, Prisma.MapReviewCommentUncheckedUpdateWithoutNotifsAboutInput>
}

export type MapReviewCommentCreateNestedManyWithoutReviewInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutReviewInput, Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput> | Prisma.MapReviewCommentCreateWithoutReviewInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput | Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput[]
  createMany?: Prisma.MapReviewCommentCreateManyReviewInputEnvelope
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
}

export type MapReviewCommentUncheckedCreateNestedManyWithoutReviewInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutReviewInput, Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput> | Prisma.MapReviewCommentCreateWithoutReviewInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput | Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput[]
  createMany?: Prisma.MapReviewCommentCreateManyReviewInputEnvelope
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
}

export type MapReviewCommentUpdateManyWithoutReviewNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutReviewInput, Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput> | Prisma.MapReviewCommentCreateWithoutReviewInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput | Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput[]
  upsert?: Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutReviewInput | Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutReviewInput[]
  createMany?: Prisma.MapReviewCommentCreateManyReviewInputEnvelope
  set?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  disconnect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  delete?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  update?: Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutReviewInput | Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutReviewInput[]
  updateMany?: Prisma.MapReviewCommentUpdateManyWithWhereWithoutReviewInput | Prisma.MapReviewCommentUpdateManyWithWhereWithoutReviewInput[]
  deleteMany?: Prisma.MapReviewCommentScalarWhereInput | Prisma.MapReviewCommentScalarWhereInput[]
}

export type MapReviewCommentUncheckedUpdateManyWithoutReviewNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutReviewInput, Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput> | Prisma.MapReviewCommentCreateWithoutReviewInput[] | Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput[]
  connectOrCreate?: Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput | Prisma.MapReviewCommentCreateOrConnectWithoutReviewInput[]
  upsert?: Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutReviewInput | Prisma.MapReviewCommentUpsertWithWhereUniqueWithoutReviewInput[]
  createMany?: Prisma.MapReviewCommentCreateManyReviewInputEnvelope
  set?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  disconnect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  delete?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  connect?: Prisma.MapReviewCommentWhereUniqueInput | Prisma.MapReviewCommentWhereUniqueInput[]
  update?: Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutReviewInput | Prisma.MapReviewCommentUpdateWithWhereUniqueWithoutReviewInput[]
  updateMany?: Prisma.MapReviewCommentUpdateManyWithWhereWithoutReviewInput | Prisma.MapReviewCommentUpdateManyWithWhereWithoutReviewInput[]
  deleteMany?: Prisma.MapReviewCommentScalarWhereInput | Prisma.MapReviewCommentScalarWhereInput[]
}

export type MapReviewCommentCreateWithoutUserInput = {
  text: string
  createdAt?: Date | string
  updatedAt?: Date | string
  review: Prisma.MapReviewCreateNestedOneWithoutCommentsInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewCommentInput
}

export type MapReviewCommentUncheckedCreateWithoutUserInput = {
  id?: number
  text: string
  reviewID: number
  createdAt?: Date | string
  updatedAt?: Date | string
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewCommentInput
}

export type MapReviewCommentCreateOrConnectWithoutUserInput = {
  where: Prisma.MapReviewCommentWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutUserInput, Prisma.MapReviewCommentUncheckedCreateWithoutUserInput>
}

export type MapReviewCommentCreateManyUserInputEnvelope = {
  data: Prisma.MapReviewCommentCreateManyUserInput | Prisma.MapReviewCommentCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MapReviewCommentUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapReviewCommentWhereUniqueInput
  update: Prisma.XOR<Prisma.MapReviewCommentUpdateWithoutUserInput, Prisma.MapReviewCommentUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutUserInput, Prisma.MapReviewCommentUncheckedCreateWithoutUserInput>
}

export type MapReviewCommentUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapReviewCommentWhereUniqueInput
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateWithoutUserInput, Prisma.MapReviewCommentUncheckedUpdateWithoutUserInput>
}

export type MapReviewCommentUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MapReviewCommentScalarWhereInput
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateManyMutationInput, Prisma.MapReviewCommentUncheckedUpdateManyWithoutUserInput>
}

export type MapReviewCommentScalarWhereInput = {
  AND?: Prisma.MapReviewCommentScalarWhereInput | Prisma.MapReviewCommentScalarWhereInput[]
  OR?: Prisma.MapReviewCommentScalarWhereInput[]
  NOT?: Prisma.MapReviewCommentScalarWhereInput | Prisma.MapReviewCommentScalarWhereInput[]
  id?: Prisma.IntFilter<"MapReviewComment"> | number
  text?: Prisma.StringFilter<"MapReviewComment"> | string
  userID?: Prisma.IntFilter<"MapReviewComment"> | number
  reviewID?: Prisma.IntFilter<"MapReviewComment"> | number
  createdAt?: Prisma.DateTimeFilter<"MapReviewComment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapReviewComment"> | Date | string
}

export type MapReviewCommentCreateWithoutNotifsAboutInput = {
  text: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutReviewCommentsInput
  review: Prisma.MapReviewCreateNestedOneWithoutCommentsInput
}

export type MapReviewCommentUncheckedCreateWithoutNotifsAboutInput = {
  id?: number
  text: string
  userID: number
  reviewID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewCommentCreateOrConnectWithoutNotifsAboutInput = {
  where: Prisma.MapReviewCommentWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutNotifsAboutInput, Prisma.MapReviewCommentUncheckedCreateWithoutNotifsAboutInput>
}

export type MapReviewCommentUpsertWithoutNotifsAboutInput = {
  update: Prisma.XOR<Prisma.MapReviewCommentUpdateWithoutNotifsAboutInput, Prisma.MapReviewCommentUncheckedUpdateWithoutNotifsAboutInput>
  create: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutNotifsAboutInput, Prisma.MapReviewCommentUncheckedCreateWithoutNotifsAboutInput>
  where?: Prisma.MapReviewCommentWhereInput
}

export type MapReviewCommentUpdateToOneWithWhereWithoutNotifsAboutInput = {
  where?: Prisma.MapReviewCommentWhereInput
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateWithoutNotifsAboutInput, Prisma.MapReviewCommentUncheckedUpdateWithoutNotifsAboutInput>
}

export type MapReviewCommentUpdateWithoutNotifsAboutInput = {
  text?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutReviewCommentsNestedInput
  review?: Prisma.MapReviewUpdateOneRequiredWithoutCommentsNestedInput
}

export type MapReviewCommentUncheckedUpdateWithoutNotifsAboutInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  reviewID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewCommentCreateWithoutReviewInput = {
  text: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutReviewCommentsInput
  notifsAbout?: Prisma.NotificationCreateNestedManyWithoutReviewCommentInput
}

export type MapReviewCommentUncheckedCreateWithoutReviewInput = {
  id?: number
  text: string
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
  notifsAbout?: Prisma.NotificationUncheckedCreateNestedManyWithoutReviewCommentInput
}

export type MapReviewCommentCreateOrConnectWithoutReviewInput = {
  where: Prisma.MapReviewCommentWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutReviewInput, Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput>
}

export type MapReviewCommentCreateManyReviewInputEnvelope = {
  data: Prisma.MapReviewCommentCreateManyReviewInput | Prisma.MapReviewCommentCreateManyReviewInput[]
  skipDuplicates?: boolean
}

export type MapReviewCommentUpsertWithWhereUniqueWithoutReviewInput = {
  where: Prisma.MapReviewCommentWhereUniqueInput
  update: Prisma.XOR<Prisma.MapReviewCommentUpdateWithoutReviewInput, Prisma.MapReviewCommentUncheckedUpdateWithoutReviewInput>
  create: Prisma.XOR<Prisma.MapReviewCommentCreateWithoutReviewInput, Prisma.MapReviewCommentUncheckedCreateWithoutReviewInput>
}

export type MapReviewCommentUpdateWithWhereUniqueWithoutReviewInput = {
  where: Prisma.MapReviewCommentWhereUniqueInput
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateWithoutReviewInput, Prisma.MapReviewCommentUncheckedUpdateWithoutReviewInput>
}

export type MapReviewCommentUpdateManyWithWhereWithoutReviewInput = {
  where: Prisma.MapReviewCommentScalarWhereInput
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateManyMutationInput, Prisma.MapReviewCommentUncheckedUpdateManyWithoutReviewInput>
}

export type MapReviewCommentCreateManyUserInput = {
  id?: number
  text: string
  reviewID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewCommentUpdateWithoutUserInput = {
  text?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  review?: Prisma.MapReviewUpdateOneRequiredWithoutCommentsNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewCommentNestedInput
}

export type MapReviewCommentUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  reviewID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewCommentNestedInput
}

export type MapReviewCommentUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  reviewID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapReviewCommentCreateManyReviewInput = {
  id?: number
  text: string
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapReviewCommentUpdateWithoutReviewInput = {
  text?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutReviewCommentsNestedInput
  notifsAbout?: Prisma.NotificationUpdateManyWithoutReviewCommentNestedInput
}

export type MapReviewCommentUncheckedUpdateWithoutReviewInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notifsAbout?: Prisma.NotificationUncheckedUpdateManyWithoutReviewCommentNestedInput
}

export type MapReviewCommentUncheckedUpdateManyWithoutReviewInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MapReviewCommentCountOutputType
 */

export type MapReviewCommentCountOutputType = {
  notifsAbout: number
}

export type MapReviewCommentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notifsAbout?: boolean | MapReviewCommentCountOutputTypeCountNotifsAboutArgs
}

/**
 * MapReviewCommentCountOutputType without action
 */
export type MapReviewCommentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewCommentCountOutputType
   */
  select?: Prisma.MapReviewCommentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MapReviewCommentCountOutputType without action
 */
export type MapReviewCommentCountOutputTypeCountNotifsAboutArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationWhereInput
}


export type MapReviewCommentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  userID?: boolean
  reviewID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  review?: boolean | Prisma.MapReviewDefaultArgs<ExtArgs>
  notifsAbout?: boolean | Prisma.MapReviewComment$notifsAboutArgs<ExtArgs>
  _count?: boolean | Prisma.MapReviewCommentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapReviewComment"]>

export type MapReviewCommentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  userID?: boolean
  reviewID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  review?: boolean | Prisma.MapReviewDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapReviewComment"]>

export type MapReviewCommentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  userID?: boolean
  reviewID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  review?: boolean | Prisma.MapReviewDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapReviewComment"]>

export type MapReviewCommentSelectScalar = {
  id?: boolean
  text?: boolean
  userID?: boolean
  reviewID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MapReviewCommentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "text" | "userID" | "reviewID" | "createdAt" | "updatedAt", ExtArgs["result"]["mapReviewComment"]>
export type MapReviewCommentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  review?: boolean | Prisma.MapReviewDefaultArgs<ExtArgs>
  notifsAbout?: boolean | Prisma.MapReviewComment$notifsAboutArgs<ExtArgs>
  _count?: boolean | Prisma.MapReviewCommentCountOutputTypeDefaultArgs<ExtArgs>
}
export type MapReviewCommentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  review?: boolean | Prisma.MapReviewDefaultArgs<ExtArgs>
}
export type MapReviewCommentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  review?: boolean | Prisma.MapReviewDefaultArgs<ExtArgs>
}

export type $MapReviewCommentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapReviewComment"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    review: Prisma.$MapReviewPayload<ExtArgs>
    notifsAbout: Prisma.$NotificationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    text: string
    userID: number
    reviewID: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mapReviewComment"]>
  composites: {}
}

export type MapReviewCommentGetPayload<S extends boolean | null | undefined | MapReviewCommentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload, S>

export type MapReviewCommentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapReviewCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapReviewCommentCountAggregateInputType | true
  }

export interface MapReviewCommentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapReviewComment'], meta: { name: 'MapReviewComment' } }
  /**
   * Find zero or one MapReviewComment that matches the filter.
   * @param {MapReviewCommentFindUniqueArgs} args - Arguments to find a MapReviewComment
   * @example
   * // Get one MapReviewComment
   * const mapReviewComment = await prisma.mapReviewComment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapReviewCommentFindUniqueArgs>(args: Prisma.SelectSubset<T, MapReviewCommentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapReviewComment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapReviewCommentFindUniqueOrThrowArgs} args - Arguments to find a MapReviewComment
   * @example
   * // Get one MapReviewComment
   * const mapReviewComment = await prisma.mapReviewComment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapReviewCommentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapReviewCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapReviewComment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCommentFindFirstArgs} args - Arguments to find a MapReviewComment
   * @example
   * // Get one MapReviewComment
   * const mapReviewComment = await prisma.mapReviewComment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapReviewCommentFindFirstArgs>(args?: Prisma.SelectSubset<T, MapReviewCommentFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapReviewComment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCommentFindFirstOrThrowArgs} args - Arguments to find a MapReviewComment
   * @example
   * // Get one MapReviewComment
   * const mapReviewComment = await prisma.mapReviewComment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapReviewCommentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapReviewCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapReviewComments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCommentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapReviewComments
   * const mapReviewComments = await prisma.mapReviewComment.findMany()
   * 
   * // Get first 10 MapReviewComments
   * const mapReviewComments = await prisma.mapReviewComment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mapReviewCommentWithIdOnly = await prisma.mapReviewComment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MapReviewCommentFindManyArgs>(args?: Prisma.SelectSubset<T, MapReviewCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapReviewComment.
   * @param {MapReviewCommentCreateArgs} args - Arguments to create a MapReviewComment.
   * @example
   * // Create one MapReviewComment
   * const MapReviewComment = await prisma.mapReviewComment.create({
   *   data: {
   *     // ... data to create a MapReviewComment
   *   }
   * })
   * 
   */
  create<T extends MapReviewCommentCreateArgs>(args: Prisma.SelectSubset<T, MapReviewCommentCreateArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapReviewComments.
   * @param {MapReviewCommentCreateManyArgs} args - Arguments to create many MapReviewComments.
   * @example
   * // Create many MapReviewComments
   * const mapReviewComment = await prisma.mapReviewComment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapReviewCommentCreateManyArgs>(args?: Prisma.SelectSubset<T, MapReviewCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapReviewComments and returns the data saved in the database.
   * @param {MapReviewCommentCreateManyAndReturnArgs} args - Arguments to create many MapReviewComments.
   * @example
   * // Create many MapReviewComments
   * const mapReviewComment = await prisma.mapReviewComment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapReviewComments and only return the `id`
   * const mapReviewCommentWithIdOnly = await prisma.mapReviewComment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapReviewCommentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapReviewCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapReviewComment.
   * @param {MapReviewCommentDeleteArgs} args - Arguments to delete one MapReviewComment.
   * @example
   * // Delete one MapReviewComment
   * const MapReviewComment = await prisma.mapReviewComment.delete({
   *   where: {
   *     // ... filter to delete one MapReviewComment
   *   }
   * })
   * 
   */
  delete<T extends MapReviewCommentDeleteArgs>(args: Prisma.SelectSubset<T, MapReviewCommentDeleteArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapReviewComment.
   * @param {MapReviewCommentUpdateArgs} args - Arguments to update one MapReviewComment.
   * @example
   * // Update one MapReviewComment
   * const mapReviewComment = await prisma.mapReviewComment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapReviewCommentUpdateArgs>(args: Prisma.SelectSubset<T, MapReviewCommentUpdateArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapReviewComments.
   * @param {MapReviewCommentDeleteManyArgs} args - Arguments to filter MapReviewComments to delete.
   * @example
   * // Delete a few MapReviewComments
   * const { count } = await prisma.mapReviewComment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapReviewCommentDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapReviewCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapReviewComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCommentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapReviewComments
   * const mapReviewComment = await prisma.mapReviewComment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapReviewCommentUpdateManyArgs>(args: Prisma.SelectSubset<T, MapReviewCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapReviewComments and returns the data updated in the database.
   * @param {MapReviewCommentUpdateManyAndReturnArgs} args - Arguments to update many MapReviewComments.
   * @example
   * // Update many MapReviewComments
   * const mapReviewComment = await prisma.mapReviewComment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapReviewComments and only return the `id`
   * const mapReviewCommentWithIdOnly = await prisma.mapReviewComment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapReviewCommentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapReviewCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapReviewComment.
   * @param {MapReviewCommentUpsertArgs} args - Arguments to update or create a MapReviewComment.
   * @example
   * // Update or create a MapReviewComment
   * const mapReviewComment = await prisma.mapReviewComment.upsert({
   *   create: {
   *     // ... data to create a MapReviewComment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapReviewComment we want to update
   *   }
   * })
   */
  upsert<T extends MapReviewCommentUpsertArgs>(args: Prisma.SelectSubset<T, MapReviewCommentUpsertArgs<ExtArgs>>): Prisma.Prisma__MapReviewCommentClient<runtime.Types.Result.GetResult<Prisma.$MapReviewCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapReviewComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCommentCountArgs} args - Arguments to filter MapReviewComments to count.
   * @example
   * // Count the number of MapReviewComments
   * const count = await prisma.mapReviewComment.count({
   *   where: {
   *     // ... the filter for the MapReviewComments we want to count
   *   }
   * })
  **/
  count<T extends MapReviewCommentCountArgs>(
    args?: Prisma.Subset<T, MapReviewCommentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapReviewCommentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapReviewComment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapReviewCommentAggregateArgs>(args: Prisma.Subset<T, MapReviewCommentAggregateArgs>): Prisma.PrismaPromise<GetMapReviewCommentAggregateType<T>>

  /**
   * Group by MapReviewComment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewCommentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapReviewCommentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapReviewCommentGroupByArgs['orderBy'] }
      : { orderBy?: MapReviewCommentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapReviewCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapReviewCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapReviewComment model
 */
readonly fields: MapReviewCommentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapReviewComment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapReviewCommentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  review<T extends Prisma.MapReviewDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapReviewDefaultArgs<ExtArgs>>): Prisma.Prisma__MapReviewClient<runtime.Types.Result.GetResult<Prisma.$MapReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  notifsAbout<T extends Prisma.MapReviewComment$notifsAboutArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapReviewComment$notifsAboutArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapReviewComment model
 */
export interface MapReviewCommentFieldRefs {
  readonly id: Prisma.FieldRef<"MapReviewComment", 'Int'>
  readonly text: Prisma.FieldRef<"MapReviewComment", 'String'>
  readonly userID: Prisma.FieldRef<"MapReviewComment", 'Int'>
  readonly reviewID: Prisma.FieldRef<"MapReviewComment", 'Int'>
  readonly createdAt: Prisma.FieldRef<"MapReviewComment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MapReviewComment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MapReviewComment findUnique
 */
export type MapReviewCommentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewComment to fetch.
   */
  where: Prisma.MapReviewCommentWhereUniqueInput
}

/**
 * MapReviewComment findUniqueOrThrow
 */
export type MapReviewCommentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewComment to fetch.
   */
  where: Prisma.MapReviewCommentWhereUniqueInput
}

/**
 * MapReviewComment findFirst
 */
export type MapReviewCommentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewComment to fetch.
   */
  where?: Prisma.MapReviewCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewComments to fetch.
   */
  orderBy?: Prisma.MapReviewCommentOrderByWithRelationInput | Prisma.MapReviewCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapReviewComments.
   */
  cursor?: Prisma.MapReviewCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapReviewComments.
   */
  distinct?: Prisma.MapReviewCommentScalarFieldEnum | Prisma.MapReviewCommentScalarFieldEnum[]
}

/**
 * MapReviewComment findFirstOrThrow
 */
export type MapReviewCommentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewComment to fetch.
   */
  where?: Prisma.MapReviewCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewComments to fetch.
   */
  orderBy?: Prisma.MapReviewCommentOrderByWithRelationInput | Prisma.MapReviewCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapReviewComments.
   */
  cursor?: Prisma.MapReviewCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapReviewComments.
   */
  distinct?: Prisma.MapReviewCommentScalarFieldEnum | Prisma.MapReviewCommentScalarFieldEnum[]
}

/**
 * MapReviewComment findMany
 */
export type MapReviewCommentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewComments to fetch.
   */
  where?: Prisma.MapReviewCommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewComments to fetch.
   */
  orderBy?: Prisma.MapReviewCommentOrderByWithRelationInput | Prisma.MapReviewCommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapReviewComments.
   */
  cursor?: Prisma.MapReviewCommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewComments.
   */
  skip?: number
  distinct?: Prisma.MapReviewCommentScalarFieldEnum | Prisma.MapReviewCommentScalarFieldEnum[]
}

/**
 * MapReviewComment create
 */
export type MapReviewCommentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * The data needed to create a MapReviewComment.
   */
  data: Prisma.XOR<Prisma.MapReviewCommentCreateInput, Prisma.MapReviewCommentUncheckedCreateInput>
}

/**
 * MapReviewComment createMany
 */
export type MapReviewCommentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapReviewComments.
   */
  data: Prisma.MapReviewCommentCreateManyInput | Prisma.MapReviewCommentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapReviewComment createManyAndReturn
 */
export type MapReviewCommentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * The data used to create many MapReviewComments.
   */
  data: Prisma.MapReviewCommentCreateManyInput | Prisma.MapReviewCommentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapReviewComment update
 */
export type MapReviewCommentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * The data needed to update a MapReviewComment.
   */
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateInput, Prisma.MapReviewCommentUncheckedUpdateInput>
  /**
   * Choose, which MapReviewComment to update.
   */
  where: Prisma.MapReviewCommentWhereUniqueInput
}

/**
 * MapReviewComment updateMany
 */
export type MapReviewCommentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapReviewComments.
   */
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateManyMutationInput, Prisma.MapReviewCommentUncheckedUpdateManyInput>
  /**
   * Filter which MapReviewComments to update
   */
  where?: Prisma.MapReviewCommentWhereInput
  /**
   * Limit how many MapReviewComments to update.
   */
  limit?: number
}

/**
 * MapReviewComment updateManyAndReturn
 */
export type MapReviewCommentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * The data used to update MapReviewComments.
   */
  data: Prisma.XOR<Prisma.MapReviewCommentUpdateManyMutationInput, Prisma.MapReviewCommentUncheckedUpdateManyInput>
  /**
   * Filter which MapReviewComments to update
   */
  where?: Prisma.MapReviewCommentWhereInput
  /**
   * Limit how many MapReviewComments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapReviewComment upsert
 */
export type MapReviewCommentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * The filter to search for the MapReviewComment to update in case it exists.
   */
  where: Prisma.MapReviewCommentWhereUniqueInput
  /**
   * In case the MapReviewComment found by the `where` argument doesn't exist, create a new MapReviewComment with this data.
   */
  create: Prisma.XOR<Prisma.MapReviewCommentCreateInput, Prisma.MapReviewCommentUncheckedCreateInput>
  /**
   * In case the MapReviewComment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapReviewCommentUpdateInput, Prisma.MapReviewCommentUncheckedUpdateInput>
}

/**
 * MapReviewComment delete
 */
export type MapReviewCommentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
  /**
   * Filter which MapReviewComment to delete.
   */
  where: Prisma.MapReviewCommentWhereUniqueInput
}

/**
 * MapReviewComment deleteMany
 */
export type MapReviewCommentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapReviewComments to delete
   */
  where?: Prisma.MapReviewCommentWhereInput
  /**
   * Limit how many MapReviewComments to delete.
   */
  limit?: number
}

/**
 * MapReviewComment.notifsAbout
 */
export type MapReviewComment$notifsAboutArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null
  where?: Prisma.NotificationWhereInput
  orderBy?: Prisma.NotificationOrderByWithRelationInput | Prisma.NotificationOrderByWithRelationInput[]
  cursor?: Prisma.NotificationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationScalarFieldEnum | Prisma.NotificationScalarFieldEnum[]
}

/**
 * MapReviewComment without action
 */
export type MapReviewCommentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewComment
   */
  select?: Prisma.MapReviewCommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewComment
   */
  omit?: Prisma.MapReviewCommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewCommentInclude<ExtArgs> | null
}
