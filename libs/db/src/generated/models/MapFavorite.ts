
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapFavorite` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapFavorite
 * 
 */
export type MapFavoriteModel = runtime.Types.Result.DefaultSelection<Prisma.$MapFavoritePayload>

export type AggregateMapFavorite = {
  _count: MapFavoriteCountAggregateOutputType | null
  _avg: MapFavoriteAvgAggregateOutputType | null
  _sum: MapFavoriteSumAggregateOutputType | null
  _min: MapFavoriteMinAggregateOutputType | null
  _max: MapFavoriteMaxAggregateOutputType | null
}

export type MapFavoriteAvgAggregateOutputType = {
  id: number | null
  mapID: number | null
  userID: number | null
}

export type MapFavoriteSumAggregateOutputType = {
  id: number | null
  mapID: number | null
  userID: number | null
}

export type MapFavoriteMinAggregateOutputType = {
  id: number | null
  mapID: number | null
  userID: number | null
  createdAt: Date | null
}

export type MapFavoriteMaxAggregateOutputType = {
  id: number | null
  mapID: number | null
  userID: number | null
  createdAt: Date | null
}

export type MapFavoriteCountAggregateOutputType = {
  id: number
  mapID: number
  userID: number
  createdAt: number
  _all: number
}


export type MapFavoriteAvgAggregateInputType = {
  id?: true
  mapID?: true
  userID?: true
}

export type MapFavoriteSumAggregateInputType = {
  id?: true
  mapID?: true
  userID?: true
}

export type MapFavoriteMinAggregateInputType = {
  id?: true
  mapID?: true
  userID?: true
  createdAt?: true
}

export type MapFavoriteMaxAggregateInputType = {
  id?: true
  mapID?: true
  userID?: true
  createdAt?: true
}

export type MapFavoriteCountAggregateInputType = {
  id?: true
  mapID?: true
  userID?: true
  createdAt?: true
  _all?: true
}

export type MapFavoriteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapFavorite to aggregate.
   */
  where?: Prisma.MapFavoriteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapFavorites to fetch.
   */
  orderBy?: Prisma.MapFavoriteOrderByWithRelationInput | Prisma.MapFavoriteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapFavoriteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapFavorites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapFavorites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapFavorites
  **/
  _count?: true | MapFavoriteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapFavoriteAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapFavoriteSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapFavoriteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapFavoriteMaxAggregateInputType
}

export type GetMapFavoriteAggregateType<T extends MapFavoriteAggregateArgs> = {
      [P in keyof T & keyof AggregateMapFavorite]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapFavorite[P]>
    : Prisma.GetScalarType<T[P], AggregateMapFavorite[P]>
}




export type MapFavoriteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapFavoriteWhereInput
  orderBy?: Prisma.MapFavoriteOrderByWithAggregationInput | Prisma.MapFavoriteOrderByWithAggregationInput[]
  by: Prisma.MapFavoriteScalarFieldEnum[] | Prisma.MapFavoriteScalarFieldEnum
  having?: Prisma.MapFavoriteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapFavoriteCountAggregateInputType | true
  _avg?: MapFavoriteAvgAggregateInputType
  _sum?: MapFavoriteSumAggregateInputType
  _min?: MapFavoriteMinAggregateInputType
  _max?: MapFavoriteMaxAggregateInputType
}

export type MapFavoriteGroupByOutputType = {
  id: number
  mapID: number
  userID: number
  createdAt: Date
  _count: MapFavoriteCountAggregateOutputType | null
  _avg: MapFavoriteAvgAggregateOutputType | null
  _sum: MapFavoriteSumAggregateOutputType | null
  _min: MapFavoriteMinAggregateOutputType | null
  _max: MapFavoriteMaxAggregateOutputType | null
}

type GetMapFavoriteGroupByPayload<T extends MapFavoriteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapFavoriteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapFavoriteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapFavoriteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapFavoriteGroupByOutputType[P]>
      }
    >
  >



export type MapFavoriteWhereInput = {
  AND?: Prisma.MapFavoriteWhereInput | Prisma.MapFavoriteWhereInput[]
  OR?: Prisma.MapFavoriteWhereInput[]
  NOT?: Prisma.MapFavoriteWhereInput | Prisma.MapFavoriteWhereInput[]
  id?: Prisma.IntFilter<"MapFavorite"> | number
  mapID?: Prisma.IntFilter<"MapFavorite"> | number
  userID?: Prisma.IntFilter<"MapFavorite"> | number
  createdAt?: Prisma.DateTimeFilter<"MapFavorite"> | Date | string
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MapFavoriteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type MapFavoriteWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  mapID_userID?: Prisma.MapFavoriteMapIDUserIDCompoundUniqueInput
  AND?: Prisma.MapFavoriteWhereInput | Prisma.MapFavoriteWhereInput[]
  OR?: Prisma.MapFavoriteWhereInput[]
  NOT?: Prisma.MapFavoriteWhereInput | Prisma.MapFavoriteWhereInput[]
  mapID?: Prisma.IntFilter<"MapFavorite"> | number
  userID?: Prisma.IntFilter<"MapFavorite"> | number
  createdAt?: Prisma.DateTimeFilter<"MapFavorite"> | Date | string
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "mapID_userID">

export type MapFavoriteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.MapFavoriteCountOrderByAggregateInput
  _avg?: Prisma.MapFavoriteAvgOrderByAggregateInput
  _max?: Prisma.MapFavoriteMaxOrderByAggregateInput
  _min?: Prisma.MapFavoriteMinOrderByAggregateInput
  _sum?: Prisma.MapFavoriteSumOrderByAggregateInput
}

export type MapFavoriteScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapFavoriteScalarWhereWithAggregatesInput | Prisma.MapFavoriteScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapFavoriteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapFavoriteScalarWhereWithAggregatesInput | Prisma.MapFavoriteScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MapFavorite"> | number
  mapID?: Prisma.IntWithAggregatesFilter<"MapFavorite"> | number
  userID?: Prisma.IntWithAggregatesFilter<"MapFavorite"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MapFavorite"> | Date | string
}

export type MapFavoriteCreateInput = {
  createdAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutFavoritesInput
  user: Prisma.UserCreateNestedOneWithoutMapFavoritesInput
}

export type MapFavoriteUncheckedCreateInput = {
  id?: number
  mapID: number
  userID: number
  createdAt?: Date | string
}

export type MapFavoriteUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutFavoritesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMapFavoritesNestedInput
}

export type MapFavoriteUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapFavoriteCreateManyInput = {
  id?: number
  mapID: number
  userID: number
  createdAt?: Date | string
}

export type MapFavoriteUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapFavoriteUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapFavoriteListRelationFilter = {
  every?: Prisma.MapFavoriteWhereInput
  some?: Prisma.MapFavoriteWhereInput
  none?: Prisma.MapFavoriteWhereInput
}

export type MapFavoriteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapFavoriteMapIDUserIDCompoundUniqueInput = {
  mapID: number
  userID: number
}

export type MapFavoriteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MapFavoriteAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapFavoriteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MapFavoriteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type MapFavoriteSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapFavoriteCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutUserInput, Prisma.MapFavoriteUncheckedCreateWithoutUserInput> | Prisma.MapFavoriteCreateWithoutUserInput[] | Prisma.MapFavoriteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutUserInput | Prisma.MapFavoriteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapFavoriteCreateManyUserInputEnvelope
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
}

export type MapFavoriteUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutUserInput, Prisma.MapFavoriteUncheckedCreateWithoutUserInput> | Prisma.MapFavoriteCreateWithoutUserInput[] | Prisma.MapFavoriteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutUserInput | Prisma.MapFavoriteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapFavoriteCreateManyUserInputEnvelope
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
}

export type MapFavoriteUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutUserInput, Prisma.MapFavoriteUncheckedCreateWithoutUserInput> | Prisma.MapFavoriteCreateWithoutUserInput[] | Prisma.MapFavoriteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutUserInput | Prisma.MapFavoriteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapFavoriteUpsertWithWhereUniqueWithoutUserInput | Prisma.MapFavoriteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapFavoriteCreateManyUserInputEnvelope
  set?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  disconnect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  delete?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  update?: Prisma.MapFavoriteUpdateWithWhereUniqueWithoutUserInput | Prisma.MapFavoriteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapFavoriteUpdateManyWithWhereWithoutUserInput | Prisma.MapFavoriteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapFavoriteScalarWhereInput | Prisma.MapFavoriteScalarWhereInput[]
}

export type MapFavoriteUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutUserInput, Prisma.MapFavoriteUncheckedCreateWithoutUserInput> | Prisma.MapFavoriteCreateWithoutUserInput[] | Prisma.MapFavoriteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutUserInput | Prisma.MapFavoriteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapFavoriteUpsertWithWhereUniqueWithoutUserInput | Prisma.MapFavoriteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapFavoriteCreateManyUserInputEnvelope
  set?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  disconnect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  delete?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  update?: Prisma.MapFavoriteUpdateWithWhereUniqueWithoutUserInput | Prisma.MapFavoriteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapFavoriteUpdateManyWithWhereWithoutUserInput | Prisma.MapFavoriteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapFavoriteScalarWhereInput | Prisma.MapFavoriteScalarWhereInput[]
}

export type MapFavoriteCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutMmapInput, Prisma.MapFavoriteUncheckedCreateWithoutMmapInput> | Prisma.MapFavoriteCreateWithoutMmapInput[] | Prisma.MapFavoriteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutMmapInput | Prisma.MapFavoriteCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapFavoriteCreateManyMmapInputEnvelope
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
}

export type MapFavoriteUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutMmapInput, Prisma.MapFavoriteUncheckedCreateWithoutMmapInput> | Prisma.MapFavoriteCreateWithoutMmapInput[] | Prisma.MapFavoriteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutMmapInput | Prisma.MapFavoriteCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapFavoriteCreateManyMmapInputEnvelope
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
}

export type MapFavoriteUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutMmapInput, Prisma.MapFavoriteUncheckedCreateWithoutMmapInput> | Prisma.MapFavoriteCreateWithoutMmapInput[] | Prisma.MapFavoriteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutMmapInput | Prisma.MapFavoriteCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapFavoriteUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapFavoriteUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapFavoriteCreateManyMmapInputEnvelope
  set?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  disconnect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  delete?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  update?: Prisma.MapFavoriteUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapFavoriteUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapFavoriteUpdateManyWithWhereWithoutMmapInput | Prisma.MapFavoriteUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapFavoriteScalarWhereInput | Prisma.MapFavoriteScalarWhereInput[]
}

export type MapFavoriteUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapFavoriteCreateWithoutMmapInput, Prisma.MapFavoriteUncheckedCreateWithoutMmapInput> | Prisma.MapFavoriteCreateWithoutMmapInput[] | Prisma.MapFavoriteUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapFavoriteCreateOrConnectWithoutMmapInput | Prisma.MapFavoriteCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapFavoriteUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapFavoriteUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapFavoriteCreateManyMmapInputEnvelope
  set?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  disconnect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  delete?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  connect?: Prisma.MapFavoriteWhereUniqueInput | Prisma.MapFavoriteWhereUniqueInput[]
  update?: Prisma.MapFavoriteUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapFavoriteUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapFavoriteUpdateManyWithWhereWithoutMmapInput | Prisma.MapFavoriteUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapFavoriteScalarWhereInput | Prisma.MapFavoriteScalarWhereInput[]
}

export type MapFavoriteCreateWithoutUserInput = {
  createdAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutFavoritesInput
}

export type MapFavoriteUncheckedCreateWithoutUserInput = {
  id?: number
  mapID: number
  createdAt?: Date | string
}

export type MapFavoriteCreateOrConnectWithoutUserInput = {
  where: Prisma.MapFavoriteWhereUniqueInput
  create: Prisma.XOR<Prisma.MapFavoriteCreateWithoutUserInput, Prisma.MapFavoriteUncheckedCreateWithoutUserInput>
}

export type MapFavoriteCreateManyUserInputEnvelope = {
  data: Prisma.MapFavoriteCreateManyUserInput | Prisma.MapFavoriteCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MapFavoriteUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapFavoriteWhereUniqueInput
  update: Prisma.XOR<Prisma.MapFavoriteUpdateWithoutUserInput, Prisma.MapFavoriteUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MapFavoriteCreateWithoutUserInput, Prisma.MapFavoriteUncheckedCreateWithoutUserInput>
}

export type MapFavoriteUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapFavoriteWhereUniqueInput
  data: Prisma.XOR<Prisma.MapFavoriteUpdateWithoutUserInput, Prisma.MapFavoriteUncheckedUpdateWithoutUserInput>
}

export type MapFavoriteUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MapFavoriteScalarWhereInput
  data: Prisma.XOR<Prisma.MapFavoriteUpdateManyMutationInput, Prisma.MapFavoriteUncheckedUpdateManyWithoutUserInput>
}

export type MapFavoriteScalarWhereInput = {
  AND?: Prisma.MapFavoriteScalarWhereInput | Prisma.MapFavoriteScalarWhereInput[]
  OR?: Prisma.MapFavoriteScalarWhereInput[]
  NOT?: Prisma.MapFavoriteScalarWhereInput | Prisma.MapFavoriteScalarWhereInput[]
  id?: Prisma.IntFilter<"MapFavorite"> | number
  mapID?: Prisma.IntFilter<"MapFavorite"> | number
  userID?: Prisma.IntFilter<"MapFavorite"> | number
  createdAt?: Prisma.DateTimeFilter<"MapFavorite"> | Date | string
}

export type MapFavoriteCreateWithoutMmapInput = {
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutMapFavoritesInput
}

export type MapFavoriteUncheckedCreateWithoutMmapInput = {
  id?: number
  userID: number
  createdAt?: Date | string
}

export type MapFavoriteCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapFavoriteWhereUniqueInput
  create: Prisma.XOR<Prisma.MapFavoriteCreateWithoutMmapInput, Prisma.MapFavoriteUncheckedCreateWithoutMmapInput>
}

export type MapFavoriteCreateManyMmapInputEnvelope = {
  data: Prisma.MapFavoriteCreateManyMmapInput | Prisma.MapFavoriteCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type MapFavoriteUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapFavoriteWhereUniqueInput
  update: Prisma.XOR<Prisma.MapFavoriteUpdateWithoutMmapInput, Prisma.MapFavoriteUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapFavoriteCreateWithoutMmapInput, Prisma.MapFavoriteUncheckedCreateWithoutMmapInput>
}

export type MapFavoriteUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapFavoriteWhereUniqueInput
  data: Prisma.XOR<Prisma.MapFavoriteUpdateWithoutMmapInput, Prisma.MapFavoriteUncheckedUpdateWithoutMmapInput>
}

export type MapFavoriteUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.MapFavoriteScalarWhereInput
  data: Prisma.XOR<Prisma.MapFavoriteUpdateManyMutationInput, Prisma.MapFavoriteUncheckedUpdateManyWithoutMmapInput>
}

export type MapFavoriteCreateManyUserInput = {
  id?: number
  mapID: number
  createdAt?: Date | string
}

export type MapFavoriteUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutFavoritesNestedInput
}

export type MapFavoriteUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapFavoriteUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapFavoriteCreateManyMmapInput = {
  id?: number
  userID: number
  createdAt?: Date | string
}

export type MapFavoriteUpdateWithoutMmapInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutMapFavoritesNestedInput
}

export type MapFavoriteUncheckedUpdateWithoutMmapInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapFavoriteUncheckedUpdateManyWithoutMmapInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MapFavoriteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapFavorite"]>

export type MapFavoriteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapFavorite"]>

export type MapFavoriteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapFavorite"]>

export type MapFavoriteSelectScalar = {
  id?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
}

export type MapFavoriteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "mapID" | "userID" | "createdAt", ExtArgs["result"]["mapFavorite"]>
export type MapFavoriteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapFavoriteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapFavoriteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MapFavoritePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapFavorite"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    mapID: number
    userID: number
    createdAt: Date
  }, ExtArgs["result"]["mapFavorite"]>
  composites: {}
}

export type MapFavoriteGetPayload<S extends boolean | null | undefined | MapFavoriteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload, S>

export type MapFavoriteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapFavoriteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapFavoriteCountAggregateInputType | true
  }

export interface MapFavoriteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapFavorite'], meta: { name: 'MapFavorite' } }
  /**
   * Find zero or one MapFavorite that matches the filter.
   * @param {MapFavoriteFindUniqueArgs} args - Arguments to find a MapFavorite
   * @example
   * // Get one MapFavorite
   * const mapFavorite = await prisma.mapFavorite.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapFavoriteFindUniqueArgs>(args: Prisma.SelectSubset<T, MapFavoriteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapFavorite that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapFavoriteFindUniqueOrThrowArgs} args - Arguments to find a MapFavorite
   * @example
   * // Get one MapFavorite
   * const mapFavorite = await prisma.mapFavorite.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapFavoriteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapFavoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapFavorite that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapFavoriteFindFirstArgs} args - Arguments to find a MapFavorite
   * @example
   * // Get one MapFavorite
   * const mapFavorite = await prisma.mapFavorite.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapFavoriteFindFirstArgs>(args?: Prisma.SelectSubset<T, MapFavoriteFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapFavorite that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapFavoriteFindFirstOrThrowArgs} args - Arguments to find a MapFavorite
   * @example
   * // Get one MapFavorite
   * const mapFavorite = await prisma.mapFavorite.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapFavoriteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapFavoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapFavorites that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapFavoriteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapFavorites
   * const mapFavorites = await prisma.mapFavorite.findMany()
   * 
   * // Get first 10 MapFavorites
   * const mapFavorites = await prisma.mapFavorite.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mapFavoriteWithIdOnly = await prisma.mapFavorite.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MapFavoriteFindManyArgs>(args?: Prisma.SelectSubset<T, MapFavoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapFavorite.
   * @param {MapFavoriteCreateArgs} args - Arguments to create a MapFavorite.
   * @example
   * // Create one MapFavorite
   * const MapFavorite = await prisma.mapFavorite.create({
   *   data: {
   *     // ... data to create a MapFavorite
   *   }
   * })
   * 
   */
  create<T extends MapFavoriteCreateArgs>(args: Prisma.SelectSubset<T, MapFavoriteCreateArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapFavorites.
   * @param {MapFavoriteCreateManyArgs} args - Arguments to create many MapFavorites.
   * @example
   * // Create many MapFavorites
   * const mapFavorite = await prisma.mapFavorite.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapFavoriteCreateManyArgs>(args?: Prisma.SelectSubset<T, MapFavoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapFavorites and returns the data saved in the database.
   * @param {MapFavoriteCreateManyAndReturnArgs} args - Arguments to create many MapFavorites.
   * @example
   * // Create many MapFavorites
   * const mapFavorite = await prisma.mapFavorite.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapFavorites and only return the `id`
   * const mapFavoriteWithIdOnly = await prisma.mapFavorite.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapFavoriteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapFavoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapFavorite.
   * @param {MapFavoriteDeleteArgs} args - Arguments to delete one MapFavorite.
   * @example
   * // Delete one MapFavorite
   * const MapFavorite = await prisma.mapFavorite.delete({
   *   where: {
   *     // ... filter to delete one MapFavorite
   *   }
   * })
   * 
   */
  delete<T extends MapFavoriteDeleteArgs>(args: Prisma.SelectSubset<T, MapFavoriteDeleteArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapFavorite.
   * @param {MapFavoriteUpdateArgs} args - Arguments to update one MapFavorite.
   * @example
   * // Update one MapFavorite
   * const mapFavorite = await prisma.mapFavorite.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapFavoriteUpdateArgs>(args: Prisma.SelectSubset<T, MapFavoriteUpdateArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapFavorites.
   * @param {MapFavoriteDeleteManyArgs} args - Arguments to filter MapFavorites to delete.
   * @example
   * // Delete a few MapFavorites
   * const { count } = await prisma.mapFavorite.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapFavoriteDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapFavoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapFavorites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapFavoriteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapFavorites
   * const mapFavorite = await prisma.mapFavorite.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapFavoriteUpdateManyArgs>(args: Prisma.SelectSubset<T, MapFavoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapFavorites and returns the data updated in the database.
   * @param {MapFavoriteUpdateManyAndReturnArgs} args - Arguments to update many MapFavorites.
   * @example
   * // Update many MapFavorites
   * const mapFavorite = await prisma.mapFavorite.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapFavorites and only return the `id`
   * const mapFavoriteWithIdOnly = await prisma.mapFavorite.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapFavoriteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapFavoriteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapFavorite.
   * @param {MapFavoriteUpsertArgs} args - Arguments to update or create a MapFavorite.
   * @example
   * // Update or create a MapFavorite
   * const mapFavorite = await prisma.mapFavorite.upsert({
   *   create: {
   *     // ... data to create a MapFavorite
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapFavorite we want to update
   *   }
   * })
   */
  upsert<T extends MapFavoriteUpsertArgs>(args: Prisma.SelectSubset<T, MapFavoriteUpsertArgs<ExtArgs>>): Prisma.Prisma__MapFavoriteClient<runtime.Types.Result.GetResult<Prisma.$MapFavoritePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapFavorites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapFavoriteCountArgs} args - Arguments to filter MapFavorites to count.
   * @example
   * // Count the number of MapFavorites
   * const count = await prisma.mapFavorite.count({
   *   where: {
   *     // ... the filter for the MapFavorites we want to count
   *   }
   * })
  **/
  count<T extends MapFavoriteCountArgs>(
    args?: Prisma.Subset<T, MapFavoriteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapFavoriteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapFavorite.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapFavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapFavoriteAggregateArgs>(args: Prisma.Subset<T, MapFavoriteAggregateArgs>): Prisma.PrismaPromise<GetMapFavoriteAggregateType<T>>

  /**
   * Group by MapFavorite.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapFavoriteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapFavoriteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapFavoriteGroupByArgs['orderBy'] }
      : { orderBy?: MapFavoriteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapFavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapFavorite model
 */
readonly fields: MapFavoriteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapFavorite.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapFavoriteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapFavorite model
 */
export interface MapFavoriteFieldRefs {
  readonly id: Prisma.FieldRef<"MapFavorite", 'Int'>
  readonly mapID: Prisma.FieldRef<"MapFavorite", 'Int'>
  readonly userID: Prisma.FieldRef<"MapFavorite", 'Int'>
  readonly createdAt: Prisma.FieldRef<"MapFavorite", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MapFavorite findUnique
 */
export type MapFavoriteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * Filter, which MapFavorite to fetch.
   */
  where: Prisma.MapFavoriteWhereUniqueInput
}

/**
 * MapFavorite findUniqueOrThrow
 */
export type MapFavoriteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * Filter, which MapFavorite to fetch.
   */
  where: Prisma.MapFavoriteWhereUniqueInput
}

/**
 * MapFavorite findFirst
 */
export type MapFavoriteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * Filter, which MapFavorite to fetch.
   */
  where?: Prisma.MapFavoriteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapFavorites to fetch.
   */
  orderBy?: Prisma.MapFavoriteOrderByWithRelationInput | Prisma.MapFavoriteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapFavorites.
   */
  cursor?: Prisma.MapFavoriteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapFavorites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapFavorites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapFavorites.
   */
  distinct?: Prisma.MapFavoriteScalarFieldEnum | Prisma.MapFavoriteScalarFieldEnum[]
}

/**
 * MapFavorite findFirstOrThrow
 */
export type MapFavoriteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * Filter, which MapFavorite to fetch.
   */
  where?: Prisma.MapFavoriteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapFavorites to fetch.
   */
  orderBy?: Prisma.MapFavoriteOrderByWithRelationInput | Prisma.MapFavoriteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapFavorites.
   */
  cursor?: Prisma.MapFavoriteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapFavorites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapFavorites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapFavorites.
   */
  distinct?: Prisma.MapFavoriteScalarFieldEnum | Prisma.MapFavoriteScalarFieldEnum[]
}

/**
 * MapFavorite findMany
 */
export type MapFavoriteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * Filter, which MapFavorites to fetch.
   */
  where?: Prisma.MapFavoriteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapFavorites to fetch.
   */
  orderBy?: Prisma.MapFavoriteOrderByWithRelationInput | Prisma.MapFavoriteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapFavorites.
   */
  cursor?: Prisma.MapFavoriteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapFavorites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapFavorites.
   */
  skip?: number
  distinct?: Prisma.MapFavoriteScalarFieldEnum | Prisma.MapFavoriteScalarFieldEnum[]
}

/**
 * MapFavorite create
 */
export type MapFavoriteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * The data needed to create a MapFavorite.
   */
  data: Prisma.XOR<Prisma.MapFavoriteCreateInput, Prisma.MapFavoriteUncheckedCreateInput>
}

/**
 * MapFavorite createMany
 */
export type MapFavoriteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapFavorites.
   */
  data: Prisma.MapFavoriteCreateManyInput | Prisma.MapFavoriteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapFavorite createManyAndReturn
 */
export type MapFavoriteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * The data used to create many MapFavorites.
   */
  data: Prisma.MapFavoriteCreateManyInput | Prisma.MapFavoriteCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapFavorite update
 */
export type MapFavoriteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * The data needed to update a MapFavorite.
   */
  data: Prisma.XOR<Prisma.MapFavoriteUpdateInput, Prisma.MapFavoriteUncheckedUpdateInput>
  /**
   * Choose, which MapFavorite to update.
   */
  where: Prisma.MapFavoriteWhereUniqueInput
}

/**
 * MapFavorite updateMany
 */
export type MapFavoriteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapFavorites.
   */
  data: Prisma.XOR<Prisma.MapFavoriteUpdateManyMutationInput, Prisma.MapFavoriteUncheckedUpdateManyInput>
  /**
   * Filter which MapFavorites to update
   */
  where?: Prisma.MapFavoriteWhereInput
  /**
   * Limit how many MapFavorites to update.
   */
  limit?: number
}

/**
 * MapFavorite updateManyAndReturn
 */
export type MapFavoriteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * The data used to update MapFavorites.
   */
  data: Prisma.XOR<Prisma.MapFavoriteUpdateManyMutationInput, Prisma.MapFavoriteUncheckedUpdateManyInput>
  /**
   * Filter which MapFavorites to update
   */
  where?: Prisma.MapFavoriteWhereInput
  /**
   * Limit how many MapFavorites to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapFavorite upsert
 */
export type MapFavoriteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * The filter to search for the MapFavorite to update in case it exists.
   */
  where: Prisma.MapFavoriteWhereUniqueInput
  /**
   * In case the MapFavorite found by the `where` argument doesn't exist, create a new MapFavorite with this data.
   */
  create: Prisma.XOR<Prisma.MapFavoriteCreateInput, Prisma.MapFavoriteUncheckedCreateInput>
  /**
   * In case the MapFavorite was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapFavoriteUpdateInput, Prisma.MapFavoriteUncheckedUpdateInput>
}

/**
 * MapFavorite delete
 */
export type MapFavoriteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
  /**
   * Filter which MapFavorite to delete.
   */
  where: Prisma.MapFavoriteWhereUniqueInput
}

/**
 * MapFavorite deleteMany
 */
export type MapFavoriteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapFavorites to delete
   */
  where?: Prisma.MapFavoriteWhereInput
  /**
   * Limit how many MapFavorites to delete.
   */
  limit?: number
}

/**
 * MapFavorite without action
 */
export type MapFavoriteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapFavorite
   */
  select?: Prisma.MapFavoriteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapFavorite
   */
  omit?: Prisma.MapFavoriteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapFavoriteInclude<ExtArgs> | null
}
