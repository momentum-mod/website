
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AdminActivity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AdminActivity
 * 
 */
export type AdminActivityModel = runtime.Types.Result.DefaultSelection<Prisma.$AdminActivityPayload>

export type AggregateAdminActivity = {
  _count: AdminActivityCountAggregateOutputType | null
  _avg: AdminActivityAvgAggregateOutputType | null
  _sum: AdminActivitySumAggregateOutputType | null
  _min: AdminActivityMinAggregateOutputType | null
  _max: AdminActivityMaxAggregateOutputType | null
}

export type AdminActivityAvgAggregateOutputType = {
  id: number | null
  type: number | null
  target: number | null
  userID: number | null
}

export type AdminActivitySumAggregateOutputType = {
  id: number | null
  type: number | null
  target: bigint | null
  userID: number | null
}

export type AdminActivityMinAggregateOutputType = {
  id: number | null
  comment: string | null
  type: number | null
  target: bigint | null
  userID: number | null
  createdAt: Date | null
}

export type AdminActivityMaxAggregateOutputType = {
  id: number | null
  comment: string | null
  type: number | null
  target: bigint | null
  userID: number | null
  createdAt: Date | null
}

export type AdminActivityCountAggregateOutputType = {
  id: number
  comment: number
  type: number
  target: number
  oldData: number
  newData: number
  userID: number
  createdAt: number
  _all: number
}


export type AdminActivityAvgAggregateInputType = {
  id?: true
  type?: true
  target?: true
  userID?: true
}

export type AdminActivitySumAggregateInputType = {
  id?: true
  type?: true
  target?: true
  userID?: true
}

export type AdminActivityMinAggregateInputType = {
  id?: true
  comment?: true
  type?: true
  target?: true
  userID?: true
  createdAt?: true
}

export type AdminActivityMaxAggregateInputType = {
  id?: true
  comment?: true
  type?: true
  target?: true
  userID?: true
  createdAt?: true
}

export type AdminActivityCountAggregateInputType = {
  id?: true
  comment?: true
  type?: true
  target?: true
  oldData?: true
  newData?: true
  userID?: true
  createdAt?: true
  _all?: true
}

export type AdminActivityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdminActivity to aggregate.
   */
  where?: Prisma.AdminActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminActivities to fetch.
   */
  orderBy?: Prisma.AdminActivityOrderByWithRelationInput | Prisma.AdminActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdminActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AdminActivities
  **/
  _count?: true | AdminActivityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AdminActivityAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AdminActivitySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdminActivityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdminActivityMaxAggregateInputType
}

export type GetAdminActivityAggregateType<T extends AdminActivityAggregateArgs> = {
      [P in keyof T & keyof AggregateAdminActivity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdminActivity[P]>
    : Prisma.GetScalarType<T[P], AggregateAdminActivity[P]>
}




export type AdminActivityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdminActivityWhereInput
  orderBy?: Prisma.AdminActivityOrderByWithAggregationInput | Prisma.AdminActivityOrderByWithAggregationInput[]
  by: Prisma.AdminActivityScalarFieldEnum[] | Prisma.AdminActivityScalarFieldEnum
  having?: Prisma.AdminActivityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdminActivityCountAggregateInputType | true
  _avg?: AdminActivityAvgAggregateInputType
  _sum?: AdminActivitySumAggregateInputType
  _min?: AdminActivityMinAggregateInputType
  _max?: AdminActivityMaxAggregateInputType
}

export type AdminActivityGroupByOutputType = {
  id: number
  comment: string | null
  type: number
  target: bigint
  oldData: runtime.JsonValue
  newData: runtime.JsonValue
  userID: number
  createdAt: Date
  _count: AdminActivityCountAggregateOutputType | null
  _avg: AdminActivityAvgAggregateOutputType | null
  _sum: AdminActivitySumAggregateOutputType | null
  _min: AdminActivityMinAggregateOutputType | null
  _max: AdminActivityMaxAggregateOutputType | null
}

type GetAdminActivityGroupByPayload<T extends AdminActivityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdminActivityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdminActivityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdminActivityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdminActivityGroupByOutputType[P]>
      }
    >
  >



export type AdminActivityWhereInput = {
  AND?: Prisma.AdminActivityWhereInput | Prisma.AdminActivityWhereInput[]
  OR?: Prisma.AdminActivityWhereInput[]
  NOT?: Prisma.AdminActivityWhereInput | Prisma.AdminActivityWhereInput[]
  id?: Prisma.IntFilter<"AdminActivity"> | number
  comment?: Prisma.StringNullableFilter<"AdminActivity"> | string | null
  type?: Prisma.IntFilter<"AdminActivity"> | number
  target?: Prisma.BigIntFilter<"AdminActivity"> | bigint | number
  oldData?: Prisma.JsonFilter<"AdminActivity">
  newData?: Prisma.JsonFilter<"AdminActivity">
  userID?: Prisma.IntFilter<"AdminActivity"> | number
  createdAt?: Prisma.DateTimeFilter<"AdminActivity"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AdminActivityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  target?: Prisma.SortOrder
  oldData?: Prisma.SortOrder
  newData?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type AdminActivityWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AdminActivityWhereInput | Prisma.AdminActivityWhereInput[]
  OR?: Prisma.AdminActivityWhereInput[]
  NOT?: Prisma.AdminActivityWhereInput | Prisma.AdminActivityWhereInput[]
  comment?: Prisma.StringNullableFilter<"AdminActivity"> | string | null
  type?: Prisma.IntFilter<"AdminActivity"> | number
  target?: Prisma.BigIntFilter<"AdminActivity"> | bigint | number
  oldData?: Prisma.JsonFilter<"AdminActivity">
  newData?: Prisma.JsonFilter<"AdminActivity">
  userID?: Prisma.IntFilter<"AdminActivity"> | number
  createdAt?: Prisma.DateTimeFilter<"AdminActivity"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type AdminActivityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  target?: Prisma.SortOrder
  oldData?: Prisma.SortOrder
  newData?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AdminActivityCountOrderByAggregateInput
  _avg?: Prisma.AdminActivityAvgOrderByAggregateInput
  _max?: Prisma.AdminActivityMaxOrderByAggregateInput
  _min?: Prisma.AdminActivityMinOrderByAggregateInput
  _sum?: Prisma.AdminActivitySumOrderByAggregateInput
}

export type AdminActivityScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdminActivityScalarWhereWithAggregatesInput | Prisma.AdminActivityScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdminActivityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdminActivityScalarWhereWithAggregatesInput | Prisma.AdminActivityScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"AdminActivity"> | number
  comment?: Prisma.StringNullableWithAggregatesFilter<"AdminActivity"> | string | null
  type?: Prisma.IntWithAggregatesFilter<"AdminActivity"> | number
  target?: Prisma.BigIntWithAggregatesFilter<"AdminActivity"> | bigint | number
  oldData?: Prisma.JsonWithAggregatesFilter<"AdminActivity">
  newData?: Prisma.JsonWithAggregatesFilter<"AdminActivity">
  userID?: Prisma.IntWithAggregatesFilter<"AdminActivity"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AdminActivity"> | Date | string
}

export type AdminActivityCreateInput = {
  comment?: string | null
  type: number
  target: bigint | number
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAdminActivitiesInput
}

export type AdminActivityUncheckedCreateInput = {
  id?: number
  comment?: string | null
  type: number
  target: bigint | number
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userID: number
  createdAt?: Date | string
}

export type AdminActivityUpdateInput = {
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  target?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAdminActivitiesNestedInput
}

export type AdminActivityUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  target?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminActivityCreateManyInput = {
  id?: number
  comment?: string | null
  type: number
  target: bigint | number
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userID: number
  createdAt?: Date | string
}

export type AdminActivityUpdateManyMutationInput = {
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  target?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminActivityUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  target?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminActivityListRelationFilter = {
  every?: Prisma.AdminActivityWhereInput
  some?: Prisma.AdminActivityWhereInput
  none?: Prisma.AdminActivityWhereInput
}

export type AdminActivityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AdminActivityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  type?: Prisma.SortOrder
  target?: Prisma.SortOrder
  oldData?: Prisma.SortOrder
  newData?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AdminActivityAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  target?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type AdminActivityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  type?: Prisma.SortOrder
  target?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AdminActivityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  type?: Prisma.SortOrder
  target?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AdminActivitySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  target?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type AdminActivityCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AdminActivityCreateWithoutUserInput, Prisma.AdminActivityUncheckedCreateWithoutUserInput> | Prisma.AdminActivityCreateWithoutUserInput[] | Prisma.AdminActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminActivityCreateOrConnectWithoutUserInput | Prisma.AdminActivityCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AdminActivityCreateManyUserInputEnvelope
  connect?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
}

export type AdminActivityUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AdminActivityCreateWithoutUserInput, Prisma.AdminActivityUncheckedCreateWithoutUserInput> | Prisma.AdminActivityCreateWithoutUserInput[] | Prisma.AdminActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminActivityCreateOrConnectWithoutUserInput | Prisma.AdminActivityCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AdminActivityCreateManyUserInputEnvelope
  connect?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
}

export type AdminActivityUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AdminActivityCreateWithoutUserInput, Prisma.AdminActivityUncheckedCreateWithoutUserInput> | Prisma.AdminActivityCreateWithoutUserInput[] | Prisma.AdminActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminActivityCreateOrConnectWithoutUserInput | Prisma.AdminActivityCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AdminActivityUpsertWithWhereUniqueWithoutUserInput | Prisma.AdminActivityUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AdminActivityCreateManyUserInputEnvelope
  set?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  disconnect?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  delete?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  connect?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  update?: Prisma.AdminActivityUpdateWithWhereUniqueWithoutUserInput | Prisma.AdminActivityUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AdminActivityUpdateManyWithWhereWithoutUserInput | Prisma.AdminActivityUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AdminActivityScalarWhereInput | Prisma.AdminActivityScalarWhereInput[]
}

export type AdminActivityUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AdminActivityCreateWithoutUserInput, Prisma.AdminActivityUncheckedCreateWithoutUserInput> | Prisma.AdminActivityCreateWithoutUserInput[] | Prisma.AdminActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AdminActivityCreateOrConnectWithoutUserInput | Prisma.AdminActivityCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AdminActivityUpsertWithWhereUniqueWithoutUserInput | Prisma.AdminActivityUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AdminActivityCreateManyUserInputEnvelope
  set?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  disconnect?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  delete?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  connect?: Prisma.AdminActivityWhereUniqueInput | Prisma.AdminActivityWhereUniqueInput[]
  update?: Prisma.AdminActivityUpdateWithWhereUniqueWithoutUserInput | Prisma.AdminActivityUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AdminActivityUpdateManyWithWhereWithoutUserInput | Prisma.AdminActivityUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AdminActivityScalarWhereInput | Prisma.AdminActivityScalarWhereInput[]
}

export type AdminActivityCreateWithoutUserInput = {
  comment?: string | null
  type: number
  target: bigint | number
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type AdminActivityUncheckedCreateWithoutUserInput = {
  id?: number
  comment?: string | null
  type: number
  target: bigint | number
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type AdminActivityCreateOrConnectWithoutUserInput = {
  where: Prisma.AdminActivityWhereUniqueInput
  create: Prisma.XOR<Prisma.AdminActivityCreateWithoutUserInput, Prisma.AdminActivityUncheckedCreateWithoutUserInput>
}

export type AdminActivityCreateManyUserInputEnvelope = {
  data: Prisma.AdminActivityCreateManyUserInput | Prisma.AdminActivityCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AdminActivityUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AdminActivityWhereUniqueInput
  update: Prisma.XOR<Prisma.AdminActivityUpdateWithoutUserInput, Prisma.AdminActivityUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AdminActivityCreateWithoutUserInput, Prisma.AdminActivityUncheckedCreateWithoutUserInput>
}

export type AdminActivityUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AdminActivityWhereUniqueInput
  data: Prisma.XOR<Prisma.AdminActivityUpdateWithoutUserInput, Prisma.AdminActivityUncheckedUpdateWithoutUserInput>
}

export type AdminActivityUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AdminActivityScalarWhereInput
  data: Prisma.XOR<Prisma.AdminActivityUpdateManyMutationInput, Prisma.AdminActivityUncheckedUpdateManyWithoutUserInput>
}

export type AdminActivityScalarWhereInput = {
  AND?: Prisma.AdminActivityScalarWhereInput | Prisma.AdminActivityScalarWhereInput[]
  OR?: Prisma.AdminActivityScalarWhereInput[]
  NOT?: Prisma.AdminActivityScalarWhereInput | Prisma.AdminActivityScalarWhereInput[]
  id?: Prisma.IntFilter<"AdminActivity"> | number
  comment?: Prisma.StringNullableFilter<"AdminActivity"> | string | null
  type?: Prisma.IntFilter<"AdminActivity"> | number
  target?: Prisma.BigIntFilter<"AdminActivity"> | bigint | number
  oldData?: Prisma.JsonFilter<"AdminActivity">
  newData?: Prisma.JsonFilter<"AdminActivity">
  userID?: Prisma.IntFilter<"AdminActivity"> | number
  createdAt?: Prisma.DateTimeFilter<"AdminActivity"> | Date | string
}

export type AdminActivityCreateManyUserInput = {
  id?: number
  comment?: string | null
  type: number
  target: bigint | number
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type AdminActivityUpdateWithoutUserInput = {
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  target?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminActivityUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  target?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdminActivityUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  target?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AdminActivitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comment?: boolean
  type?: boolean
  target?: boolean
  oldData?: boolean
  newData?: boolean
  userID?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adminActivity"]>

export type AdminActivitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comment?: boolean
  type?: boolean
  target?: boolean
  oldData?: boolean
  newData?: boolean
  userID?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adminActivity"]>

export type AdminActivitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comment?: boolean
  type?: boolean
  target?: boolean
  oldData?: boolean
  newData?: boolean
  userID?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["adminActivity"]>

export type AdminActivitySelectScalar = {
  id?: boolean
  comment?: boolean
  type?: boolean
  target?: boolean
  oldData?: boolean
  newData?: boolean
  userID?: boolean
  createdAt?: boolean
}

export type AdminActivityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "comment" | "type" | "target" | "oldData" | "newData" | "userID" | "createdAt", ExtArgs["result"]["adminActivity"]>
export type AdminActivityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AdminActivityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AdminActivityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AdminActivityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AdminActivity"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    comment: string | null
    type: number
    target: bigint
    oldData: runtime.JsonValue
    newData: runtime.JsonValue
    userID: number
    createdAt: Date
  }, ExtArgs["result"]["adminActivity"]>
  composites: {}
}

export type AdminActivityGetPayload<S extends boolean | null | undefined | AdminActivityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload, S>

export type AdminActivityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdminActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdminActivityCountAggregateInputType | true
  }

export interface AdminActivityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminActivity'], meta: { name: 'AdminActivity' } }
  /**
   * Find zero or one AdminActivity that matches the filter.
   * @param {AdminActivityFindUniqueArgs} args - Arguments to find a AdminActivity
   * @example
   * // Get one AdminActivity
   * const adminActivity = await prisma.adminActivity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdminActivityFindUniqueArgs>(args: Prisma.SelectSubset<T, AdminActivityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AdminActivity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdminActivityFindUniqueOrThrowArgs} args - Arguments to find a AdminActivity
   * @example
   * // Get one AdminActivity
   * const adminActivity = await prisma.adminActivity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdminActivityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdminActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdminActivity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminActivityFindFirstArgs} args - Arguments to find a AdminActivity
   * @example
   * // Get one AdminActivity
   * const adminActivity = await prisma.adminActivity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdminActivityFindFirstArgs>(args?: Prisma.SelectSubset<T, AdminActivityFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdminActivity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminActivityFindFirstOrThrowArgs} args - Arguments to find a AdminActivity
   * @example
   * // Get one AdminActivity
   * const adminActivity = await prisma.adminActivity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdminActivityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdminActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AdminActivities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminActivityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AdminActivities
   * const adminActivities = await prisma.adminActivity.findMany()
   * 
   * // Get first 10 AdminActivities
   * const adminActivities = await prisma.adminActivity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const adminActivityWithIdOnly = await prisma.adminActivity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdminActivityFindManyArgs>(args?: Prisma.SelectSubset<T, AdminActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AdminActivity.
   * @param {AdminActivityCreateArgs} args - Arguments to create a AdminActivity.
   * @example
   * // Create one AdminActivity
   * const AdminActivity = await prisma.adminActivity.create({
   *   data: {
   *     // ... data to create a AdminActivity
   *   }
   * })
   * 
   */
  create<T extends AdminActivityCreateArgs>(args: Prisma.SelectSubset<T, AdminActivityCreateArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AdminActivities.
   * @param {AdminActivityCreateManyArgs} args - Arguments to create many AdminActivities.
   * @example
   * // Create many AdminActivities
   * const adminActivity = await prisma.adminActivity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdminActivityCreateManyArgs>(args?: Prisma.SelectSubset<T, AdminActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AdminActivities and returns the data saved in the database.
   * @param {AdminActivityCreateManyAndReturnArgs} args - Arguments to create many AdminActivities.
   * @example
   * // Create many AdminActivities
   * const adminActivity = await prisma.adminActivity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AdminActivities and only return the `id`
   * const adminActivityWithIdOnly = await prisma.adminActivity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdminActivityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdminActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AdminActivity.
   * @param {AdminActivityDeleteArgs} args - Arguments to delete one AdminActivity.
   * @example
   * // Delete one AdminActivity
   * const AdminActivity = await prisma.adminActivity.delete({
   *   where: {
   *     // ... filter to delete one AdminActivity
   *   }
   * })
   * 
   */
  delete<T extends AdminActivityDeleteArgs>(args: Prisma.SelectSubset<T, AdminActivityDeleteArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AdminActivity.
   * @param {AdminActivityUpdateArgs} args - Arguments to update one AdminActivity.
   * @example
   * // Update one AdminActivity
   * const adminActivity = await prisma.adminActivity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdminActivityUpdateArgs>(args: Prisma.SelectSubset<T, AdminActivityUpdateArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AdminActivities.
   * @param {AdminActivityDeleteManyArgs} args - Arguments to filter AdminActivities to delete.
   * @example
   * // Delete a few AdminActivities
   * const { count } = await prisma.adminActivity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdminActivityDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdminActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdminActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminActivityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AdminActivities
   * const adminActivity = await prisma.adminActivity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdminActivityUpdateManyArgs>(args: Prisma.SelectSubset<T, AdminActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdminActivities and returns the data updated in the database.
   * @param {AdminActivityUpdateManyAndReturnArgs} args - Arguments to update many AdminActivities.
   * @example
   * // Update many AdminActivities
   * const adminActivity = await prisma.adminActivity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AdminActivities and only return the `id`
   * const adminActivityWithIdOnly = await prisma.adminActivity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdminActivityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdminActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AdminActivity.
   * @param {AdminActivityUpsertArgs} args - Arguments to update or create a AdminActivity.
   * @example
   * // Update or create a AdminActivity
   * const adminActivity = await prisma.adminActivity.upsert({
   *   create: {
   *     // ... data to create a AdminActivity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AdminActivity we want to update
   *   }
   * })
   */
  upsert<T extends AdminActivityUpsertArgs>(args: Prisma.SelectSubset<T, AdminActivityUpsertArgs<ExtArgs>>): Prisma.Prisma__AdminActivityClient<runtime.Types.Result.GetResult<Prisma.$AdminActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AdminActivities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminActivityCountArgs} args - Arguments to filter AdminActivities to count.
   * @example
   * // Count the number of AdminActivities
   * const count = await prisma.adminActivity.count({
   *   where: {
   *     // ... the filter for the AdminActivities we want to count
   *   }
   * })
  **/
  count<T extends AdminActivityCountArgs>(
    args?: Prisma.Subset<T, AdminActivityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdminActivityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AdminActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdminActivityAggregateArgs>(args: Prisma.Subset<T, AdminActivityAggregateArgs>): Prisma.PrismaPromise<GetAdminActivityAggregateType<T>>

  /**
   * Group by AdminActivity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminActivityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdminActivityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdminActivityGroupByArgs['orderBy'] }
      : { orderBy?: AdminActivityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdminActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AdminActivity model
 */
readonly fields: AdminActivityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AdminActivity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdminActivityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AdminActivity model
 */
export interface AdminActivityFieldRefs {
  readonly id: Prisma.FieldRef<"AdminActivity", 'Int'>
  readonly comment: Prisma.FieldRef<"AdminActivity", 'String'>
  readonly type: Prisma.FieldRef<"AdminActivity", 'Int'>
  readonly target: Prisma.FieldRef<"AdminActivity", 'BigInt'>
  readonly oldData: Prisma.FieldRef<"AdminActivity", 'Json'>
  readonly newData: Prisma.FieldRef<"AdminActivity", 'Json'>
  readonly userID: Prisma.FieldRef<"AdminActivity", 'Int'>
  readonly createdAt: Prisma.FieldRef<"AdminActivity", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AdminActivity findUnique
 */
export type AdminActivityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * Filter, which AdminActivity to fetch.
   */
  where: Prisma.AdminActivityWhereUniqueInput
}

/**
 * AdminActivity findUniqueOrThrow
 */
export type AdminActivityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * Filter, which AdminActivity to fetch.
   */
  where: Prisma.AdminActivityWhereUniqueInput
}

/**
 * AdminActivity findFirst
 */
export type AdminActivityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * Filter, which AdminActivity to fetch.
   */
  where?: Prisma.AdminActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminActivities to fetch.
   */
  orderBy?: Prisma.AdminActivityOrderByWithRelationInput | Prisma.AdminActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdminActivities.
   */
  cursor?: Prisma.AdminActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdminActivities.
   */
  distinct?: Prisma.AdminActivityScalarFieldEnum | Prisma.AdminActivityScalarFieldEnum[]
}

/**
 * AdminActivity findFirstOrThrow
 */
export type AdminActivityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * Filter, which AdminActivity to fetch.
   */
  where?: Prisma.AdminActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminActivities to fetch.
   */
  orderBy?: Prisma.AdminActivityOrderByWithRelationInput | Prisma.AdminActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdminActivities.
   */
  cursor?: Prisma.AdminActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminActivities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdminActivities.
   */
  distinct?: Prisma.AdminActivityScalarFieldEnum | Prisma.AdminActivityScalarFieldEnum[]
}

/**
 * AdminActivity findMany
 */
export type AdminActivityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * Filter, which AdminActivities to fetch.
   */
  where?: Prisma.AdminActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdminActivities to fetch.
   */
  orderBy?: Prisma.AdminActivityOrderByWithRelationInput | Prisma.AdminActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AdminActivities.
   */
  cursor?: Prisma.AdminActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdminActivities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdminActivities.
   */
  skip?: number
  distinct?: Prisma.AdminActivityScalarFieldEnum | Prisma.AdminActivityScalarFieldEnum[]
}

/**
 * AdminActivity create
 */
export type AdminActivityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * The data needed to create a AdminActivity.
   */
  data: Prisma.XOR<Prisma.AdminActivityCreateInput, Prisma.AdminActivityUncheckedCreateInput>
}

/**
 * AdminActivity createMany
 */
export type AdminActivityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AdminActivities.
   */
  data: Prisma.AdminActivityCreateManyInput | Prisma.AdminActivityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AdminActivity createManyAndReturn
 */
export type AdminActivityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * The data used to create many AdminActivities.
   */
  data: Prisma.AdminActivityCreateManyInput | Prisma.AdminActivityCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AdminActivity update
 */
export type AdminActivityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * The data needed to update a AdminActivity.
   */
  data: Prisma.XOR<Prisma.AdminActivityUpdateInput, Prisma.AdminActivityUncheckedUpdateInput>
  /**
   * Choose, which AdminActivity to update.
   */
  where: Prisma.AdminActivityWhereUniqueInput
}

/**
 * AdminActivity updateMany
 */
export type AdminActivityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AdminActivities.
   */
  data: Prisma.XOR<Prisma.AdminActivityUpdateManyMutationInput, Prisma.AdminActivityUncheckedUpdateManyInput>
  /**
   * Filter which AdminActivities to update
   */
  where?: Prisma.AdminActivityWhereInput
  /**
   * Limit how many AdminActivities to update.
   */
  limit?: number
}

/**
 * AdminActivity updateManyAndReturn
 */
export type AdminActivityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * The data used to update AdminActivities.
   */
  data: Prisma.XOR<Prisma.AdminActivityUpdateManyMutationInput, Prisma.AdminActivityUncheckedUpdateManyInput>
  /**
   * Filter which AdminActivities to update
   */
  where?: Prisma.AdminActivityWhereInput
  /**
   * Limit how many AdminActivities to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AdminActivity upsert
 */
export type AdminActivityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * The filter to search for the AdminActivity to update in case it exists.
   */
  where: Prisma.AdminActivityWhereUniqueInput
  /**
   * In case the AdminActivity found by the `where` argument doesn't exist, create a new AdminActivity with this data.
   */
  create: Prisma.XOR<Prisma.AdminActivityCreateInput, Prisma.AdminActivityUncheckedCreateInput>
  /**
   * In case the AdminActivity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdminActivityUpdateInput, Prisma.AdminActivityUncheckedUpdateInput>
}

/**
 * AdminActivity delete
 */
export type AdminActivityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
  /**
   * Filter which AdminActivity to delete.
   */
  where: Prisma.AdminActivityWhereUniqueInput
}

/**
 * AdminActivity deleteMany
 */
export type AdminActivityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdminActivities to delete
   */
  where?: Prisma.AdminActivityWhereInput
  /**
   * Limit how many AdminActivities to delete.
   */
  limit?: number
}

/**
 * AdminActivity without action
 */
export type AdminActivityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdminActivity
   */
  select?: Prisma.AdminActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdminActivity
   */
  omit?: Prisma.AdminActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AdminActivityInclude<ExtArgs> | null
}
