
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `LeaderboardRun` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LeaderboardRun
 * This table stores runs _on a leaderboard_. An entry is a unique
 * instance of a userID and the fields that constitute a Leaderboard (`mapID`,
 * `gamemode`, `trackType`, `trackNum`, `style`). By using that combination in
 * our PK, we ensure those entries are unique at a DB level.
 * 
 * We use B-Tree two indexes
 * - (userID, gamemode, style, mapID, trackType, trackNum): For fetching runs by user for e.g. profile page.
 * Also is a UNIQUE constraint.
 * - (mapID, gamemode, trackType, trackNum, style, time (asc), createdAt (asc)): Indexes in leaderboard order.
 * The idea is we get every distinct leaderboard stacked on top of each other, then ordered by time within the chunk,
 * where ties are simply handled by whatever was submitted first. Note that we store any actual "rank" values - incrementing
 * ranks for all slower runs on a leaderboard is an incredibly slow operation. (TODO: This hasn't been implemented yet).
 * Instead, we index this way to allow us to very efficiently compute ranks per query using window functions.
 */
export type LeaderboardRunModel = runtime.Types.Result.DefaultSelection<Prisma.$LeaderboardRunPayload>

export type AggregateLeaderboardRun = {
  _count: LeaderboardRunCountAggregateOutputType | null
  _avg: LeaderboardRunAvgAggregateOutputType | null
  _sum: LeaderboardRunSumAggregateOutputType | null
  _min: LeaderboardRunMinAggregateOutputType | null
  _max: LeaderboardRunMaxAggregateOutputType | null
}

export type LeaderboardRunAvgAggregateOutputType = {
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  flags: number | null
  rank: number | null
  pastRunID: number | null
}

export type LeaderboardRunSumAggregateOutputType = {
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  flags: number[]
  rank: number | null
  pastRunID: bigint | null
}

export type LeaderboardRunMinAggregateOutputType = {
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  replayHash: string | null
  rank: number | null
  createdAt: Date | null
  pastRunID: bigint | null
}

export type LeaderboardRunMaxAggregateOutputType = {
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  replayHash: string | null
  rank: number | null
  createdAt: Date | null
  pastRunID: bigint | null
}

export type LeaderboardRunCountAggregateOutputType = {
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: number
  replayHash: number
  flags: number
  rank: number
  createdAt: number
  pastRunID: number
  _all: number
}


export type LeaderboardRunAvgAggregateInputType = {
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  flags?: true
  rank?: true
  pastRunID?: true
}

export type LeaderboardRunSumAggregateInputType = {
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  flags?: true
  rank?: true
  pastRunID?: true
}

export type LeaderboardRunMinAggregateInputType = {
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  replayHash?: true
  rank?: true
  createdAt?: true
  pastRunID?: true
}

export type LeaderboardRunMaxAggregateInputType = {
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  replayHash?: true
  rank?: true
  createdAt?: true
  pastRunID?: true
}

export type LeaderboardRunCountAggregateInputType = {
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  splits?: true
  replayHash?: true
  flags?: true
  rank?: true
  createdAt?: true
  pastRunID?: true
  _all?: true
}

export type LeaderboardRunAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LeaderboardRun to aggregate.
   */
  where?: Prisma.LeaderboardRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderboardRuns to fetch.
   */
  orderBy?: Prisma.LeaderboardRunOrderByWithRelationInput | Prisma.LeaderboardRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LeaderboardRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderboardRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderboardRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LeaderboardRuns
  **/
  _count?: true | LeaderboardRunCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LeaderboardRunAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LeaderboardRunSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LeaderboardRunMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LeaderboardRunMaxAggregateInputType
}

export type GetLeaderboardRunAggregateType<T extends LeaderboardRunAggregateArgs> = {
      [P in keyof T & keyof AggregateLeaderboardRun]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLeaderboardRun[P]>
    : Prisma.GetScalarType<T[P], AggregateLeaderboardRun[P]>
}




export type LeaderboardRunGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LeaderboardRunWhereInput
  orderBy?: Prisma.LeaderboardRunOrderByWithAggregationInput | Prisma.LeaderboardRunOrderByWithAggregationInput[]
  by: Prisma.LeaderboardRunScalarFieldEnum[] | Prisma.LeaderboardRunScalarFieldEnum
  having?: Prisma.LeaderboardRunScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LeaderboardRunCountAggregateInputType | true
  _avg?: LeaderboardRunAvgAggregateInputType
  _sum?: LeaderboardRunSumAggregateInputType
  _min?: LeaderboardRunMinAggregateInputType
  _max?: LeaderboardRunMaxAggregateInputType
}

export type LeaderboardRunGroupByOutputType = {
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: runtime.JsonValue
  replayHash: string | null
  flags: number[]
  rank: number
  createdAt: Date
  pastRunID: bigint | null
  _count: LeaderboardRunCountAggregateOutputType | null
  _avg: LeaderboardRunAvgAggregateOutputType | null
  _sum: LeaderboardRunSumAggregateOutputType | null
  _min: LeaderboardRunMinAggregateOutputType | null
  _max: LeaderboardRunMaxAggregateOutputType | null
}

type GetLeaderboardRunGroupByPayload<T extends LeaderboardRunGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LeaderboardRunGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LeaderboardRunGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LeaderboardRunGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LeaderboardRunGroupByOutputType[P]>
      }
    >
  >



export type LeaderboardRunWhereInput = {
  AND?: Prisma.LeaderboardRunWhereInput | Prisma.LeaderboardRunWhereInput[]
  OR?: Prisma.LeaderboardRunWhereInput[]
  NOT?: Prisma.LeaderboardRunWhereInput | Prisma.LeaderboardRunWhereInput[]
  userID?: Prisma.IntFilter<"LeaderboardRun"> | number
  mapID?: Prisma.IntFilter<"LeaderboardRun"> | number
  gamemode?: Prisma.IntFilter<"LeaderboardRun"> | number
  trackType?: Prisma.IntFilter<"LeaderboardRun"> | number
  trackNum?: Prisma.IntFilter<"LeaderboardRun"> | number
  style?: Prisma.IntFilter<"LeaderboardRun"> | number
  time?: Prisma.FloatFilter<"LeaderboardRun"> | number
  splits?: Prisma.JsonFilter<"LeaderboardRun">
  replayHash?: Prisma.StringNullableFilter<"LeaderboardRun"> | string | null
  flags?: Prisma.IntNullableListFilter<"LeaderboardRun">
  rank?: Prisma.IntFilter<"LeaderboardRun"> | number
  createdAt?: Prisma.DateTimeFilter<"LeaderboardRun"> | Date | string
  pastRunID?: Prisma.BigIntNullableFilter<"LeaderboardRun"> | bigint | number | null
  leaderboard?: Prisma.XOR<Prisma.LeaderboardScalarRelationFilter, Prisma.LeaderboardWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  pastRun?: Prisma.XOR<Prisma.PastRunNullableScalarRelationFilter, Prisma.PastRunWhereInput> | null
}

export type LeaderboardRunOrderByWithRelationInput = {
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  splits?: Prisma.SortOrder
  replayHash?: Prisma.SortOrderInput | Prisma.SortOrder
  flags?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  pastRunID?: Prisma.SortOrderInput | Prisma.SortOrder
  leaderboard?: Prisma.LeaderboardOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
  mmap?: Prisma.MMapOrderByWithRelationInput
  pastRun?: Prisma.PastRunOrderByWithRelationInput
}

export type LeaderboardRunWhereUniqueInput = Prisma.AtLeast<{
  pastRunID?: bigint | number
  userID_gamemode_style_mapID_trackType_trackNum?: Prisma.LeaderboardRunUserIDGamemodeStyleMapIDTrackTypeTrackNumCompoundUniqueInput
  AND?: Prisma.LeaderboardRunWhereInput | Prisma.LeaderboardRunWhereInput[]
  OR?: Prisma.LeaderboardRunWhereInput[]
  NOT?: Prisma.LeaderboardRunWhereInput | Prisma.LeaderboardRunWhereInput[]
  userID?: Prisma.IntFilter<"LeaderboardRun"> | number
  mapID?: Prisma.IntFilter<"LeaderboardRun"> | number
  gamemode?: Prisma.IntFilter<"LeaderboardRun"> | number
  trackType?: Prisma.IntFilter<"LeaderboardRun"> | number
  trackNum?: Prisma.IntFilter<"LeaderboardRun"> | number
  style?: Prisma.IntFilter<"LeaderboardRun"> | number
  time?: Prisma.FloatFilter<"LeaderboardRun"> | number
  splits?: Prisma.JsonFilter<"LeaderboardRun">
  replayHash?: Prisma.StringNullableFilter<"LeaderboardRun"> | string | null
  flags?: Prisma.IntNullableListFilter<"LeaderboardRun">
  rank?: Prisma.IntFilter<"LeaderboardRun"> | number
  createdAt?: Prisma.DateTimeFilter<"LeaderboardRun"> | Date | string
  leaderboard?: Prisma.XOR<Prisma.LeaderboardScalarRelationFilter, Prisma.LeaderboardWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  pastRun?: Prisma.XOR<Prisma.PastRunNullableScalarRelationFilter, Prisma.PastRunWhereInput> | null
}, "userID_gamemode_style_mapID_trackType_trackNum" | "pastRunID">

export type LeaderboardRunOrderByWithAggregationInput = {
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  splits?: Prisma.SortOrder
  replayHash?: Prisma.SortOrderInput | Prisma.SortOrder
  flags?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  pastRunID?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.LeaderboardRunCountOrderByAggregateInput
  _avg?: Prisma.LeaderboardRunAvgOrderByAggregateInput
  _max?: Prisma.LeaderboardRunMaxOrderByAggregateInput
  _min?: Prisma.LeaderboardRunMinOrderByAggregateInput
  _sum?: Prisma.LeaderboardRunSumOrderByAggregateInput
}

export type LeaderboardRunScalarWhereWithAggregatesInput = {
  AND?: Prisma.LeaderboardRunScalarWhereWithAggregatesInput | Prisma.LeaderboardRunScalarWhereWithAggregatesInput[]
  OR?: Prisma.LeaderboardRunScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LeaderboardRunScalarWhereWithAggregatesInput | Prisma.LeaderboardRunScalarWhereWithAggregatesInput[]
  userID?: Prisma.IntWithAggregatesFilter<"LeaderboardRun"> | number
  mapID?: Prisma.IntWithAggregatesFilter<"LeaderboardRun"> | number
  gamemode?: Prisma.IntWithAggregatesFilter<"LeaderboardRun"> | number
  trackType?: Prisma.IntWithAggregatesFilter<"LeaderboardRun"> | number
  trackNum?: Prisma.IntWithAggregatesFilter<"LeaderboardRun"> | number
  style?: Prisma.IntWithAggregatesFilter<"LeaderboardRun"> | number
  time?: Prisma.FloatWithAggregatesFilter<"LeaderboardRun"> | number
  splits?: Prisma.JsonWithAggregatesFilter<"LeaderboardRun">
  replayHash?: Prisma.StringNullableWithAggregatesFilter<"LeaderboardRun"> | string | null
  flags?: Prisma.IntNullableListFilter<"LeaderboardRun">
  rank?: Prisma.IntWithAggregatesFilter<"LeaderboardRun"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LeaderboardRun"> | Date | string
  pastRunID?: Prisma.BigIntNullableWithAggregatesFilter<"LeaderboardRun"> | bigint | number | null
}

export type LeaderboardRunCreateInput = {
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  leaderboard: Prisma.LeaderboardCreateNestedOneWithoutRunsInput
  user: Prisma.UserCreateNestedOneWithoutLeaderboardRunsInput
  mmap: Prisma.MMapCreateNestedOneWithoutLeaderboardRunsInput
  pastRun?: Prisma.PastRunCreateNestedOneWithoutLeaderboardRunInput
}

export type LeaderboardRunUncheckedCreateInput = {
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunUpdateInput = {
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leaderboard?: Prisma.LeaderboardUpdateOneRequiredWithoutRunsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutLeaderboardRunsNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutLeaderboardRunsNestedInput
  pastRun?: Prisma.PastRunUpdateOneWithoutLeaderboardRunNestedInput
}

export type LeaderboardRunUncheckedUpdateInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type LeaderboardRunCreateManyInput = {
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunUpdateManyMutationInput = {
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeaderboardRunUncheckedUpdateManyInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type LeaderboardRunListRelationFilter = {
  every?: Prisma.LeaderboardRunWhereInput
  some?: Prisma.LeaderboardRunWhereInput
  none?: Prisma.LeaderboardRunWhereInput
}

export type LeaderboardRunOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LeaderboardRunUserIDGamemodeStyleMapIDTrackTypeTrackNumCompoundUniqueInput = {
  userID: number
  gamemode: number
  style: number
  mapID: number
  trackType: number
  trackNum: number
}

export type LeaderboardRunCountOrderByAggregateInput = {
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  splits?: Prisma.SortOrder
  replayHash?: Prisma.SortOrder
  flags?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  pastRunID?: Prisma.SortOrder
}

export type LeaderboardRunAvgOrderByAggregateInput = {
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  flags?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  pastRunID?: Prisma.SortOrder
}

export type LeaderboardRunMaxOrderByAggregateInput = {
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  replayHash?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  pastRunID?: Prisma.SortOrder
}

export type LeaderboardRunMinOrderByAggregateInput = {
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  replayHash?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  pastRunID?: Prisma.SortOrder
}

export type LeaderboardRunSumOrderByAggregateInput = {
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  flags?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  pastRunID?: Prisma.SortOrder
}

export type LeaderboardRunNullableScalarRelationFilter = {
  is?: Prisma.LeaderboardRunWhereInput | null
  isNot?: Prisma.LeaderboardRunWhereInput | null
}

export type LeaderboardRunCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutUserInput, Prisma.LeaderboardRunUncheckedCreateWithoutUserInput> | Prisma.LeaderboardRunCreateWithoutUserInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutUserInput | Prisma.LeaderboardRunCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LeaderboardRunCreateManyUserInputEnvelope
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
}

export type LeaderboardRunUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutUserInput, Prisma.LeaderboardRunUncheckedCreateWithoutUserInput> | Prisma.LeaderboardRunCreateWithoutUserInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutUserInput | Prisma.LeaderboardRunCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LeaderboardRunCreateManyUserInputEnvelope
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
}

export type LeaderboardRunUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutUserInput, Prisma.LeaderboardRunUncheckedCreateWithoutUserInput> | Prisma.LeaderboardRunCreateWithoutUserInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutUserInput | Prisma.LeaderboardRunCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutUserInput | Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LeaderboardRunCreateManyUserInputEnvelope
  set?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  disconnect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  delete?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  update?: Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutUserInput | Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LeaderboardRunUpdateManyWithWhereWithoutUserInput | Prisma.LeaderboardRunUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
}

export type LeaderboardRunUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutUserInput, Prisma.LeaderboardRunUncheckedCreateWithoutUserInput> | Prisma.LeaderboardRunCreateWithoutUserInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutUserInput | Prisma.LeaderboardRunCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutUserInput | Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LeaderboardRunCreateManyUserInputEnvelope
  set?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  disconnect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  delete?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  update?: Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutUserInput | Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LeaderboardRunUpdateManyWithWhereWithoutUserInput | Prisma.LeaderboardRunUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
}

export type LeaderboardRunCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutMmapInput, Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput> | Prisma.LeaderboardRunCreateWithoutMmapInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput | Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.LeaderboardRunCreateManyMmapInputEnvelope
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
}

export type LeaderboardRunUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutMmapInput, Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput> | Prisma.LeaderboardRunCreateWithoutMmapInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput | Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.LeaderboardRunCreateManyMmapInputEnvelope
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
}

export type LeaderboardRunUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutMmapInput, Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput> | Prisma.LeaderboardRunCreateWithoutMmapInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput | Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutMmapInput | Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.LeaderboardRunCreateManyMmapInputEnvelope
  set?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  disconnect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  delete?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  update?: Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutMmapInput | Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.LeaderboardRunUpdateManyWithWhereWithoutMmapInput | Prisma.LeaderboardRunUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
}

export type LeaderboardRunUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutMmapInput, Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput> | Prisma.LeaderboardRunCreateWithoutMmapInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput | Prisma.LeaderboardRunCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutMmapInput | Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.LeaderboardRunCreateManyMmapInputEnvelope
  set?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  disconnect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  delete?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  update?: Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutMmapInput | Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.LeaderboardRunUpdateManyWithWhereWithoutMmapInput | Prisma.LeaderboardRunUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
}

export type LeaderboardRunCreateNestedManyWithoutLeaderboardInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput> | Prisma.LeaderboardRunCreateWithoutLeaderboardInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput | Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput[]
  createMany?: Prisma.LeaderboardRunCreateManyLeaderboardInputEnvelope
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
}

export type LeaderboardRunUncheckedCreateNestedManyWithoutLeaderboardInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput> | Prisma.LeaderboardRunCreateWithoutLeaderboardInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput | Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput[]
  createMany?: Prisma.LeaderboardRunCreateManyLeaderboardInputEnvelope
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
}

export type LeaderboardRunUpdateManyWithoutLeaderboardNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput> | Prisma.LeaderboardRunCreateWithoutLeaderboardInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput | Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput[]
  upsert?: Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutLeaderboardInput | Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutLeaderboardInput[]
  createMany?: Prisma.LeaderboardRunCreateManyLeaderboardInputEnvelope
  set?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  disconnect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  delete?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  update?: Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutLeaderboardInput | Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutLeaderboardInput[]
  updateMany?: Prisma.LeaderboardRunUpdateManyWithWhereWithoutLeaderboardInput | Prisma.LeaderboardRunUpdateManyWithWhereWithoutLeaderboardInput[]
  deleteMany?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
}

export type LeaderboardRunUncheckedUpdateManyWithoutLeaderboardNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput> | Prisma.LeaderboardRunCreateWithoutLeaderboardInput[] | Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput[]
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput | Prisma.LeaderboardRunCreateOrConnectWithoutLeaderboardInput[]
  upsert?: Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutLeaderboardInput | Prisma.LeaderboardRunUpsertWithWhereUniqueWithoutLeaderboardInput[]
  createMany?: Prisma.LeaderboardRunCreateManyLeaderboardInputEnvelope
  set?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  disconnect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  delete?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  connect?: Prisma.LeaderboardRunWhereUniqueInput | Prisma.LeaderboardRunWhereUniqueInput[]
  update?: Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutLeaderboardInput | Prisma.LeaderboardRunUpdateWithWhereUniqueWithoutLeaderboardInput[]
  updateMany?: Prisma.LeaderboardRunUpdateManyWithWhereWithoutLeaderboardInput | Prisma.LeaderboardRunUpdateManyWithWhereWithoutLeaderboardInput[]
  deleteMany?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
}

export type LeaderboardRunCreateflagsInput = {
  set: number[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type LeaderboardRunUpdateflagsInput = {
  set?: number[]
  push?: number | number[]
}

export type LeaderboardRunCreateNestedOneWithoutPastRunInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedCreateWithoutPastRunInput>
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutPastRunInput
  connect?: Prisma.LeaderboardRunWhereUniqueInput
}

export type LeaderboardRunUncheckedCreateNestedOneWithoutPastRunInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedCreateWithoutPastRunInput>
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutPastRunInput
  connect?: Prisma.LeaderboardRunWhereUniqueInput
}

export type LeaderboardRunUpdateOneWithoutPastRunNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedCreateWithoutPastRunInput>
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutPastRunInput
  upsert?: Prisma.LeaderboardRunUpsertWithoutPastRunInput
  disconnect?: Prisma.LeaderboardRunWhereInput | boolean
  delete?: Prisma.LeaderboardRunWhereInput | boolean
  connect?: Prisma.LeaderboardRunWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LeaderboardRunUpdateToOneWithWhereWithoutPastRunInput, Prisma.LeaderboardRunUpdateWithoutPastRunInput>, Prisma.LeaderboardRunUncheckedUpdateWithoutPastRunInput>
}

export type LeaderboardRunUncheckedUpdateOneWithoutPastRunNestedInput = {
  create?: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedCreateWithoutPastRunInput>
  connectOrCreate?: Prisma.LeaderboardRunCreateOrConnectWithoutPastRunInput
  upsert?: Prisma.LeaderboardRunUpsertWithoutPastRunInput
  disconnect?: Prisma.LeaderboardRunWhereInput | boolean
  delete?: Prisma.LeaderboardRunWhereInput | boolean
  connect?: Prisma.LeaderboardRunWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LeaderboardRunUpdateToOneWithWhereWithoutPastRunInput, Prisma.LeaderboardRunUpdateWithoutPastRunInput>, Prisma.LeaderboardRunUncheckedUpdateWithoutPastRunInput>
}

export type LeaderboardRunCreateWithoutUserInput = {
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  leaderboard: Prisma.LeaderboardCreateNestedOneWithoutRunsInput
  mmap: Prisma.MMapCreateNestedOneWithoutLeaderboardRunsInput
  pastRun?: Prisma.PastRunCreateNestedOneWithoutLeaderboardRunInput
}

export type LeaderboardRunUncheckedCreateWithoutUserInput = {
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunCreateOrConnectWithoutUserInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutUserInput, Prisma.LeaderboardRunUncheckedCreateWithoutUserInput>
}

export type LeaderboardRunCreateManyUserInputEnvelope = {
  data: Prisma.LeaderboardRunCreateManyUserInput | Prisma.LeaderboardRunCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type LeaderboardRunUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  update: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutUserInput, Prisma.LeaderboardRunUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutUserInput, Prisma.LeaderboardRunUncheckedCreateWithoutUserInput>
}

export type LeaderboardRunUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutUserInput, Prisma.LeaderboardRunUncheckedUpdateWithoutUserInput>
}

export type LeaderboardRunUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.LeaderboardRunScalarWhereInput
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateManyMutationInput, Prisma.LeaderboardRunUncheckedUpdateManyWithoutUserInput>
}

export type LeaderboardRunScalarWhereInput = {
  AND?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
  OR?: Prisma.LeaderboardRunScalarWhereInput[]
  NOT?: Prisma.LeaderboardRunScalarWhereInput | Prisma.LeaderboardRunScalarWhereInput[]
  userID?: Prisma.IntFilter<"LeaderboardRun"> | number
  mapID?: Prisma.IntFilter<"LeaderboardRun"> | number
  gamemode?: Prisma.IntFilter<"LeaderboardRun"> | number
  trackType?: Prisma.IntFilter<"LeaderboardRun"> | number
  trackNum?: Prisma.IntFilter<"LeaderboardRun"> | number
  style?: Prisma.IntFilter<"LeaderboardRun"> | number
  time?: Prisma.FloatFilter<"LeaderboardRun"> | number
  splits?: Prisma.JsonFilter<"LeaderboardRun">
  replayHash?: Prisma.StringNullableFilter<"LeaderboardRun"> | string | null
  flags?: Prisma.IntNullableListFilter<"LeaderboardRun">
  rank?: Prisma.IntFilter<"LeaderboardRun"> | number
  createdAt?: Prisma.DateTimeFilter<"LeaderboardRun"> | Date | string
  pastRunID?: Prisma.BigIntNullableFilter<"LeaderboardRun"> | bigint | number | null
}

export type LeaderboardRunCreateWithoutMmapInput = {
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  leaderboard: Prisma.LeaderboardCreateNestedOneWithoutRunsInput
  user: Prisma.UserCreateNestedOneWithoutLeaderboardRunsInput
  pastRun?: Prisma.PastRunCreateNestedOneWithoutLeaderboardRunInput
}

export type LeaderboardRunUncheckedCreateWithoutMmapInput = {
  userID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunCreateOrConnectWithoutMmapInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutMmapInput, Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput>
}

export type LeaderboardRunCreateManyMmapInputEnvelope = {
  data: Prisma.LeaderboardRunCreateManyMmapInput | Prisma.LeaderboardRunCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type LeaderboardRunUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  update: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutMmapInput, Prisma.LeaderboardRunUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutMmapInput, Prisma.LeaderboardRunUncheckedCreateWithoutMmapInput>
}

export type LeaderboardRunUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutMmapInput, Prisma.LeaderboardRunUncheckedUpdateWithoutMmapInput>
}

export type LeaderboardRunUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.LeaderboardRunScalarWhereInput
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateManyMutationInput, Prisma.LeaderboardRunUncheckedUpdateManyWithoutMmapInput>
}

export type LeaderboardRunCreateWithoutLeaderboardInput = {
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutLeaderboardRunsInput
  mmap: Prisma.MMapCreateNestedOneWithoutLeaderboardRunsInput
  pastRun?: Prisma.PastRunCreateNestedOneWithoutLeaderboardRunInput
}

export type LeaderboardRunUncheckedCreateWithoutLeaderboardInput = {
  userID: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunCreateOrConnectWithoutLeaderboardInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput>
}

export type LeaderboardRunCreateManyLeaderboardInputEnvelope = {
  data: Prisma.LeaderboardRunCreateManyLeaderboardInput | Prisma.LeaderboardRunCreateManyLeaderboardInput[]
  skipDuplicates?: boolean
}

export type LeaderboardRunUpsertWithWhereUniqueWithoutLeaderboardInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  update: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedUpdateWithoutLeaderboardInput>
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedCreateWithoutLeaderboardInput>
}

export type LeaderboardRunUpdateWithWhereUniqueWithoutLeaderboardInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutLeaderboardInput, Prisma.LeaderboardRunUncheckedUpdateWithoutLeaderboardInput>
}

export type LeaderboardRunUpdateManyWithWhereWithoutLeaderboardInput = {
  where: Prisma.LeaderboardRunScalarWhereInput
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateManyMutationInput, Prisma.LeaderboardRunUncheckedUpdateManyWithoutLeaderboardInput>
}

export type LeaderboardRunCreateWithoutPastRunInput = {
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  leaderboard: Prisma.LeaderboardCreateNestedOneWithoutRunsInput
  user: Prisma.UserCreateNestedOneWithoutLeaderboardRunsInput
  mmap: Prisma.MMapCreateNestedOneWithoutLeaderboardRunsInput
}

export type LeaderboardRunUncheckedCreateWithoutPastRunInput = {
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
}

export type LeaderboardRunCreateOrConnectWithoutPastRunInput = {
  where: Prisma.LeaderboardRunWhereUniqueInput
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedCreateWithoutPastRunInput>
}

export type LeaderboardRunUpsertWithoutPastRunInput = {
  update: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedUpdateWithoutPastRunInput>
  create: Prisma.XOR<Prisma.LeaderboardRunCreateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedCreateWithoutPastRunInput>
  where?: Prisma.LeaderboardRunWhereInput
}

export type LeaderboardRunUpdateToOneWithWhereWithoutPastRunInput = {
  where?: Prisma.LeaderboardRunWhereInput
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateWithoutPastRunInput, Prisma.LeaderboardRunUncheckedUpdateWithoutPastRunInput>
}

export type LeaderboardRunUpdateWithoutPastRunInput = {
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leaderboard?: Prisma.LeaderboardUpdateOneRequiredWithoutRunsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutLeaderboardRunsNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutLeaderboardRunsNestedInput
}

export type LeaderboardRunUncheckedUpdateWithoutPastRunInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LeaderboardRunCreateManyUserInput = {
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunUpdateWithoutUserInput = {
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leaderboard?: Prisma.LeaderboardUpdateOneRequiredWithoutRunsNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutLeaderboardRunsNestedInput
  pastRun?: Prisma.PastRunUpdateOneWithoutLeaderboardRunNestedInput
}

export type LeaderboardRunUncheckedUpdateWithoutUserInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type LeaderboardRunUncheckedUpdateManyWithoutUserInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type LeaderboardRunCreateManyMmapInput = {
  userID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunUpdateWithoutMmapInput = {
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leaderboard?: Prisma.LeaderboardUpdateOneRequiredWithoutRunsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutLeaderboardRunsNestedInput
  pastRun?: Prisma.PastRunUpdateOneWithoutLeaderboardRunNestedInput
}

export type LeaderboardRunUncheckedUpdateWithoutMmapInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type LeaderboardRunUncheckedUpdateManyWithoutMmapInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type LeaderboardRunCreateManyLeaderboardInput = {
  userID: number
  time: number
  splits: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: string | null
  flags?: Prisma.LeaderboardRunCreateflagsInput | number[]
  rank: number
  createdAt?: Date | string
  pastRunID?: bigint | number | null
}

export type LeaderboardRunUpdateWithoutLeaderboardInput = {
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutLeaderboardRunsNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutLeaderboardRunsNestedInput
  pastRun?: Prisma.PastRunUpdateOneWithoutLeaderboardRunNestedInput
}

export type LeaderboardRunUncheckedUpdateWithoutLeaderboardInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}

export type LeaderboardRunUncheckedUpdateManyWithoutLeaderboardInput = {
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  splits?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  replayHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  flags?: Prisma.LeaderboardRunUpdateflagsInput | number[]
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pastRunID?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
}



export type LeaderboardRunSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  splits?: boolean
  replayHash?: boolean
  flags?: boolean
  rank?: boolean
  createdAt?: boolean
  pastRunID?: boolean
  leaderboard?: boolean | Prisma.LeaderboardDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  pastRun?: boolean | Prisma.LeaderboardRun$pastRunArgs<ExtArgs>
}, ExtArgs["result"]["leaderboardRun"]>

export type LeaderboardRunSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  splits?: boolean
  replayHash?: boolean
  flags?: boolean
  rank?: boolean
  createdAt?: boolean
  pastRunID?: boolean
  leaderboard?: boolean | Prisma.LeaderboardDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  pastRun?: boolean | Prisma.LeaderboardRun$pastRunArgs<ExtArgs>
}, ExtArgs["result"]["leaderboardRun"]>

export type LeaderboardRunSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  splits?: boolean
  replayHash?: boolean
  flags?: boolean
  rank?: boolean
  createdAt?: boolean
  pastRunID?: boolean
  leaderboard?: boolean | Prisma.LeaderboardDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  pastRun?: boolean | Prisma.LeaderboardRun$pastRunArgs<ExtArgs>
}, ExtArgs["result"]["leaderboardRun"]>

export type LeaderboardRunSelectScalar = {
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  splits?: boolean
  replayHash?: boolean
  flags?: boolean
  rank?: boolean
  createdAt?: boolean
  pastRunID?: boolean
}

export type LeaderboardRunOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userID" | "mapID" | "gamemode" | "trackType" | "trackNum" | "style" | "time" | "splits" | "replayHash" | "flags" | "rank" | "createdAt" | "pastRunID", ExtArgs["result"]["leaderboardRun"]>
export type LeaderboardRunInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leaderboard?: boolean | Prisma.LeaderboardDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  pastRun?: boolean | Prisma.LeaderboardRun$pastRunArgs<ExtArgs>
}
export type LeaderboardRunIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leaderboard?: boolean | Prisma.LeaderboardDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  pastRun?: boolean | Prisma.LeaderboardRun$pastRunArgs<ExtArgs>
}
export type LeaderboardRunIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leaderboard?: boolean | Prisma.LeaderboardDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  pastRun?: boolean | Prisma.LeaderboardRun$pastRunArgs<ExtArgs>
}

export type $LeaderboardRunPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LeaderboardRun"
  objects: {
    leaderboard: Prisma.$LeaderboardPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
    mmap: Prisma.$MMapPayload<ExtArgs>
    pastRun: Prisma.$PastRunPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userID: number
    mapID: number
    gamemode: number
    trackType: number
    trackNum: number
    style: number
    /**
     * We don't store ticks in anticipation of future sub-tick system. If ticks
     * are required, they can be calculated with `time * tickrate of gamemode`.
     */
    time: number
    /**
     * We store this for LeaderboardRun and *not* PastRun for space efficiency.
     * RunSplits model
     */
    splits: runtime.JsonValue
    /**
     * SHA1
     */
    replayHash: string | null
    /**
     * Flags are all the styles are run qualifies for. A styled run may qualify
     * for multiple leaderboards, and an separate entry is made for each.
     * For example, a sideways surf run (for some track) would be added to the
     * sideways leaderboard and unstyled leaderboard. This field is used to "tag"
     * runs one leaderboard as also qualifying for another, e.g. the sideways
     * run would get a "Sideways" tag on the unstyled leaderboard.
     */
    flags: number[]
    rank: number
    createdAt: Date
    pastRunID: bigint | null
  }, ExtArgs["result"]["leaderboardRun"]>
  composites: {}
}

export type LeaderboardRunGetPayload<S extends boolean | null | undefined | LeaderboardRunDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload, S>

export type LeaderboardRunCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LeaderboardRunFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LeaderboardRunCountAggregateInputType | true
  }

export interface LeaderboardRunDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaderboardRun'], meta: { name: 'LeaderboardRun' } }
  /**
   * Find zero or one LeaderboardRun that matches the filter.
   * @param {LeaderboardRunFindUniqueArgs} args - Arguments to find a LeaderboardRun
   * @example
   * // Get one LeaderboardRun
   * const leaderboardRun = await prisma.leaderboardRun.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LeaderboardRunFindUniqueArgs>(args: Prisma.SelectSubset<T, LeaderboardRunFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LeaderboardRun that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LeaderboardRunFindUniqueOrThrowArgs} args - Arguments to find a LeaderboardRun
   * @example
   * // Get one LeaderboardRun
   * const leaderboardRun = await prisma.leaderboardRun.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LeaderboardRunFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LeaderboardRunFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LeaderboardRun that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardRunFindFirstArgs} args - Arguments to find a LeaderboardRun
   * @example
   * // Get one LeaderboardRun
   * const leaderboardRun = await prisma.leaderboardRun.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LeaderboardRunFindFirstArgs>(args?: Prisma.SelectSubset<T, LeaderboardRunFindFirstArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LeaderboardRun that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardRunFindFirstOrThrowArgs} args - Arguments to find a LeaderboardRun
   * @example
   * // Get one LeaderboardRun
   * const leaderboardRun = await prisma.leaderboardRun.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LeaderboardRunFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LeaderboardRunFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LeaderboardRuns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardRunFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LeaderboardRuns
   * const leaderboardRuns = await prisma.leaderboardRun.findMany()
   * 
   * // Get first 10 LeaderboardRuns
   * const leaderboardRuns = await prisma.leaderboardRun.findMany({ take: 10 })
   * 
   * // Only select the `userID`
   * const leaderboardRunWithUserIDOnly = await prisma.leaderboardRun.findMany({ select: { userID: true } })
   * 
   */
  findMany<T extends LeaderboardRunFindManyArgs>(args?: Prisma.SelectSubset<T, LeaderboardRunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LeaderboardRun.
   * @param {LeaderboardRunCreateArgs} args - Arguments to create a LeaderboardRun.
   * @example
   * // Create one LeaderboardRun
   * const LeaderboardRun = await prisma.leaderboardRun.create({
   *   data: {
   *     // ... data to create a LeaderboardRun
   *   }
   * })
   * 
   */
  create<T extends LeaderboardRunCreateArgs>(args: Prisma.SelectSubset<T, LeaderboardRunCreateArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LeaderboardRuns.
   * @param {LeaderboardRunCreateManyArgs} args - Arguments to create many LeaderboardRuns.
   * @example
   * // Create many LeaderboardRuns
   * const leaderboardRun = await prisma.leaderboardRun.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LeaderboardRunCreateManyArgs>(args?: Prisma.SelectSubset<T, LeaderboardRunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LeaderboardRuns and returns the data saved in the database.
   * @param {LeaderboardRunCreateManyAndReturnArgs} args - Arguments to create many LeaderboardRuns.
   * @example
   * // Create many LeaderboardRuns
   * const leaderboardRun = await prisma.leaderboardRun.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LeaderboardRuns and only return the `userID`
   * const leaderboardRunWithUserIDOnly = await prisma.leaderboardRun.createManyAndReturn({
   *   select: { userID: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LeaderboardRunCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LeaderboardRunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LeaderboardRun.
   * @param {LeaderboardRunDeleteArgs} args - Arguments to delete one LeaderboardRun.
   * @example
   * // Delete one LeaderboardRun
   * const LeaderboardRun = await prisma.leaderboardRun.delete({
   *   where: {
   *     // ... filter to delete one LeaderboardRun
   *   }
   * })
   * 
   */
  delete<T extends LeaderboardRunDeleteArgs>(args: Prisma.SelectSubset<T, LeaderboardRunDeleteArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LeaderboardRun.
   * @param {LeaderboardRunUpdateArgs} args - Arguments to update one LeaderboardRun.
   * @example
   * // Update one LeaderboardRun
   * const leaderboardRun = await prisma.leaderboardRun.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LeaderboardRunUpdateArgs>(args: Prisma.SelectSubset<T, LeaderboardRunUpdateArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LeaderboardRuns.
   * @param {LeaderboardRunDeleteManyArgs} args - Arguments to filter LeaderboardRuns to delete.
   * @example
   * // Delete a few LeaderboardRuns
   * const { count } = await prisma.leaderboardRun.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LeaderboardRunDeleteManyArgs>(args?: Prisma.SelectSubset<T, LeaderboardRunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LeaderboardRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardRunUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LeaderboardRuns
   * const leaderboardRun = await prisma.leaderboardRun.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LeaderboardRunUpdateManyArgs>(args: Prisma.SelectSubset<T, LeaderboardRunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LeaderboardRuns and returns the data updated in the database.
   * @param {LeaderboardRunUpdateManyAndReturnArgs} args - Arguments to update many LeaderboardRuns.
   * @example
   * // Update many LeaderboardRuns
   * const leaderboardRun = await prisma.leaderboardRun.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LeaderboardRuns and only return the `userID`
   * const leaderboardRunWithUserIDOnly = await prisma.leaderboardRun.updateManyAndReturn({
   *   select: { userID: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LeaderboardRunUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LeaderboardRunUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LeaderboardRun.
   * @param {LeaderboardRunUpsertArgs} args - Arguments to update or create a LeaderboardRun.
   * @example
   * // Update or create a LeaderboardRun
   * const leaderboardRun = await prisma.leaderboardRun.upsert({
   *   create: {
   *     // ... data to create a LeaderboardRun
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LeaderboardRun we want to update
   *   }
   * })
   */
  upsert<T extends LeaderboardRunUpsertArgs>(args: Prisma.SelectSubset<T, LeaderboardRunUpsertArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LeaderboardRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardRunCountArgs} args - Arguments to filter LeaderboardRuns to count.
   * @example
   * // Count the number of LeaderboardRuns
   * const count = await prisma.leaderboardRun.count({
   *   where: {
   *     // ... the filter for the LeaderboardRuns we want to count
   *   }
   * })
  **/
  count<T extends LeaderboardRunCountArgs>(
    args?: Prisma.Subset<T, LeaderboardRunCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LeaderboardRunCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LeaderboardRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LeaderboardRunAggregateArgs>(args: Prisma.Subset<T, LeaderboardRunAggregateArgs>): Prisma.PrismaPromise<GetLeaderboardRunAggregateType<T>>

  /**
   * Group by LeaderboardRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardRunGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LeaderboardRunGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LeaderboardRunGroupByArgs['orderBy'] }
      : { orderBy?: LeaderboardRunGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LeaderboardRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaderboardRunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LeaderboardRun model
 */
readonly fields: LeaderboardRunFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LeaderboardRun.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LeaderboardRunClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  leaderboard<T extends Prisma.LeaderboardDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LeaderboardDefaultArgs<ExtArgs>>): Prisma.Prisma__LeaderboardClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  pastRun<T extends Prisma.LeaderboardRun$pastRunArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LeaderboardRun$pastRunArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LeaderboardRun model
 */
export interface LeaderboardRunFieldRefs {
  readonly userID: Prisma.FieldRef<"LeaderboardRun", 'Int'>
  readonly mapID: Prisma.FieldRef<"LeaderboardRun", 'Int'>
  readonly gamemode: Prisma.FieldRef<"LeaderboardRun", 'Int'>
  readonly trackType: Prisma.FieldRef<"LeaderboardRun", 'Int'>
  readonly trackNum: Prisma.FieldRef<"LeaderboardRun", 'Int'>
  readonly style: Prisma.FieldRef<"LeaderboardRun", 'Int'>
  readonly time: Prisma.FieldRef<"LeaderboardRun", 'Float'>
  readonly splits: Prisma.FieldRef<"LeaderboardRun", 'Json'>
  readonly replayHash: Prisma.FieldRef<"LeaderboardRun", 'String'>
  readonly flags: Prisma.FieldRef<"LeaderboardRun", 'Int[]'>
  readonly rank: Prisma.FieldRef<"LeaderboardRun", 'Int'>
  readonly createdAt: Prisma.FieldRef<"LeaderboardRun", 'DateTime'>
  readonly pastRunID: Prisma.FieldRef<"LeaderboardRun", 'BigInt'>
}
    

// Custom InputTypes
/**
 * LeaderboardRun findUnique
 */
export type LeaderboardRunFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * Filter, which LeaderboardRun to fetch.
   */
  where: Prisma.LeaderboardRunWhereUniqueInput
}

/**
 * LeaderboardRun findUniqueOrThrow
 */
export type LeaderboardRunFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * Filter, which LeaderboardRun to fetch.
   */
  where: Prisma.LeaderboardRunWhereUniqueInput
}

/**
 * LeaderboardRun findFirst
 */
export type LeaderboardRunFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * Filter, which LeaderboardRun to fetch.
   */
  where?: Prisma.LeaderboardRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderboardRuns to fetch.
   */
  orderBy?: Prisma.LeaderboardRunOrderByWithRelationInput | Prisma.LeaderboardRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LeaderboardRuns.
   */
  cursor?: Prisma.LeaderboardRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderboardRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderboardRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LeaderboardRuns.
   */
  distinct?: Prisma.LeaderboardRunScalarFieldEnum | Prisma.LeaderboardRunScalarFieldEnum[]
}

/**
 * LeaderboardRun findFirstOrThrow
 */
export type LeaderboardRunFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * Filter, which LeaderboardRun to fetch.
   */
  where?: Prisma.LeaderboardRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderboardRuns to fetch.
   */
  orderBy?: Prisma.LeaderboardRunOrderByWithRelationInput | Prisma.LeaderboardRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LeaderboardRuns.
   */
  cursor?: Prisma.LeaderboardRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderboardRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderboardRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LeaderboardRuns.
   */
  distinct?: Prisma.LeaderboardRunScalarFieldEnum | Prisma.LeaderboardRunScalarFieldEnum[]
}

/**
 * LeaderboardRun findMany
 */
export type LeaderboardRunFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * Filter, which LeaderboardRuns to fetch.
   */
  where?: Prisma.LeaderboardRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LeaderboardRuns to fetch.
   */
  orderBy?: Prisma.LeaderboardRunOrderByWithRelationInput | Prisma.LeaderboardRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LeaderboardRuns.
   */
  cursor?: Prisma.LeaderboardRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LeaderboardRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LeaderboardRuns.
   */
  skip?: number
  distinct?: Prisma.LeaderboardRunScalarFieldEnum | Prisma.LeaderboardRunScalarFieldEnum[]
}

/**
 * LeaderboardRun create
 */
export type LeaderboardRunCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * The data needed to create a LeaderboardRun.
   */
  data: Prisma.XOR<Prisma.LeaderboardRunCreateInput, Prisma.LeaderboardRunUncheckedCreateInput>
}

/**
 * LeaderboardRun createMany
 */
export type LeaderboardRunCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LeaderboardRuns.
   */
  data: Prisma.LeaderboardRunCreateManyInput | Prisma.LeaderboardRunCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LeaderboardRun createManyAndReturn
 */
export type LeaderboardRunCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * The data used to create many LeaderboardRuns.
   */
  data: Prisma.LeaderboardRunCreateManyInput | Prisma.LeaderboardRunCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * LeaderboardRun update
 */
export type LeaderboardRunUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * The data needed to update a LeaderboardRun.
   */
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateInput, Prisma.LeaderboardRunUncheckedUpdateInput>
  /**
   * Choose, which LeaderboardRun to update.
   */
  where: Prisma.LeaderboardRunWhereUniqueInput
}

/**
 * LeaderboardRun updateMany
 */
export type LeaderboardRunUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LeaderboardRuns.
   */
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateManyMutationInput, Prisma.LeaderboardRunUncheckedUpdateManyInput>
  /**
   * Filter which LeaderboardRuns to update
   */
  where?: Prisma.LeaderboardRunWhereInput
  /**
   * Limit how many LeaderboardRuns to update.
   */
  limit?: number
}

/**
 * LeaderboardRun updateManyAndReturn
 */
export type LeaderboardRunUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * The data used to update LeaderboardRuns.
   */
  data: Prisma.XOR<Prisma.LeaderboardRunUpdateManyMutationInput, Prisma.LeaderboardRunUncheckedUpdateManyInput>
  /**
   * Filter which LeaderboardRuns to update
   */
  where?: Prisma.LeaderboardRunWhereInput
  /**
   * Limit how many LeaderboardRuns to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * LeaderboardRun upsert
 */
export type LeaderboardRunUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * The filter to search for the LeaderboardRun to update in case it exists.
   */
  where: Prisma.LeaderboardRunWhereUniqueInput
  /**
   * In case the LeaderboardRun found by the `where` argument doesn't exist, create a new LeaderboardRun with this data.
   */
  create: Prisma.XOR<Prisma.LeaderboardRunCreateInput, Prisma.LeaderboardRunUncheckedCreateInput>
  /**
   * In case the LeaderboardRun was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LeaderboardRunUpdateInput, Prisma.LeaderboardRunUncheckedUpdateInput>
}

/**
 * LeaderboardRun delete
 */
export type LeaderboardRunDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  /**
   * Filter which LeaderboardRun to delete.
   */
  where: Prisma.LeaderboardRunWhereUniqueInput
}

/**
 * LeaderboardRun deleteMany
 */
export type LeaderboardRunDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LeaderboardRuns to delete
   */
  where?: Prisma.LeaderboardRunWhereInput
  /**
   * Limit how many LeaderboardRuns to delete.
   */
  limit?: number
}

/**
 * LeaderboardRun.pastRun
 */
export type LeaderboardRun$pastRunArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  where?: Prisma.PastRunWhereInput
}

/**
 * LeaderboardRun without action
 */
export type LeaderboardRunDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
}
