
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapSubmissionDate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapSubmissionDate
 * 
 */
export type MapSubmissionDateModel = runtime.Types.Result.DefaultSelection<Prisma.$MapSubmissionDatePayload>

export type AggregateMapSubmissionDate = {
  _count: MapSubmissionDateCountAggregateOutputType | null
  _avg: MapSubmissionDateAvgAggregateOutputType | null
  _sum: MapSubmissionDateSumAggregateOutputType | null
  _min: MapSubmissionDateMinAggregateOutputType | null
  _max: MapSubmissionDateMaxAggregateOutputType | null
}

export type MapSubmissionDateAvgAggregateOutputType = {
  id: number | null
  status: number | null
  userID: number | null
  submissionMapID: number | null
}

export type MapSubmissionDateSumAggregateOutputType = {
  id: number | null
  status: number | null
  userID: number | null
  submissionMapID: number | null
}

export type MapSubmissionDateMinAggregateOutputType = {
  id: number | null
  status: number | null
  date: Date | null
  userID: number | null
  submissionMapID: number | null
}

export type MapSubmissionDateMaxAggregateOutputType = {
  id: number | null
  status: number | null
  date: Date | null
  userID: number | null
  submissionMapID: number | null
}

export type MapSubmissionDateCountAggregateOutputType = {
  id: number
  status: number
  date: number
  userID: number
  submissionMapID: number
  _all: number
}


export type MapSubmissionDateAvgAggregateInputType = {
  id?: true
  status?: true
  userID?: true
  submissionMapID?: true
}

export type MapSubmissionDateSumAggregateInputType = {
  id?: true
  status?: true
  userID?: true
  submissionMapID?: true
}

export type MapSubmissionDateMinAggregateInputType = {
  id?: true
  status?: true
  date?: true
  userID?: true
  submissionMapID?: true
}

export type MapSubmissionDateMaxAggregateInputType = {
  id?: true
  status?: true
  date?: true
  userID?: true
  submissionMapID?: true
}

export type MapSubmissionDateCountAggregateInputType = {
  id?: true
  status?: true
  date?: true
  userID?: true
  submissionMapID?: true
  _all?: true
}

export type MapSubmissionDateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapSubmissionDate to aggregate.
   */
  where?: Prisma.MapSubmissionDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissionDates to fetch.
   */
  orderBy?: Prisma.MapSubmissionDateOrderByWithRelationInput | Prisma.MapSubmissionDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapSubmissionDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissionDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissionDates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapSubmissionDates
  **/
  _count?: true | MapSubmissionDateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapSubmissionDateAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapSubmissionDateSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapSubmissionDateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapSubmissionDateMaxAggregateInputType
}

export type GetMapSubmissionDateAggregateType<T extends MapSubmissionDateAggregateArgs> = {
      [P in keyof T & keyof AggregateMapSubmissionDate]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapSubmissionDate[P]>
    : Prisma.GetScalarType<T[P], AggregateMapSubmissionDate[P]>
}




export type MapSubmissionDateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapSubmissionDateWhereInput
  orderBy?: Prisma.MapSubmissionDateOrderByWithAggregationInput | Prisma.MapSubmissionDateOrderByWithAggregationInput[]
  by: Prisma.MapSubmissionDateScalarFieldEnum[] | Prisma.MapSubmissionDateScalarFieldEnum
  having?: Prisma.MapSubmissionDateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapSubmissionDateCountAggregateInputType | true
  _avg?: MapSubmissionDateAvgAggregateInputType
  _sum?: MapSubmissionDateSumAggregateInputType
  _min?: MapSubmissionDateMinAggregateInputType
  _max?: MapSubmissionDateMaxAggregateInputType
}

export type MapSubmissionDateGroupByOutputType = {
  id: number
  status: number
  date: Date
  userID: number | null
  submissionMapID: number
  _count: MapSubmissionDateCountAggregateOutputType | null
  _avg: MapSubmissionDateAvgAggregateOutputType | null
  _sum: MapSubmissionDateSumAggregateOutputType | null
  _min: MapSubmissionDateMinAggregateOutputType | null
  _max: MapSubmissionDateMaxAggregateOutputType | null
}

type GetMapSubmissionDateGroupByPayload<T extends MapSubmissionDateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapSubmissionDateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapSubmissionDateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapSubmissionDateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapSubmissionDateGroupByOutputType[P]>
      }
    >
  >



export type MapSubmissionDateWhereInput = {
  AND?: Prisma.MapSubmissionDateWhereInput | Prisma.MapSubmissionDateWhereInput[]
  OR?: Prisma.MapSubmissionDateWhereInput[]
  NOT?: Prisma.MapSubmissionDateWhereInput | Prisma.MapSubmissionDateWhereInput[]
  id?: Prisma.IntFilter<"MapSubmissionDate"> | number
  status?: Prisma.IntFilter<"MapSubmissionDate"> | number
  date?: Prisma.DateTimeFilter<"MapSubmissionDate"> | Date | string
  userID?: Prisma.IntNullableFilter<"MapSubmissionDate"> | number | null
  submissionMapID?: Prisma.IntFilter<"MapSubmissionDate"> | number
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  submission?: Prisma.XOR<Prisma.MapSubmissionScalarRelationFilter, Prisma.MapSubmissionWhereInput>
}

export type MapSubmissionDateOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userID?: Prisma.SortOrderInput | Prisma.SortOrder
  submissionMapID?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  submission?: Prisma.MapSubmissionOrderByWithRelationInput
}

export type MapSubmissionDateWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MapSubmissionDateWhereInput | Prisma.MapSubmissionDateWhereInput[]
  OR?: Prisma.MapSubmissionDateWhereInput[]
  NOT?: Prisma.MapSubmissionDateWhereInput | Prisma.MapSubmissionDateWhereInput[]
  status?: Prisma.IntFilter<"MapSubmissionDate"> | number
  date?: Prisma.DateTimeFilter<"MapSubmissionDate"> | Date | string
  userID?: Prisma.IntNullableFilter<"MapSubmissionDate"> | number | null
  submissionMapID?: Prisma.IntFilter<"MapSubmissionDate"> | number
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  submission?: Prisma.XOR<Prisma.MapSubmissionScalarRelationFilter, Prisma.MapSubmissionWhereInput>
}, "id">

export type MapSubmissionDateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userID?: Prisma.SortOrderInput | Prisma.SortOrder
  submissionMapID?: Prisma.SortOrder
  _count?: Prisma.MapSubmissionDateCountOrderByAggregateInput
  _avg?: Prisma.MapSubmissionDateAvgOrderByAggregateInput
  _max?: Prisma.MapSubmissionDateMaxOrderByAggregateInput
  _min?: Prisma.MapSubmissionDateMinOrderByAggregateInput
  _sum?: Prisma.MapSubmissionDateSumOrderByAggregateInput
}

export type MapSubmissionDateScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapSubmissionDateScalarWhereWithAggregatesInput | Prisma.MapSubmissionDateScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapSubmissionDateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapSubmissionDateScalarWhereWithAggregatesInput | Prisma.MapSubmissionDateScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MapSubmissionDate"> | number
  status?: Prisma.IntWithAggregatesFilter<"MapSubmissionDate"> | number
  date?: Prisma.DateTimeWithAggregatesFilter<"MapSubmissionDate"> | Date | string
  userID?: Prisma.IntNullableWithAggregatesFilter<"MapSubmissionDate"> | number | null
  submissionMapID?: Prisma.IntWithAggregatesFilter<"MapSubmissionDate"> | number
}

export type MapSubmissionDateCreateInput = {
  status: number
  date?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutSubmittedMapDatesInput
  submission: Prisma.MapSubmissionCreateNestedOneWithoutDatesInput
}

export type MapSubmissionDateUncheckedCreateInput = {
  id?: number
  status: number
  date?: Date | string
  userID?: number | null
  submissionMapID: number
}

export type MapSubmissionDateUpdateInput = {
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutSubmittedMapDatesNestedInput
  submission?: Prisma.MapSubmissionUpdateOneRequiredWithoutDatesNestedInput
}

export type MapSubmissionDateUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  submissionMapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapSubmissionDateCreateManyInput = {
  id?: number
  status: number
  date?: Date | string
  userID?: number | null
  submissionMapID: number
}

export type MapSubmissionDateUpdateManyMutationInput = {
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapSubmissionDateUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  submissionMapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapSubmissionDateListRelationFilter = {
  every?: Prisma.MapSubmissionDateWhereInput
  some?: Prisma.MapSubmissionDateWhereInput
  none?: Prisma.MapSubmissionDateWhereInput
}

export type MapSubmissionDateOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapSubmissionDateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  submissionMapID?: Prisma.SortOrder
}

export type MapSubmissionDateAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  submissionMapID?: Prisma.SortOrder
}

export type MapSubmissionDateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  submissionMapID?: Prisma.SortOrder
}

export type MapSubmissionDateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  submissionMapID?: Prisma.SortOrder
}

export type MapSubmissionDateSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  submissionMapID?: Prisma.SortOrder
}

export type MapSubmissionDateCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutUserInput, Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput> | Prisma.MapSubmissionDateCreateWithoutUserInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput | Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapSubmissionDateCreateManyUserInputEnvelope
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
}

export type MapSubmissionDateUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutUserInput, Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput> | Prisma.MapSubmissionDateCreateWithoutUserInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput | Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapSubmissionDateCreateManyUserInputEnvelope
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
}

export type MapSubmissionDateUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutUserInput, Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput> | Prisma.MapSubmissionDateCreateWithoutUserInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput | Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutUserInput | Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapSubmissionDateCreateManyUserInputEnvelope
  set?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  disconnect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  delete?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  update?: Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutUserInput | Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapSubmissionDateUpdateManyWithWhereWithoutUserInput | Prisma.MapSubmissionDateUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapSubmissionDateScalarWhereInput | Prisma.MapSubmissionDateScalarWhereInput[]
}

export type MapSubmissionDateUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutUserInput, Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput> | Prisma.MapSubmissionDateCreateWithoutUserInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput | Prisma.MapSubmissionDateCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutUserInput | Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapSubmissionDateCreateManyUserInputEnvelope
  set?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  disconnect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  delete?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  update?: Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutUserInput | Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapSubmissionDateUpdateManyWithWhereWithoutUserInput | Prisma.MapSubmissionDateUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapSubmissionDateScalarWhereInput | Prisma.MapSubmissionDateScalarWhereInput[]
}

export type MapSubmissionDateCreateNestedManyWithoutSubmissionInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput> | Prisma.MapSubmissionDateCreateWithoutSubmissionInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput | Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput[]
  createMany?: Prisma.MapSubmissionDateCreateManySubmissionInputEnvelope
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
}

export type MapSubmissionDateUncheckedCreateNestedManyWithoutSubmissionInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput> | Prisma.MapSubmissionDateCreateWithoutSubmissionInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput | Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput[]
  createMany?: Prisma.MapSubmissionDateCreateManySubmissionInputEnvelope
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
}

export type MapSubmissionDateUpdateManyWithoutSubmissionNestedInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput> | Prisma.MapSubmissionDateCreateWithoutSubmissionInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput | Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput[]
  upsert?: Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutSubmissionInput | Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutSubmissionInput[]
  createMany?: Prisma.MapSubmissionDateCreateManySubmissionInputEnvelope
  set?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  disconnect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  delete?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  update?: Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutSubmissionInput | Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutSubmissionInput[]
  updateMany?: Prisma.MapSubmissionDateUpdateManyWithWhereWithoutSubmissionInput | Prisma.MapSubmissionDateUpdateManyWithWhereWithoutSubmissionInput[]
  deleteMany?: Prisma.MapSubmissionDateScalarWhereInput | Prisma.MapSubmissionDateScalarWhereInput[]
}

export type MapSubmissionDateUncheckedUpdateManyWithoutSubmissionNestedInput = {
  create?: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput> | Prisma.MapSubmissionDateCreateWithoutSubmissionInput[] | Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput[]
  connectOrCreate?: Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput | Prisma.MapSubmissionDateCreateOrConnectWithoutSubmissionInput[]
  upsert?: Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutSubmissionInput | Prisma.MapSubmissionDateUpsertWithWhereUniqueWithoutSubmissionInput[]
  createMany?: Prisma.MapSubmissionDateCreateManySubmissionInputEnvelope
  set?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  disconnect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  delete?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  connect?: Prisma.MapSubmissionDateWhereUniqueInput | Prisma.MapSubmissionDateWhereUniqueInput[]
  update?: Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutSubmissionInput | Prisma.MapSubmissionDateUpdateWithWhereUniqueWithoutSubmissionInput[]
  updateMany?: Prisma.MapSubmissionDateUpdateManyWithWhereWithoutSubmissionInput | Prisma.MapSubmissionDateUpdateManyWithWhereWithoutSubmissionInput[]
  deleteMany?: Prisma.MapSubmissionDateScalarWhereInput | Prisma.MapSubmissionDateScalarWhereInput[]
}

export type MapSubmissionDateCreateWithoutUserInput = {
  status: number
  date?: Date | string
  submission: Prisma.MapSubmissionCreateNestedOneWithoutDatesInput
}

export type MapSubmissionDateUncheckedCreateWithoutUserInput = {
  id?: number
  status: number
  date?: Date | string
  submissionMapID: number
}

export type MapSubmissionDateCreateOrConnectWithoutUserInput = {
  where: Prisma.MapSubmissionDateWhereUniqueInput
  create: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutUserInput, Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput>
}

export type MapSubmissionDateCreateManyUserInputEnvelope = {
  data: Prisma.MapSubmissionDateCreateManyUserInput | Prisma.MapSubmissionDateCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MapSubmissionDateUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapSubmissionDateWhereUniqueInput
  update: Prisma.XOR<Prisma.MapSubmissionDateUpdateWithoutUserInput, Prisma.MapSubmissionDateUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutUserInput, Prisma.MapSubmissionDateUncheckedCreateWithoutUserInput>
}

export type MapSubmissionDateUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapSubmissionDateWhereUniqueInput
  data: Prisma.XOR<Prisma.MapSubmissionDateUpdateWithoutUserInput, Prisma.MapSubmissionDateUncheckedUpdateWithoutUserInput>
}

export type MapSubmissionDateUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MapSubmissionDateScalarWhereInput
  data: Prisma.XOR<Prisma.MapSubmissionDateUpdateManyMutationInput, Prisma.MapSubmissionDateUncheckedUpdateManyWithoutUserInput>
}

export type MapSubmissionDateScalarWhereInput = {
  AND?: Prisma.MapSubmissionDateScalarWhereInput | Prisma.MapSubmissionDateScalarWhereInput[]
  OR?: Prisma.MapSubmissionDateScalarWhereInput[]
  NOT?: Prisma.MapSubmissionDateScalarWhereInput | Prisma.MapSubmissionDateScalarWhereInput[]
  id?: Prisma.IntFilter<"MapSubmissionDate"> | number
  status?: Prisma.IntFilter<"MapSubmissionDate"> | number
  date?: Prisma.DateTimeFilter<"MapSubmissionDate"> | Date | string
  userID?: Prisma.IntNullableFilter<"MapSubmissionDate"> | number | null
  submissionMapID?: Prisma.IntFilter<"MapSubmissionDate"> | number
}

export type MapSubmissionDateCreateWithoutSubmissionInput = {
  status: number
  date?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutSubmittedMapDatesInput
}

export type MapSubmissionDateUncheckedCreateWithoutSubmissionInput = {
  id?: number
  status: number
  date?: Date | string
  userID?: number | null
}

export type MapSubmissionDateCreateOrConnectWithoutSubmissionInput = {
  where: Prisma.MapSubmissionDateWhereUniqueInput
  create: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput>
}

export type MapSubmissionDateCreateManySubmissionInputEnvelope = {
  data: Prisma.MapSubmissionDateCreateManySubmissionInput | Prisma.MapSubmissionDateCreateManySubmissionInput[]
  skipDuplicates?: boolean
}

export type MapSubmissionDateUpsertWithWhereUniqueWithoutSubmissionInput = {
  where: Prisma.MapSubmissionDateWhereUniqueInput
  update: Prisma.XOR<Prisma.MapSubmissionDateUpdateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedUpdateWithoutSubmissionInput>
  create: Prisma.XOR<Prisma.MapSubmissionDateCreateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedCreateWithoutSubmissionInput>
}

export type MapSubmissionDateUpdateWithWhereUniqueWithoutSubmissionInput = {
  where: Prisma.MapSubmissionDateWhereUniqueInput
  data: Prisma.XOR<Prisma.MapSubmissionDateUpdateWithoutSubmissionInput, Prisma.MapSubmissionDateUncheckedUpdateWithoutSubmissionInput>
}

export type MapSubmissionDateUpdateManyWithWhereWithoutSubmissionInput = {
  where: Prisma.MapSubmissionDateScalarWhereInput
  data: Prisma.XOR<Prisma.MapSubmissionDateUpdateManyMutationInput, Prisma.MapSubmissionDateUncheckedUpdateManyWithoutSubmissionInput>
}

export type MapSubmissionDateCreateManyUserInput = {
  id?: number
  status: number
  date?: Date | string
  submissionMapID: number
}

export type MapSubmissionDateUpdateWithoutUserInput = {
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submission?: Prisma.MapSubmissionUpdateOneRequiredWithoutDatesNestedInput
}

export type MapSubmissionDateUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submissionMapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapSubmissionDateUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submissionMapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapSubmissionDateCreateManySubmissionInput = {
  id?: number
  status: number
  date?: Date | string
  userID?: number | null
}

export type MapSubmissionDateUpdateWithoutSubmissionInput = {
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutSubmittedMapDatesNestedInput
}

export type MapSubmissionDateUncheckedUpdateWithoutSubmissionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type MapSubmissionDateUncheckedUpdateManyWithoutSubmissionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.IntFieldUpdateOperationsInput | number
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type MapSubmissionDateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  date?: boolean
  userID?: boolean
  submissionMapID?: boolean
  user?: boolean | Prisma.MapSubmissionDate$userArgs<ExtArgs>
  submission?: boolean | Prisma.MapSubmissionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapSubmissionDate"]>

export type MapSubmissionDateSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  date?: boolean
  userID?: boolean
  submissionMapID?: boolean
  user?: boolean | Prisma.MapSubmissionDate$userArgs<ExtArgs>
  submission?: boolean | Prisma.MapSubmissionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapSubmissionDate"]>

export type MapSubmissionDateSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  date?: boolean
  userID?: boolean
  submissionMapID?: boolean
  user?: boolean | Prisma.MapSubmissionDate$userArgs<ExtArgs>
  submission?: boolean | Prisma.MapSubmissionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapSubmissionDate"]>

export type MapSubmissionDateSelectScalar = {
  id?: boolean
  status?: boolean
  date?: boolean
  userID?: boolean
  submissionMapID?: boolean
}

export type MapSubmissionDateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "status" | "date" | "userID" | "submissionMapID", ExtArgs["result"]["mapSubmissionDate"]>
export type MapSubmissionDateInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.MapSubmissionDate$userArgs<ExtArgs>
  submission?: boolean | Prisma.MapSubmissionDefaultArgs<ExtArgs>
}
export type MapSubmissionDateIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.MapSubmissionDate$userArgs<ExtArgs>
  submission?: boolean | Prisma.MapSubmissionDefaultArgs<ExtArgs>
}
export type MapSubmissionDateIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.MapSubmissionDate$userArgs<ExtArgs>
  submission?: boolean | Prisma.MapSubmissionDefaultArgs<ExtArgs>
}

export type $MapSubmissionDatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapSubmissionDate"
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null
    submission: Prisma.$MapSubmissionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    /**
     * map-status.enum.ts
     */
    status: number
    date: Date
    userID: number | null
    submissionMapID: number
  }, ExtArgs["result"]["mapSubmissionDate"]>
  composites: {}
}

export type MapSubmissionDateGetPayload<S extends boolean | null | undefined | MapSubmissionDateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload, S>

export type MapSubmissionDateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapSubmissionDateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapSubmissionDateCountAggregateInputType | true
  }

export interface MapSubmissionDateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapSubmissionDate'], meta: { name: 'MapSubmissionDate' } }
  /**
   * Find zero or one MapSubmissionDate that matches the filter.
   * @param {MapSubmissionDateFindUniqueArgs} args - Arguments to find a MapSubmissionDate
   * @example
   * // Get one MapSubmissionDate
   * const mapSubmissionDate = await prisma.mapSubmissionDate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapSubmissionDateFindUniqueArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapSubmissionDate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapSubmissionDateFindUniqueOrThrowArgs} args - Arguments to find a MapSubmissionDate
   * @example
   * // Get one MapSubmissionDate
   * const mapSubmissionDate = await prisma.mapSubmissionDate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapSubmissionDateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapSubmissionDate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionDateFindFirstArgs} args - Arguments to find a MapSubmissionDate
   * @example
   * // Get one MapSubmissionDate
   * const mapSubmissionDate = await prisma.mapSubmissionDate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapSubmissionDateFindFirstArgs>(args?: Prisma.SelectSubset<T, MapSubmissionDateFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapSubmissionDate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionDateFindFirstOrThrowArgs} args - Arguments to find a MapSubmissionDate
   * @example
   * // Get one MapSubmissionDate
   * const mapSubmissionDate = await prisma.mapSubmissionDate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapSubmissionDateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapSubmissionDateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapSubmissionDates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionDateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapSubmissionDates
   * const mapSubmissionDates = await prisma.mapSubmissionDate.findMany()
   * 
   * // Get first 10 MapSubmissionDates
   * const mapSubmissionDates = await prisma.mapSubmissionDate.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mapSubmissionDateWithIdOnly = await prisma.mapSubmissionDate.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MapSubmissionDateFindManyArgs>(args?: Prisma.SelectSubset<T, MapSubmissionDateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapSubmissionDate.
   * @param {MapSubmissionDateCreateArgs} args - Arguments to create a MapSubmissionDate.
   * @example
   * // Create one MapSubmissionDate
   * const MapSubmissionDate = await prisma.mapSubmissionDate.create({
   *   data: {
   *     // ... data to create a MapSubmissionDate
   *   }
   * })
   * 
   */
  create<T extends MapSubmissionDateCreateArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateCreateArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapSubmissionDates.
   * @param {MapSubmissionDateCreateManyArgs} args - Arguments to create many MapSubmissionDates.
   * @example
   * // Create many MapSubmissionDates
   * const mapSubmissionDate = await prisma.mapSubmissionDate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapSubmissionDateCreateManyArgs>(args?: Prisma.SelectSubset<T, MapSubmissionDateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapSubmissionDates and returns the data saved in the database.
   * @param {MapSubmissionDateCreateManyAndReturnArgs} args - Arguments to create many MapSubmissionDates.
   * @example
   * // Create many MapSubmissionDates
   * const mapSubmissionDate = await prisma.mapSubmissionDate.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapSubmissionDates and only return the `id`
   * const mapSubmissionDateWithIdOnly = await prisma.mapSubmissionDate.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapSubmissionDateCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapSubmissionDateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapSubmissionDate.
   * @param {MapSubmissionDateDeleteArgs} args - Arguments to delete one MapSubmissionDate.
   * @example
   * // Delete one MapSubmissionDate
   * const MapSubmissionDate = await prisma.mapSubmissionDate.delete({
   *   where: {
   *     // ... filter to delete one MapSubmissionDate
   *   }
   * })
   * 
   */
  delete<T extends MapSubmissionDateDeleteArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateDeleteArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapSubmissionDate.
   * @param {MapSubmissionDateUpdateArgs} args - Arguments to update one MapSubmissionDate.
   * @example
   * // Update one MapSubmissionDate
   * const mapSubmissionDate = await prisma.mapSubmissionDate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapSubmissionDateUpdateArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateUpdateArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapSubmissionDates.
   * @param {MapSubmissionDateDeleteManyArgs} args - Arguments to filter MapSubmissionDates to delete.
   * @example
   * // Delete a few MapSubmissionDates
   * const { count } = await prisma.mapSubmissionDate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapSubmissionDateDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapSubmissionDateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapSubmissionDates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionDateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapSubmissionDates
   * const mapSubmissionDate = await prisma.mapSubmissionDate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapSubmissionDateUpdateManyArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapSubmissionDates and returns the data updated in the database.
   * @param {MapSubmissionDateUpdateManyAndReturnArgs} args - Arguments to update many MapSubmissionDates.
   * @example
   * // Update many MapSubmissionDates
   * const mapSubmissionDate = await prisma.mapSubmissionDate.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapSubmissionDates and only return the `id`
   * const mapSubmissionDateWithIdOnly = await prisma.mapSubmissionDate.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapSubmissionDateUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapSubmissionDate.
   * @param {MapSubmissionDateUpsertArgs} args - Arguments to update or create a MapSubmissionDate.
   * @example
   * // Update or create a MapSubmissionDate
   * const mapSubmissionDate = await prisma.mapSubmissionDate.upsert({
   *   create: {
   *     // ... data to create a MapSubmissionDate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapSubmissionDate we want to update
   *   }
   * })
   */
  upsert<T extends MapSubmissionDateUpsertArgs>(args: Prisma.SelectSubset<T, MapSubmissionDateUpsertArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionDateClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionDatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapSubmissionDates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionDateCountArgs} args - Arguments to filter MapSubmissionDates to count.
   * @example
   * // Count the number of MapSubmissionDates
   * const count = await prisma.mapSubmissionDate.count({
   *   where: {
   *     // ... the filter for the MapSubmissionDates we want to count
   *   }
   * })
  **/
  count<T extends MapSubmissionDateCountArgs>(
    args?: Prisma.Subset<T, MapSubmissionDateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapSubmissionDateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapSubmissionDate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionDateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapSubmissionDateAggregateArgs>(args: Prisma.Subset<T, MapSubmissionDateAggregateArgs>): Prisma.PrismaPromise<GetMapSubmissionDateAggregateType<T>>

  /**
   * Group by MapSubmissionDate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapSubmissionDateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapSubmissionDateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapSubmissionDateGroupByArgs['orderBy'] }
      : { orderBy?: MapSubmissionDateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapSubmissionDateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapSubmissionDateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapSubmissionDate model
 */
readonly fields: MapSubmissionDateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapSubmissionDate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapSubmissionDateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.MapSubmissionDate$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapSubmissionDate$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  submission<T extends Prisma.MapSubmissionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MapSubmissionDefaultArgs<ExtArgs>>): Prisma.Prisma__MapSubmissionClient<runtime.Types.Result.GetResult<Prisma.$MapSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapSubmissionDate model
 */
export interface MapSubmissionDateFieldRefs {
  readonly id: Prisma.FieldRef<"MapSubmissionDate", 'Int'>
  readonly status: Prisma.FieldRef<"MapSubmissionDate", 'Int'>
  readonly date: Prisma.FieldRef<"MapSubmissionDate", 'DateTime'>
  readonly userID: Prisma.FieldRef<"MapSubmissionDate", 'Int'>
  readonly submissionMapID: Prisma.FieldRef<"MapSubmissionDate", 'Int'>
}
    

// Custom InputTypes
/**
 * MapSubmissionDate findUnique
 */
export type MapSubmissionDateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmissionDate to fetch.
   */
  where: Prisma.MapSubmissionDateWhereUniqueInput
}

/**
 * MapSubmissionDate findUniqueOrThrow
 */
export type MapSubmissionDateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmissionDate to fetch.
   */
  where: Prisma.MapSubmissionDateWhereUniqueInput
}

/**
 * MapSubmissionDate findFirst
 */
export type MapSubmissionDateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmissionDate to fetch.
   */
  where?: Prisma.MapSubmissionDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissionDates to fetch.
   */
  orderBy?: Prisma.MapSubmissionDateOrderByWithRelationInput | Prisma.MapSubmissionDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapSubmissionDates.
   */
  cursor?: Prisma.MapSubmissionDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissionDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissionDates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapSubmissionDates.
   */
  distinct?: Prisma.MapSubmissionDateScalarFieldEnum | Prisma.MapSubmissionDateScalarFieldEnum[]
}

/**
 * MapSubmissionDate findFirstOrThrow
 */
export type MapSubmissionDateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmissionDate to fetch.
   */
  where?: Prisma.MapSubmissionDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissionDates to fetch.
   */
  orderBy?: Prisma.MapSubmissionDateOrderByWithRelationInput | Prisma.MapSubmissionDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapSubmissionDates.
   */
  cursor?: Prisma.MapSubmissionDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissionDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissionDates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapSubmissionDates.
   */
  distinct?: Prisma.MapSubmissionDateScalarFieldEnum | Prisma.MapSubmissionDateScalarFieldEnum[]
}

/**
 * MapSubmissionDate findMany
 */
export type MapSubmissionDateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * Filter, which MapSubmissionDates to fetch.
   */
  where?: Prisma.MapSubmissionDateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapSubmissionDates to fetch.
   */
  orderBy?: Prisma.MapSubmissionDateOrderByWithRelationInput | Prisma.MapSubmissionDateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapSubmissionDates.
   */
  cursor?: Prisma.MapSubmissionDateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapSubmissionDates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapSubmissionDates.
   */
  skip?: number
  distinct?: Prisma.MapSubmissionDateScalarFieldEnum | Prisma.MapSubmissionDateScalarFieldEnum[]
}

/**
 * MapSubmissionDate create
 */
export type MapSubmissionDateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * The data needed to create a MapSubmissionDate.
   */
  data: Prisma.XOR<Prisma.MapSubmissionDateCreateInput, Prisma.MapSubmissionDateUncheckedCreateInput>
}

/**
 * MapSubmissionDate createMany
 */
export type MapSubmissionDateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapSubmissionDates.
   */
  data: Prisma.MapSubmissionDateCreateManyInput | Prisma.MapSubmissionDateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapSubmissionDate createManyAndReturn
 */
export type MapSubmissionDateCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * The data used to create many MapSubmissionDates.
   */
  data: Prisma.MapSubmissionDateCreateManyInput | Prisma.MapSubmissionDateCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapSubmissionDate update
 */
export type MapSubmissionDateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * The data needed to update a MapSubmissionDate.
   */
  data: Prisma.XOR<Prisma.MapSubmissionDateUpdateInput, Prisma.MapSubmissionDateUncheckedUpdateInput>
  /**
   * Choose, which MapSubmissionDate to update.
   */
  where: Prisma.MapSubmissionDateWhereUniqueInput
}

/**
 * MapSubmissionDate updateMany
 */
export type MapSubmissionDateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapSubmissionDates.
   */
  data: Prisma.XOR<Prisma.MapSubmissionDateUpdateManyMutationInput, Prisma.MapSubmissionDateUncheckedUpdateManyInput>
  /**
   * Filter which MapSubmissionDates to update
   */
  where?: Prisma.MapSubmissionDateWhereInput
  /**
   * Limit how many MapSubmissionDates to update.
   */
  limit?: number
}

/**
 * MapSubmissionDate updateManyAndReturn
 */
export type MapSubmissionDateUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * The data used to update MapSubmissionDates.
   */
  data: Prisma.XOR<Prisma.MapSubmissionDateUpdateManyMutationInput, Prisma.MapSubmissionDateUncheckedUpdateManyInput>
  /**
   * Filter which MapSubmissionDates to update
   */
  where?: Prisma.MapSubmissionDateWhereInput
  /**
   * Limit how many MapSubmissionDates to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapSubmissionDate upsert
 */
export type MapSubmissionDateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * The filter to search for the MapSubmissionDate to update in case it exists.
   */
  where: Prisma.MapSubmissionDateWhereUniqueInput
  /**
   * In case the MapSubmissionDate found by the `where` argument doesn't exist, create a new MapSubmissionDate with this data.
   */
  create: Prisma.XOR<Prisma.MapSubmissionDateCreateInput, Prisma.MapSubmissionDateUncheckedCreateInput>
  /**
   * In case the MapSubmissionDate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapSubmissionDateUpdateInput, Prisma.MapSubmissionDateUncheckedUpdateInput>
}

/**
 * MapSubmissionDate delete
 */
export type MapSubmissionDateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
  /**
   * Filter which MapSubmissionDate to delete.
   */
  where: Prisma.MapSubmissionDateWhereUniqueInput
}

/**
 * MapSubmissionDate deleteMany
 */
export type MapSubmissionDateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapSubmissionDates to delete
   */
  where?: Prisma.MapSubmissionDateWhereInput
  /**
   * Limit how many MapSubmissionDates to delete.
   */
  limit?: number
}

/**
 * MapSubmissionDate.user
 */
export type MapSubmissionDate$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * MapSubmissionDate without action
 */
export type MapSubmissionDateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapSubmissionDate
   */
  select?: Prisma.MapSubmissionDateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapSubmissionDate
   */
  omit?: Prisma.MapSubmissionDateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapSubmissionDateInclude<ExtArgs> | null
}
