
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapInfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapInfo
 * 
 */
export type MapInfoModel = runtime.Types.Result.DefaultSelection<Prisma.$MapInfoPayload>

export type AggregateMapInfo = {
  _count: MapInfoCountAggregateOutputType | null
  _avg: MapInfoAvgAggregateOutputType | null
  _sum: MapInfoSumAggregateOutputType | null
  _min: MapInfoMinAggregateOutputType | null
  _max: MapInfoMaxAggregateOutputType | null
}

export type MapInfoAvgAggregateOutputType = {
  requiredGames: number | null
  mapID: number | null
}

export type MapInfoSumAggregateOutputType = {
  requiredGames: number[]
  mapID: number | null
}

export type MapInfoMinAggregateOutputType = {
  description: string | null
  youtubeID: string | null
  creationDate: Date | null
  approvedDate: Date | null
  mapID: number | null
}

export type MapInfoMaxAggregateOutputType = {
  description: string | null
  youtubeID: string | null
  creationDate: Date | null
  approvedDate: Date | null
  mapID: number | null
}

export type MapInfoCountAggregateOutputType = {
  description: number
  youtubeID: number
  creationDate: number
  approvedDate: number
  requiredGames: number
  mapID: number
  _all: number
}


export type MapInfoAvgAggregateInputType = {
  requiredGames?: true
  mapID?: true
}

export type MapInfoSumAggregateInputType = {
  requiredGames?: true
  mapID?: true
}

export type MapInfoMinAggregateInputType = {
  description?: true
  youtubeID?: true
  creationDate?: true
  approvedDate?: true
  mapID?: true
}

export type MapInfoMaxAggregateInputType = {
  description?: true
  youtubeID?: true
  creationDate?: true
  approvedDate?: true
  mapID?: true
}

export type MapInfoCountAggregateInputType = {
  description?: true
  youtubeID?: true
  creationDate?: true
  approvedDate?: true
  requiredGames?: true
  mapID?: true
  _all?: true
}

export type MapInfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapInfo to aggregate.
   */
  where?: Prisma.MapInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapInfos to fetch.
   */
  orderBy?: Prisma.MapInfoOrderByWithRelationInput | Prisma.MapInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapInfos
  **/
  _count?: true | MapInfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapInfoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapInfoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapInfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapInfoMaxAggregateInputType
}

export type GetMapInfoAggregateType<T extends MapInfoAggregateArgs> = {
      [P in keyof T & keyof AggregateMapInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateMapInfo[P]>
}




export type MapInfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapInfoWhereInput
  orderBy?: Prisma.MapInfoOrderByWithAggregationInput | Prisma.MapInfoOrderByWithAggregationInput[]
  by: Prisma.MapInfoScalarFieldEnum[] | Prisma.MapInfoScalarFieldEnum
  having?: Prisma.MapInfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapInfoCountAggregateInputType | true
  _avg?: MapInfoAvgAggregateInputType
  _sum?: MapInfoSumAggregateInputType
  _min?: MapInfoMinAggregateInputType
  _max?: MapInfoMaxAggregateInputType
}

export type MapInfoGroupByOutputType = {
  description: string
  youtubeID: string | null
  creationDate: Date
  approvedDate: Date | null
  requiredGames: number[]
  mapID: number
  _count: MapInfoCountAggregateOutputType | null
  _avg: MapInfoAvgAggregateOutputType | null
  _sum: MapInfoSumAggregateOutputType | null
  _min: MapInfoMinAggregateOutputType | null
  _max: MapInfoMaxAggregateOutputType | null
}

type GetMapInfoGroupByPayload<T extends MapInfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapInfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapInfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapInfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapInfoGroupByOutputType[P]>
      }
    >
  >



export type MapInfoWhereInput = {
  AND?: Prisma.MapInfoWhereInput | Prisma.MapInfoWhereInput[]
  OR?: Prisma.MapInfoWhereInput[]
  NOT?: Prisma.MapInfoWhereInput | Prisma.MapInfoWhereInput[]
  description?: Prisma.StringFilter<"MapInfo"> | string
  youtubeID?: Prisma.StringNullableFilter<"MapInfo"> | string | null
  creationDate?: Prisma.DateTimeFilter<"MapInfo"> | Date | string
  approvedDate?: Prisma.DateTimeNullableFilter<"MapInfo"> | Date | string | null
  requiredGames?: Prisma.IntNullableListFilter<"MapInfo">
  mapID?: Prisma.IntFilter<"MapInfo"> | number
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}

export type MapInfoOrderByWithRelationInput = {
  description?: Prisma.SortOrder
  youtubeID?: Prisma.SortOrderInput | Prisma.SortOrder
  creationDate?: Prisma.SortOrder
  approvedDate?: Prisma.SortOrderInput | Prisma.SortOrder
  requiredGames?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
}

export type MapInfoWhereUniqueInput = Prisma.AtLeast<{
  mapID?: number
  AND?: Prisma.MapInfoWhereInput | Prisma.MapInfoWhereInput[]
  OR?: Prisma.MapInfoWhereInput[]
  NOT?: Prisma.MapInfoWhereInput | Prisma.MapInfoWhereInput[]
  description?: Prisma.StringFilter<"MapInfo"> | string
  youtubeID?: Prisma.StringNullableFilter<"MapInfo"> | string | null
  creationDate?: Prisma.DateTimeFilter<"MapInfo"> | Date | string
  approvedDate?: Prisma.DateTimeNullableFilter<"MapInfo"> | Date | string | null
  requiredGames?: Prisma.IntNullableListFilter<"MapInfo">
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}, "mapID" | "mapID">

export type MapInfoOrderByWithAggregationInput = {
  description?: Prisma.SortOrder
  youtubeID?: Prisma.SortOrderInput | Prisma.SortOrder
  creationDate?: Prisma.SortOrder
  approvedDate?: Prisma.SortOrderInput | Prisma.SortOrder
  requiredGames?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  _count?: Prisma.MapInfoCountOrderByAggregateInput
  _avg?: Prisma.MapInfoAvgOrderByAggregateInput
  _max?: Prisma.MapInfoMaxOrderByAggregateInput
  _min?: Prisma.MapInfoMinOrderByAggregateInput
  _sum?: Prisma.MapInfoSumOrderByAggregateInput
}

export type MapInfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapInfoScalarWhereWithAggregatesInput | Prisma.MapInfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapInfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapInfoScalarWhereWithAggregatesInput | Prisma.MapInfoScalarWhereWithAggregatesInput[]
  description?: Prisma.StringWithAggregatesFilter<"MapInfo"> | string
  youtubeID?: Prisma.StringNullableWithAggregatesFilter<"MapInfo"> | string | null
  creationDate?: Prisma.DateTimeWithAggregatesFilter<"MapInfo"> | Date | string
  approvedDate?: Prisma.DateTimeNullableWithAggregatesFilter<"MapInfo"> | Date | string | null
  requiredGames?: Prisma.IntNullableListFilter<"MapInfo">
  mapID?: Prisma.IntWithAggregatesFilter<"MapInfo"> | number
}

export type MapInfoCreateInput = {
  description?: string
  youtubeID?: string | null
  creationDate: Date | string
  approvedDate?: Date | string | null
  requiredGames?: Prisma.MapInfoCreaterequiredGamesInput | number[]
  mmap: Prisma.MMapCreateNestedOneWithoutInfoInput
}

export type MapInfoUncheckedCreateInput = {
  description?: string
  youtubeID?: string | null
  creationDate: Date | string
  approvedDate?: Date | string | null
  requiredGames?: Prisma.MapInfoCreaterequiredGamesInput | number[]
  mapID: number
}

export type MapInfoUpdateInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  youtubeID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  requiredGames?: Prisma.MapInfoUpdaterequiredGamesInput | number[]
  mmap?: Prisma.MMapUpdateOneRequiredWithoutInfoNestedInput
}

export type MapInfoUncheckedUpdateInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  youtubeID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  requiredGames?: Prisma.MapInfoUpdaterequiredGamesInput | number[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapInfoCreateManyInput = {
  description?: string
  youtubeID?: string | null
  creationDate: Date | string
  approvedDate?: Date | string | null
  requiredGames?: Prisma.MapInfoCreaterequiredGamesInput | number[]
  mapID: number
}

export type MapInfoUpdateManyMutationInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  youtubeID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  requiredGames?: Prisma.MapInfoUpdaterequiredGamesInput | number[]
}

export type MapInfoUncheckedUpdateManyInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  youtubeID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  requiredGames?: Prisma.MapInfoUpdaterequiredGamesInput | number[]
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapInfoNullableScalarRelationFilter = {
  is?: Prisma.MapInfoWhereInput | null
  isNot?: Prisma.MapInfoWhereInput | null
}

export type IntNullableListFilter<$PrismaModel = never> = {
  equals?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel> | null
  has?: number | Prisma.IntFieldRefInput<$PrismaModel> | null
  hasEvery?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>
  hasSome?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type MapInfoCountOrderByAggregateInput = {
  description?: Prisma.SortOrder
  youtubeID?: Prisma.SortOrder
  creationDate?: Prisma.SortOrder
  approvedDate?: Prisma.SortOrder
  requiredGames?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapInfoAvgOrderByAggregateInput = {
  requiredGames?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapInfoMaxOrderByAggregateInput = {
  description?: Prisma.SortOrder
  youtubeID?: Prisma.SortOrder
  creationDate?: Prisma.SortOrder
  approvedDate?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapInfoMinOrderByAggregateInput = {
  description?: Prisma.SortOrder
  youtubeID?: Prisma.SortOrder
  creationDate?: Prisma.SortOrder
  approvedDate?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapInfoSumOrderByAggregateInput = {
  requiredGames?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapInfoCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapInfoCreateWithoutMmapInput, Prisma.MapInfoUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapInfoCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapInfoWhereUniqueInput
}

export type MapInfoUncheckedCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapInfoCreateWithoutMmapInput, Prisma.MapInfoUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapInfoCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapInfoWhereUniqueInput
}

export type MapInfoUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapInfoCreateWithoutMmapInput, Prisma.MapInfoUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapInfoCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapInfoUpsertWithoutMmapInput
  disconnect?: Prisma.MapInfoWhereInput | boolean
  delete?: Prisma.MapInfoWhereInput | boolean
  connect?: Prisma.MapInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapInfoUpdateToOneWithWhereWithoutMmapInput, Prisma.MapInfoUpdateWithoutMmapInput>, Prisma.MapInfoUncheckedUpdateWithoutMmapInput>
}

export type MapInfoUncheckedUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapInfoCreateWithoutMmapInput, Prisma.MapInfoUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapInfoCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapInfoUpsertWithoutMmapInput
  disconnect?: Prisma.MapInfoWhereInput | boolean
  delete?: Prisma.MapInfoWhereInput | boolean
  connect?: Prisma.MapInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapInfoUpdateToOneWithWhereWithoutMmapInput, Prisma.MapInfoUpdateWithoutMmapInput>, Prisma.MapInfoUncheckedUpdateWithoutMmapInput>
}

export type MapInfoCreaterequiredGamesInput = {
  set: number[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type MapInfoUpdaterequiredGamesInput = {
  set?: number[]
  push?: number | number[]
}

export type MapInfoCreateWithoutMmapInput = {
  description?: string
  youtubeID?: string | null
  creationDate: Date | string
  approvedDate?: Date | string | null
  requiredGames?: Prisma.MapInfoCreaterequiredGamesInput | number[]
}

export type MapInfoUncheckedCreateWithoutMmapInput = {
  description?: string
  youtubeID?: string | null
  creationDate: Date | string
  approvedDate?: Date | string | null
  requiredGames?: Prisma.MapInfoCreaterequiredGamesInput | number[]
}

export type MapInfoCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.MapInfoCreateWithoutMmapInput, Prisma.MapInfoUncheckedCreateWithoutMmapInput>
}

export type MapInfoUpsertWithoutMmapInput = {
  update: Prisma.XOR<Prisma.MapInfoUpdateWithoutMmapInput, Prisma.MapInfoUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapInfoCreateWithoutMmapInput, Prisma.MapInfoUncheckedCreateWithoutMmapInput>
  where?: Prisma.MapInfoWhereInput
}

export type MapInfoUpdateToOneWithWhereWithoutMmapInput = {
  where?: Prisma.MapInfoWhereInput
  data: Prisma.XOR<Prisma.MapInfoUpdateWithoutMmapInput, Prisma.MapInfoUncheckedUpdateWithoutMmapInput>
}

export type MapInfoUpdateWithoutMmapInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  youtubeID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  requiredGames?: Prisma.MapInfoUpdaterequiredGamesInput | number[]
}

export type MapInfoUncheckedUpdateWithoutMmapInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  youtubeID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  creationDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  requiredGames?: Prisma.MapInfoUpdaterequiredGamesInput | number[]
}



export type MapInfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  description?: boolean
  youtubeID?: boolean
  creationDate?: boolean
  approvedDate?: boolean
  requiredGames?: boolean
  mapID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapInfo"]>

export type MapInfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  description?: boolean
  youtubeID?: boolean
  creationDate?: boolean
  approvedDate?: boolean
  requiredGames?: boolean
  mapID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapInfo"]>

export type MapInfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  description?: boolean
  youtubeID?: boolean
  creationDate?: boolean
  approvedDate?: boolean
  requiredGames?: boolean
  mapID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapInfo"]>

export type MapInfoSelectScalar = {
  description?: boolean
  youtubeID?: boolean
  creationDate?: boolean
  approvedDate?: boolean
  requiredGames?: boolean
  mapID?: boolean
}

export type MapInfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"description" | "youtubeID" | "creationDate" | "approvedDate" | "requiredGames" | "mapID", ExtArgs["result"]["mapInfo"]>
export type MapInfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapInfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapInfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}

export type $MapInfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapInfo"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    description: string
    youtubeID: string | null
    creationDate: Date
    approvedDate: Date | null
    /**
     * steam-game.enum.ts
     */
    requiredGames: number[]
    mapID: number
  }, ExtArgs["result"]["mapInfo"]>
  composites: {}
}

export type MapInfoGetPayload<S extends boolean | null | undefined | MapInfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapInfoPayload, S>

export type MapInfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapInfoCountAggregateInputType | true
  }

export interface MapInfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapInfo'], meta: { name: 'MapInfo' } }
  /**
   * Find zero or one MapInfo that matches the filter.
   * @param {MapInfoFindUniqueArgs} args - Arguments to find a MapInfo
   * @example
   * // Get one MapInfo
   * const mapInfo = await prisma.mapInfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapInfoFindUniqueArgs>(args: Prisma.SelectSubset<T, MapInfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapInfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapInfoFindUniqueOrThrowArgs} args - Arguments to find a MapInfo
   * @example
   * // Get one MapInfo
   * const mapInfo = await prisma.mapInfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapInfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapInfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapInfoFindFirstArgs} args - Arguments to find a MapInfo
   * @example
   * // Get one MapInfo
   * const mapInfo = await prisma.mapInfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapInfoFindFirstArgs>(args?: Prisma.SelectSubset<T, MapInfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapInfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapInfoFindFirstOrThrowArgs} args - Arguments to find a MapInfo
   * @example
   * // Get one MapInfo
   * const mapInfo = await prisma.mapInfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapInfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapInfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapInfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapInfos
   * const mapInfos = await prisma.mapInfo.findMany()
   * 
   * // Get first 10 MapInfos
   * const mapInfos = await prisma.mapInfo.findMany({ take: 10 })
   * 
   * // Only select the `description`
   * const mapInfoWithDescriptionOnly = await prisma.mapInfo.findMany({ select: { description: true } })
   * 
   */
  findMany<T extends MapInfoFindManyArgs>(args?: Prisma.SelectSubset<T, MapInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapInfo.
   * @param {MapInfoCreateArgs} args - Arguments to create a MapInfo.
   * @example
   * // Create one MapInfo
   * const MapInfo = await prisma.mapInfo.create({
   *   data: {
   *     // ... data to create a MapInfo
   *   }
   * })
   * 
   */
  create<T extends MapInfoCreateArgs>(args: Prisma.SelectSubset<T, MapInfoCreateArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapInfos.
   * @param {MapInfoCreateManyArgs} args - Arguments to create many MapInfos.
   * @example
   * // Create many MapInfos
   * const mapInfo = await prisma.mapInfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapInfoCreateManyArgs>(args?: Prisma.SelectSubset<T, MapInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapInfos and returns the data saved in the database.
   * @param {MapInfoCreateManyAndReturnArgs} args - Arguments to create many MapInfos.
   * @example
   * // Create many MapInfos
   * const mapInfo = await prisma.mapInfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapInfos and only return the `description`
   * const mapInfoWithDescriptionOnly = await prisma.mapInfo.createManyAndReturn({
   *   select: { description: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapInfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapInfo.
   * @param {MapInfoDeleteArgs} args - Arguments to delete one MapInfo.
   * @example
   * // Delete one MapInfo
   * const MapInfo = await prisma.mapInfo.delete({
   *   where: {
   *     // ... filter to delete one MapInfo
   *   }
   * })
   * 
   */
  delete<T extends MapInfoDeleteArgs>(args: Prisma.SelectSubset<T, MapInfoDeleteArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapInfo.
   * @param {MapInfoUpdateArgs} args - Arguments to update one MapInfo.
   * @example
   * // Update one MapInfo
   * const mapInfo = await prisma.mapInfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapInfoUpdateArgs>(args: Prisma.SelectSubset<T, MapInfoUpdateArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapInfos.
   * @param {MapInfoDeleteManyArgs} args - Arguments to filter MapInfos to delete.
   * @example
   * // Delete a few MapInfos
   * const { count } = await prisma.mapInfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapInfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapInfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapInfos
   * const mapInfo = await prisma.mapInfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapInfoUpdateManyArgs>(args: Prisma.SelectSubset<T, MapInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapInfos and returns the data updated in the database.
   * @param {MapInfoUpdateManyAndReturnArgs} args - Arguments to update many MapInfos.
   * @example
   * // Update many MapInfos
   * const mapInfo = await prisma.mapInfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapInfos and only return the `description`
   * const mapInfoWithDescriptionOnly = await prisma.mapInfo.updateManyAndReturn({
   *   select: { description: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapInfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapInfo.
   * @param {MapInfoUpsertArgs} args - Arguments to update or create a MapInfo.
   * @example
   * // Update or create a MapInfo
   * const mapInfo = await prisma.mapInfo.upsert({
   *   create: {
   *     // ... data to create a MapInfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapInfo we want to update
   *   }
   * })
   */
  upsert<T extends MapInfoUpsertArgs>(args: Prisma.SelectSubset<T, MapInfoUpsertArgs<ExtArgs>>): Prisma.Prisma__MapInfoClient<runtime.Types.Result.GetResult<Prisma.$MapInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapInfoCountArgs} args - Arguments to filter MapInfos to count.
   * @example
   * // Count the number of MapInfos
   * const count = await prisma.mapInfo.count({
   *   where: {
   *     // ... the filter for the MapInfos we want to count
   *   }
   * })
  **/
  count<T extends MapInfoCountArgs>(
    args?: Prisma.Subset<T, MapInfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapInfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapInfoAggregateArgs>(args: Prisma.Subset<T, MapInfoAggregateArgs>): Prisma.PrismaPromise<GetMapInfoAggregateType<T>>

  /**
   * Group by MapInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapInfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapInfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapInfoGroupByArgs['orderBy'] }
      : { orderBy?: MapInfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapInfo model
 */
readonly fields: MapInfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapInfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapInfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapInfo model
 */
export interface MapInfoFieldRefs {
  readonly description: Prisma.FieldRef<"MapInfo", 'String'>
  readonly youtubeID: Prisma.FieldRef<"MapInfo", 'String'>
  readonly creationDate: Prisma.FieldRef<"MapInfo", 'DateTime'>
  readonly approvedDate: Prisma.FieldRef<"MapInfo", 'DateTime'>
  readonly requiredGames: Prisma.FieldRef<"MapInfo", 'Int[]'>
  readonly mapID: Prisma.FieldRef<"MapInfo", 'Int'>
}
    

// Custom InputTypes
/**
 * MapInfo findUnique
 */
export type MapInfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * Filter, which MapInfo to fetch.
   */
  where: Prisma.MapInfoWhereUniqueInput
}

/**
 * MapInfo findUniqueOrThrow
 */
export type MapInfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * Filter, which MapInfo to fetch.
   */
  where: Prisma.MapInfoWhereUniqueInput
}

/**
 * MapInfo findFirst
 */
export type MapInfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * Filter, which MapInfo to fetch.
   */
  where?: Prisma.MapInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapInfos to fetch.
   */
  orderBy?: Prisma.MapInfoOrderByWithRelationInput | Prisma.MapInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapInfos.
   */
  cursor?: Prisma.MapInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapInfos.
   */
  distinct?: Prisma.MapInfoScalarFieldEnum | Prisma.MapInfoScalarFieldEnum[]
}

/**
 * MapInfo findFirstOrThrow
 */
export type MapInfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * Filter, which MapInfo to fetch.
   */
  where?: Prisma.MapInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapInfos to fetch.
   */
  orderBy?: Prisma.MapInfoOrderByWithRelationInput | Prisma.MapInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapInfos.
   */
  cursor?: Prisma.MapInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapInfos.
   */
  distinct?: Prisma.MapInfoScalarFieldEnum | Prisma.MapInfoScalarFieldEnum[]
}

/**
 * MapInfo findMany
 */
export type MapInfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * Filter, which MapInfos to fetch.
   */
  where?: Prisma.MapInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapInfos to fetch.
   */
  orderBy?: Prisma.MapInfoOrderByWithRelationInput | Prisma.MapInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapInfos.
   */
  cursor?: Prisma.MapInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapInfos.
   */
  skip?: number
  distinct?: Prisma.MapInfoScalarFieldEnum | Prisma.MapInfoScalarFieldEnum[]
}

/**
 * MapInfo create
 */
export type MapInfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * The data needed to create a MapInfo.
   */
  data: Prisma.XOR<Prisma.MapInfoCreateInput, Prisma.MapInfoUncheckedCreateInput>
}

/**
 * MapInfo createMany
 */
export type MapInfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapInfos.
   */
  data: Prisma.MapInfoCreateManyInput | Prisma.MapInfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapInfo createManyAndReturn
 */
export type MapInfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * The data used to create many MapInfos.
   */
  data: Prisma.MapInfoCreateManyInput | Prisma.MapInfoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapInfo update
 */
export type MapInfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * The data needed to update a MapInfo.
   */
  data: Prisma.XOR<Prisma.MapInfoUpdateInput, Prisma.MapInfoUncheckedUpdateInput>
  /**
   * Choose, which MapInfo to update.
   */
  where: Prisma.MapInfoWhereUniqueInput
}

/**
 * MapInfo updateMany
 */
export type MapInfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapInfos.
   */
  data: Prisma.XOR<Prisma.MapInfoUpdateManyMutationInput, Prisma.MapInfoUncheckedUpdateManyInput>
  /**
   * Filter which MapInfos to update
   */
  where?: Prisma.MapInfoWhereInput
  /**
   * Limit how many MapInfos to update.
   */
  limit?: number
}

/**
 * MapInfo updateManyAndReturn
 */
export type MapInfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * The data used to update MapInfos.
   */
  data: Prisma.XOR<Prisma.MapInfoUpdateManyMutationInput, Prisma.MapInfoUncheckedUpdateManyInput>
  /**
   * Filter which MapInfos to update
   */
  where?: Prisma.MapInfoWhereInput
  /**
   * Limit how many MapInfos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapInfo upsert
 */
export type MapInfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * The filter to search for the MapInfo to update in case it exists.
   */
  where: Prisma.MapInfoWhereUniqueInput
  /**
   * In case the MapInfo found by the `where` argument doesn't exist, create a new MapInfo with this data.
   */
  create: Prisma.XOR<Prisma.MapInfoCreateInput, Prisma.MapInfoUncheckedCreateInput>
  /**
   * In case the MapInfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapInfoUpdateInput, Prisma.MapInfoUncheckedUpdateInput>
}

/**
 * MapInfo delete
 */
export type MapInfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
  /**
   * Filter which MapInfo to delete.
   */
  where: Prisma.MapInfoWhereUniqueInput
}

/**
 * MapInfo deleteMany
 */
export type MapInfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapInfos to delete
   */
  where?: Prisma.MapInfoWhereInput
  /**
   * Limit how many MapInfos to delete.
   */
  limit?: number
}

/**
 * MapInfo without action
 */
export type MapInfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapInfo
   */
  select?: Prisma.MapInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapInfo
   */
  omit?: Prisma.MapInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapInfoInclude<ExtArgs> | null
}
