
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapNotify` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapNotify
 * 
 */
export type MapNotifyModel = runtime.Types.Result.DefaultSelection<Prisma.$MapNotifyPayload>

export type AggregateMapNotify = {
  _count: MapNotifyCountAggregateOutputType | null
  _avg: MapNotifyAvgAggregateOutputType | null
  _sum: MapNotifySumAggregateOutputType | null
  _min: MapNotifyMinAggregateOutputType | null
  _max: MapNotifyMaxAggregateOutputType | null
}

export type MapNotifyAvgAggregateOutputType = {
  notifyOn: number | null
  mapID: number | null
  userID: number | null
}

export type MapNotifySumAggregateOutputType = {
  notifyOn: number | null
  mapID: number | null
  userID: number | null
}

export type MapNotifyMinAggregateOutputType = {
  notifyOn: number | null
  mapID: number | null
  userID: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapNotifyMaxAggregateOutputType = {
  notifyOn: number | null
  mapID: number | null
  userID: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MapNotifyCountAggregateOutputType = {
  notifyOn: number
  mapID: number
  userID: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MapNotifyAvgAggregateInputType = {
  notifyOn?: true
  mapID?: true
  userID?: true
}

export type MapNotifySumAggregateInputType = {
  notifyOn?: true
  mapID?: true
  userID?: true
}

export type MapNotifyMinAggregateInputType = {
  notifyOn?: true
  mapID?: true
  userID?: true
  createdAt?: true
  updatedAt?: true
}

export type MapNotifyMaxAggregateInputType = {
  notifyOn?: true
  mapID?: true
  userID?: true
  createdAt?: true
  updatedAt?: true
}

export type MapNotifyCountAggregateInputType = {
  notifyOn?: true
  mapID?: true
  userID?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MapNotifyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapNotify to aggregate.
   */
  where?: Prisma.MapNotifyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapNotifies to fetch.
   */
  orderBy?: Prisma.MapNotifyOrderByWithRelationInput | Prisma.MapNotifyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapNotifyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapNotifies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapNotifies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapNotifies
  **/
  _count?: true | MapNotifyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapNotifyAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapNotifySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapNotifyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapNotifyMaxAggregateInputType
}

export type GetMapNotifyAggregateType<T extends MapNotifyAggregateArgs> = {
      [P in keyof T & keyof AggregateMapNotify]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapNotify[P]>
    : Prisma.GetScalarType<T[P], AggregateMapNotify[P]>
}




export type MapNotifyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapNotifyWhereInput
  orderBy?: Prisma.MapNotifyOrderByWithAggregationInput | Prisma.MapNotifyOrderByWithAggregationInput[]
  by: Prisma.MapNotifyScalarFieldEnum[] | Prisma.MapNotifyScalarFieldEnum
  having?: Prisma.MapNotifyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapNotifyCountAggregateInputType | true
  _avg?: MapNotifyAvgAggregateInputType
  _sum?: MapNotifySumAggregateInputType
  _min?: MapNotifyMinAggregateInputType
  _max?: MapNotifyMaxAggregateInputType
}

export type MapNotifyGroupByOutputType = {
  notifyOn: number
  mapID: number
  userID: number
  createdAt: Date
  updatedAt: Date
  _count: MapNotifyCountAggregateOutputType | null
  _avg: MapNotifyAvgAggregateOutputType | null
  _sum: MapNotifySumAggregateOutputType | null
  _min: MapNotifyMinAggregateOutputType | null
  _max: MapNotifyMaxAggregateOutputType | null
}

type GetMapNotifyGroupByPayload<T extends MapNotifyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapNotifyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapNotifyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapNotifyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapNotifyGroupByOutputType[P]>
      }
    >
  >



export type MapNotifyWhereInput = {
  AND?: Prisma.MapNotifyWhereInput | Prisma.MapNotifyWhereInput[]
  OR?: Prisma.MapNotifyWhereInput[]
  NOT?: Prisma.MapNotifyWhereInput | Prisma.MapNotifyWhereInput[]
  notifyOn?: Prisma.IntFilter<"MapNotify"> | number
  mapID?: Prisma.IntFilter<"MapNotify"> | number
  userID?: Prisma.IntFilter<"MapNotify"> | number
  createdAt?: Prisma.DateTimeFilter<"MapNotify"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapNotify"> | Date | string
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MapNotifyOrderByWithRelationInput = {
  notifyOn?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type MapNotifyWhereUniqueInput = Prisma.AtLeast<{
  userID_mapID?: Prisma.MapNotifyUserIDMapIDCompoundUniqueInput
  AND?: Prisma.MapNotifyWhereInput | Prisma.MapNotifyWhereInput[]
  OR?: Prisma.MapNotifyWhereInput[]
  NOT?: Prisma.MapNotifyWhereInput | Prisma.MapNotifyWhereInput[]
  notifyOn?: Prisma.IntFilter<"MapNotify"> | number
  mapID?: Prisma.IntFilter<"MapNotify"> | number
  userID?: Prisma.IntFilter<"MapNotify"> | number
  createdAt?: Prisma.DateTimeFilter<"MapNotify"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapNotify"> | Date | string
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "userID_mapID">

export type MapNotifyOrderByWithAggregationInput = {
  notifyOn?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MapNotifyCountOrderByAggregateInput
  _avg?: Prisma.MapNotifyAvgOrderByAggregateInput
  _max?: Prisma.MapNotifyMaxOrderByAggregateInput
  _min?: Prisma.MapNotifyMinOrderByAggregateInput
  _sum?: Prisma.MapNotifySumOrderByAggregateInput
}

export type MapNotifyScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapNotifyScalarWhereWithAggregatesInput | Prisma.MapNotifyScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapNotifyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapNotifyScalarWhereWithAggregatesInput | Prisma.MapNotifyScalarWhereWithAggregatesInput[]
  notifyOn?: Prisma.IntWithAggregatesFilter<"MapNotify"> | number
  mapID?: Prisma.IntWithAggregatesFilter<"MapNotify"> | number
  userID?: Prisma.IntWithAggregatesFilter<"MapNotify"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MapNotify"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MapNotify"> | Date | string
}

export type MapNotifyCreateInput = {
  notifyOn: number
  createdAt?: Date | string
  updatedAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutNotifiesInput
  user: Prisma.UserCreateNestedOneWithoutMapNotifiesInput
}

export type MapNotifyUncheckedCreateInput = {
  notifyOn: number
  mapID: number
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapNotifyUpdateInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutNotifiesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMapNotifiesNestedInput
}

export type MapNotifyUncheckedUpdateInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapNotifyCreateManyInput = {
  notifyOn: number
  mapID: number
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapNotifyUpdateManyMutationInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapNotifyUncheckedUpdateManyInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapNotifyListRelationFilter = {
  every?: Prisma.MapNotifyWhereInput
  some?: Prisma.MapNotifyWhereInput
  none?: Prisma.MapNotifyWhereInput
}

export type MapNotifyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapNotifyUserIDMapIDCompoundUniqueInput = {
  userID: number
  mapID: number
}

export type MapNotifyCountOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapNotifyAvgOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapNotifyMaxOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapNotifyMinOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MapNotifySumOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapNotifyCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutUserInput, Prisma.MapNotifyUncheckedCreateWithoutUserInput> | Prisma.MapNotifyCreateWithoutUserInput[] | Prisma.MapNotifyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutUserInput | Prisma.MapNotifyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapNotifyCreateManyUserInputEnvelope
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
}

export type MapNotifyUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutUserInput, Prisma.MapNotifyUncheckedCreateWithoutUserInput> | Prisma.MapNotifyCreateWithoutUserInput[] | Prisma.MapNotifyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutUserInput | Prisma.MapNotifyCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapNotifyCreateManyUserInputEnvelope
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
}

export type MapNotifyUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutUserInput, Prisma.MapNotifyUncheckedCreateWithoutUserInput> | Prisma.MapNotifyCreateWithoutUserInput[] | Prisma.MapNotifyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutUserInput | Prisma.MapNotifyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapNotifyUpsertWithWhereUniqueWithoutUserInput | Prisma.MapNotifyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapNotifyCreateManyUserInputEnvelope
  set?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  disconnect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  delete?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  update?: Prisma.MapNotifyUpdateWithWhereUniqueWithoutUserInput | Prisma.MapNotifyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapNotifyUpdateManyWithWhereWithoutUserInput | Prisma.MapNotifyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapNotifyScalarWhereInput | Prisma.MapNotifyScalarWhereInput[]
}

export type MapNotifyUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutUserInput, Prisma.MapNotifyUncheckedCreateWithoutUserInput> | Prisma.MapNotifyCreateWithoutUserInput[] | Prisma.MapNotifyUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutUserInput | Prisma.MapNotifyCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapNotifyUpsertWithWhereUniqueWithoutUserInput | Prisma.MapNotifyUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapNotifyCreateManyUserInputEnvelope
  set?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  disconnect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  delete?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  update?: Prisma.MapNotifyUpdateWithWhereUniqueWithoutUserInput | Prisma.MapNotifyUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapNotifyUpdateManyWithWhereWithoutUserInput | Prisma.MapNotifyUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapNotifyScalarWhereInput | Prisma.MapNotifyScalarWhereInput[]
}

export type MapNotifyCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutMmapInput, Prisma.MapNotifyUncheckedCreateWithoutMmapInput> | Prisma.MapNotifyCreateWithoutMmapInput[] | Prisma.MapNotifyUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutMmapInput | Prisma.MapNotifyCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapNotifyCreateManyMmapInputEnvelope
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
}

export type MapNotifyUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutMmapInput, Prisma.MapNotifyUncheckedCreateWithoutMmapInput> | Prisma.MapNotifyCreateWithoutMmapInput[] | Prisma.MapNotifyUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutMmapInput | Prisma.MapNotifyCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapNotifyCreateManyMmapInputEnvelope
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
}

export type MapNotifyUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutMmapInput, Prisma.MapNotifyUncheckedCreateWithoutMmapInput> | Prisma.MapNotifyCreateWithoutMmapInput[] | Prisma.MapNotifyUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutMmapInput | Prisma.MapNotifyCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapNotifyUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapNotifyUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapNotifyCreateManyMmapInputEnvelope
  set?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  disconnect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  delete?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  update?: Prisma.MapNotifyUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapNotifyUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapNotifyUpdateManyWithWhereWithoutMmapInput | Prisma.MapNotifyUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapNotifyScalarWhereInput | Prisma.MapNotifyScalarWhereInput[]
}

export type MapNotifyUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapNotifyCreateWithoutMmapInput, Prisma.MapNotifyUncheckedCreateWithoutMmapInput> | Prisma.MapNotifyCreateWithoutMmapInput[] | Prisma.MapNotifyUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapNotifyCreateOrConnectWithoutMmapInput | Prisma.MapNotifyCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapNotifyUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapNotifyUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapNotifyCreateManyMmapInputEnvelope
  set?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  disconnect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  delete?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  connect?: Prisma.MapNotifyWhereUniqueInput | Prisma.MapNotifyWhereUniqueInput[]
  update?: Prisma.MapNotifyUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapNotifyUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapNotifyUpdateManyWithWhereWithoutMmapInput | Prisma.MapNotifyUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapNotifyScalarWhereInput | Prisma.MapNotifyScalarWhereInput[]
}

export type MapNotifyCreateWithoutUserInput = {
  notifyOn: number
  createdAt?: Date | string
  updatedAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutNotifiesInput
}

export type MapNotifyUncheckedCreateWithoutUserInput = {
  notifyOn: number
  mapID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapNotifyCreateOrConnectWithoutUserInput = {
  where: Prisma.MapNotifyWhereUniqueInput
  create: Prisma.XOR<Prisma.MapNotifyCreateWithoutUserInput, Prisma.MapNotifyUncheckedCreateWithoutUserInput>
}

export type MapNotifyCreateManyUserInputEnvelope = {
  data: Prisma.MapNotifyCreateManyUserInput | Prisma.MapNotifyCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MapNotifyUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapNotifyWhereUniqueInput
  update: Prisma.XOR<Prisma.MapNotifyUpdateWithoutUserInput, Prisma.MapNotifyUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MapNotifyCreateWithoutUserInput, Prisma.MapNotifyUncheckedCreateWithoutUserInput>
}

export type MapNotifyUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapNotifyWhereUniqueInput
  data: Prisma.XOR<Prisma.MapNotifyUpdateWithoutUserInput, Prisma.MapNotifyUncheckedUpdateWithoutUserInput>
}

export type MapNotifyUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MapNotifyScalarWhereInput
  data: Prisma.XOR<Prisma.MapNotifyUpdateManyMutationInput, Prisma.MapNotifyUncheckedUpdateManyWithoutUserInput>
}

export type MapNotifyScalarWhereInput = {
  AND?: Prisma.MapNotifyScalarWhereInput | Prisma.MapNotifyScalarWhereInput[]
  OR?: Prisma.MapNotifyScalarWhereInput[]
  NOT?: Prisma.MapNotifyScalarWhereInput | Prisma.MapNotifyScalarWhereInput[]
  notifyOn?: Prisma.IntFilter<"MapNotify"> | number
  mapID?: Prisma.IntFilter<"MapNotify"> | number
  userID?: Prisma.IntFilter<"MapNotify"> | number
  createdAt?: Prisma.DateTimeFilter<"MapNotify"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MapNotify"> | Date | string
}

export type MapNotifyCreateWithoutMmapInput = {
  notifyOn: number
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutMapNotifiesInput
}

export type MapNotifyUncheckedCreateWithoutMmapInput = {
  notifyOn: number
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapNotifyCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapNotifyWhereUniqueInput
  create: Prisma.XOR<Prisma.MapNotifyCreateWithoutMmapInput, Prisma.MapNotifyUncheckedCreateWithoutMmapInput>
}

export type MapNotifyCreateManyMmapInputEnvelope = {
  data: Prisma.MapNotifyCreateManyMmapInput | Prisma.MapNotifyCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type MapNotifyUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapNotifyWhereUniqueInput
  update: Prisma.XOR<Prisma.MapNotifyUpdateWithoutMmapInput, Prisma.MapNotifyUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapNotifyCreateWithoutMmapInput, Prisma.MapNotifyUncheckedCreateWithoutMmapInput>
}

export type MapNotifyUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapNotifyWhereUniqueInput
  data: Prisma.XOR<Prisma.MapNotifyUpdateWithoutMmapInput, Prisma.MapNotifyUncheckedUpdateWithoutMmapInput>
}

export type MapNotifyUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.MapNotifyScalarWhereInput
  data: Prisma.XOR<Prisma.MapNotifyUpdateManyMutationInput, Prisma.MapNotifyUncheckedUpdateManyWithoutMmapInput>
}

export type MapNotifyCreateManyUserInput = {
  notifyOn: number
  mapID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapNotifyUpdateWithoutUserInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutNotifiesNestedInput
}

export type MapNotifyUncheckedUpdateWithoutUserInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapNotifyUncheckedUpdateManyWithoutUserInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapNotifyCreateManyMmapInput = {
  notifyOn: number
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MapNotifyUpdateWithoutMmapInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutMapNotifiesNestedInput
}

export type MapNotifyUncheckedUpdateWithoutMmapInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MapNotifyUncheckedUpdateManyWithoutMmapInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MapNotifySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  notifyOn?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapNotify"]>

export type MapNotifySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  notifyOn?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapNotify"]>

export type MapNotifySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  notifyOn?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapNotify"]>

export type MapNotifySelectScalar = {
  notifyOn?: boolean
  mapID?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MapNotifyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"notifyOn" | "mapID" | "userID" | "createdAt" | "updatedAt", ExtArgs["result"]["mapNotify"]>
export type MapNotifyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapNotifyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapNotifyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MapNotifyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapNotify"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * Flags of activity-type.enum.ts
     */
    notifyOn: number
    mapID: number
    userID: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mapNotify"]>
  composites: {}
}

export type MapNotifyGetPayload<S extends boolean | null | undefined | MapNotifyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload, S>

export type MapNotifyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapNotifyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapNotifyCountAggregateInputType | true
  }

export interface MapNotifyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapNotify'], meta: { name: 'MapNotify' } }
  /**
   * Find zero or one MapNotify that matches the filter.
   * @param {MapNotifyFindUniqueArgs} args - Arguments to find a MapNotify
   * @example
   * // Get one MapNotify
   * const mapNotify = await prisma.mapNotify.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapNotifyFindUniqueArgs>(args: Prisma.SelectSubset<T, MapNotifyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapNotify that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapNotifyFindUniqueOrThrowArgs} args - Arguments to find a MapNotify
   * @example
   * // Get one MapNotify
   * const mapNotify = await prisma.mapNotify.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapNotifyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapNotifyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapNotify that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapNotifyFindFirstArgs} args - Arguments to find a MapNotify
   * @example
   * // Get one MapNotify
   * const mapNotify = await prisma.mapNotify.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapNotifyFindFirstArgs>(args?: Prisma.SelectSubset<T, MapNotifyFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapNotify that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapNotifyFindFirstOrThrowArgs} args - Arguments to find a MapNotify
   * @example
   * // Get one MapNotify
   * const mapNotify = await prisma.mapNotify.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapNotifyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapNotifyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapNotifies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapNotifyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapNotifies
   * const mapNotifies = await prisma.mapNotify.findMany()
   * 
   * // Get first 10 MapNotifies
   * const mapNotifies = await prisma.mapNotify.findMany({ take: 10 })
   * 
   * // Only select the `notifyOn`
   * const mapNotifyWithNotifyOnOnly = await prisma.mapNotify.findMany({ select: { notifyOn: true } })
   * 
   */
  findMany<T extends MapNotifyFindManyArgs>(args?: Prisma.SelectSubset<T, MapNotifyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapNotify.
   * @param {MapNotifyCreateArgs} args - Arguments to create a MapNotify.
   * @example
   * // Create one MapNotify
   * const MapNotify = await prisma.mapNotify.create({
   *   data: {
   *     // ... data to create a MapNotify
   *   }
   * })
   * 
   */
  create<T extends MapNotifyCreateArgs>(args: Prisma.SelectSubset<T, MapNotifyCreateArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapNotifies.
   * @param {MapNotifyCreateManyArgs} args - Arguments to create many MapNotifies.
   * @example
   * // Create many MapNotifies
   * const mapNotify = await prisma.mapNotify.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapNotifyCreateManyArgs>(args?: Prisma.SelectSubset<T, MapNotifyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapNotifies and returns the data saved in the database.
   * @param {MapNotifyCreateManyAndReturnArgs} args - Arguments to create many MapNotifies.
   * @example
   * // Create many MapNotifies
   * const mapNotify = await prisma.mapNotify.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapNotifies and only return the `notifyOn`
   * const mapNotifyWithNotifyOnOnly = await prisma.mapNotify.createManyAndReturn({
   *   select: { notifyOn: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapNotifyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapNotifyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapNotify.
   * @param {MapNotifyDeleteArgs} args - Arguments to delete one MapNotify.
   * @example
   * // Delete one MapNotify
   * const MapNotify = await prisma.mapNotify.delete({
   *   where: {
   *     // ... filter to delete one MapNotify
   *   }
   * })
   * 
   */
  delete<T extends MapNotifyDeleteArgs>(args: Prisma.SelectSubset<T, MapNotifyDeleteArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapNotify.
   * @param {MapNotifyUpdateArgs} args - Arguments to update one MapNotify.
   * @example
   * // Update one MapNotify
   * const mapNotify = await prisma.mapNotify.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapNotifyUpdateArgs>(args: Prisma.SelectSubset<T, MapNotifyUpdateArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapNotifies.
   * @param {MapNotifyDeleteManyArgs} args - Arguments to filter MapNotifies to delete.
   * @example
   * // Delete a few MapNotifies
   * const { count } = await prisma.mapNotify.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapNotifyDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapNotifyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapNotifies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapNotifyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapNotifies
   * const mapNotify = await prisma.mapNotify.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapNotifyUpdateManyArgs>(args: Prisma.SelectSubset<T, MapNotifyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapNotifies and returns the data updated in the database.
   * @param {MapNotifyUpdateManyAndReturnArgs} args - Arguments to update many MapNotifies.
   * @example
   * // Update many MapNotifies
   * const mapNotify = await prisma.mapNotify.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapNotifies and only return the `notifyOn`
   * const mapNotifyWithNotifyOnOnly = await prisma.mapNotify.updateManyAndReturn({
   *   select: { notifyOn: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapNotifyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapNotifyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapNotify.
   * @param {MapNotifyUpsertArgs} args - Arguments to update or create a MapNotify.
   * @example
   * // Update or create a MapNotify
   * const mapNotify = await prisma.mapNotify.upsert({
   *   create: {
   *     // ... data to create a MapNotify
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapNotify we want to update
   *   }
   * })
   */
  upsert<T extends MapNotifyUpsertArgs>(args: Prisma.SelectSubset<T, MapNotifyUpsertArgs<ExtArgs>>): Prisma.Prisma__MapNotifyClient<runtime.Types.Result.GetResult<Prisma.$MapNotifyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapNotifies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapNotifyCountArgs} args - Arguments to filter MapNotifies to count.
   * @example
   * // Count the number of MapNotifies
   * const count = await prisma.mapNotify.count({
   *   where: {
   *     // ... the filter for the MapNotifies we want to count
   *   }
   * })
  **/
  count<T extends MapNotifyCountArgs>(
    args?: Prisma.Subset<T, MapNotifyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapNotifyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapNotify.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapNotifyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapNotifyAggregateArgs>(args: Prisma.Subset<T, MapNotifyAggregateArgs>): Prisma.PrismaPromise<GetMapNotifyAggregateType<T>>

  /**
   * Group by MapNotify.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapNotifyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapNotifyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapNotifyGroupByArgs['orderBy'] }
      : { orderBy?: MapNotifyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapNotifyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapNotifyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapNotify model
 */
readonly fields: MapNotifyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapNotify.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapNotifyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapNotify model
 */
export interface MapNotifyFieldRefs {
  readonly notifyOn: Prisma.FieldRef<"MapNotify", 'Int'>
  readonly mapID: Prisma.FieldRef<"MapNotify", 'Int'>
  readonly userID: Prisma.FieldRef<"MapNotify", 'Int'>
  readonly createdAt: Prisma.FieldRef<"MapNotify", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MapNotify", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MapNotify findUnique
 */
export type MapNotifyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * Filter, which MapNotify to fetch.
   */
  where: Prisma.MapNotifyWhereUniqueInput
}

/**
 * MapNotify findUniqueOrThrow
 */
export type MapNotifyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * Filter, which MapNotify to fetch.
   */
  where: Prisma.MapNotifyWhereUniqueInput
}

/**
 * MapNotify findFirst
 */
export type MapNotifyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * Filter, which MapNotify to fetch.
   */
  where?: Prisma.MapNotifyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapNotifies to fetch.
   */
  orderBy?: Prisma.MapNotifyOrderByWithRelationInput | Prisma.MapNotifyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapNotifies.
   */
  cursor?: Prisma.MapNotifyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapNotifies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapNotifies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapNotifies.
   */
  distinct?: Prisma.MapNotifyScalarFieldEnum | Prisma.MapNotifyScalarFieldEnum[]
}

/**
 * MapNotify findFirstOrThrow
 */
export type MapNotifyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * Filter, which MapNotify to fetch.
   */
  where?: Prisma.MapNotifyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapNotifies to fetch.
   */
  orderBy?: Prisma.MapNotifyOrderByWithRelationInput | Prisma.MapNotifyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapNotifies.
   */
  cursor?: Prisma.MapNotifyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapNotifies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapNotifies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapNotifies.
   */
  distinct?: Prisma.MapNotifyScalarFieldEnum | Prisma.MapNotifyScalarFieldEnum[]
}

/**
 * MapNotify findMany
 */
export type MapNotifyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * Filter, which MapNotifies to fetch.
   */
  where?: Prisma.MapNotifyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapNotifies to fetch.
   */
  orderBy?: Prisma.MapNotifyOrderByWithRelationInput | Prisma.MapNotifyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapNotifies.
   */
  cursor?: Prisma.MapNotifyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapNotifies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapNotifies.
   */
  skip?: number
  distinct?: Prisma.MapNotifyScalarFieldEnum | Prisma.MapNotifyScalarFieldEnum[]
}

/**
 * MapNotify create
 */
export type MapNotifyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * The data needed to create a MapNotify.
   */
  data: Prisma.XOR<Prisma.MapNotifyCreateInput, Prisma.MapNotifyUncheckedCreateInput>
}

/**
 * MapNotify createMany
 */
export type MapNotifyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapNotifies.
   */
  data: Prisma.MapNotifyCreateManyInput | Prisma.MapNotifyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapNotify createManyAndReturn
 */
export type MapNotifyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * The data used to create many MapNotifies.
   */
  data: Prisma.MapNotifyCreateManyInput | Prisma.MapNotifyCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapNotify update
 */
export type MapNotifyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * The data needed to update a MapNotify.
   */
  data: Prisma.XOR<Prisma.MapNotifyUpdateInput, Prisma.MapNotifyUncheckedUpdateInput>
  /**
   * Choose, which MapNotify to update.
   */
  where: Prisma.MapNotifyWhereUniqueInput
}

/**
 * MapNotify updateMany
 */
export type MapNotifyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapNotifies.
   */
  data: Prisma.XOR<Prisma.MapNotifyUpdateManyMutationInput, Prisma.MapNotifyUncheckedUpdateManyInput>
  /**
   * Filter which MapNotifies to update
   */
  where?: Prisma.MapNotifyWhereInput
  /**
   * Limit how many MapNotifies to update.
   */
  limit?: number
}

/**
 * MapNotify updateManyAndReturn
 */
export type MapNotifyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * The data used to update MapNotifies.
   */
  data: Prisma.XOR<Prisma.MapNotifyUpdateManyMutationInput, Prisma.MapNotifyUncheckedUpdateManyInput>
  /**
   * Filter which MapNotifies to update
   */
  where?: Prisma.MapNotifyWhereInput
  /**
   * Limit how many MapNotifies to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapNotify upsert
 */
export type MapNotifyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * The filter to search for the MapNotify to update in case it exists.
   */
  where: Prisma.MapNotifyWhereUniqueInput
  /**
   * In case the MapNotify found by the `where` argument doesn't exist, create a new MapNotify with this data.
   */
  create: Prisma.XOR<Prisma.MapNotifyCreateInput, Prisma.MapNotifyUncheckedCreateInput>
  /**
   * In case the MapNotify was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapNotifyUpdateInput, Prisma.MapNotifyUncheckedUpdateInput>
}

/**
 * MapNotify delete
 */
export type MapNotifyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
  /**
   * Filter which MapNotify to delete.
   */
  where: Prisma.MapNotifyWhereUniqueInput
}

/**
 * MapNotify deleteMany
 */
export type MapNotifyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapNotifies to delete
   */
  where?: Prisma.MapNotifyWhereInput
  /**
   * Limit how many MapNotifies to delete.
   */
  limit?: number
}

/**
 * MapNotify without action
 */
export type MapNotifyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapNotify
   */
  select?: Prisma.MapNotifySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapNotify
   */
  omit?: Prisma.MapNotifyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapNotifyInclude<ExtArgs> | null
}
