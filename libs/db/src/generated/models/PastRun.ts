
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PastRun` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PastRun
 * Very similar to `LeaderboardRun`, but also includes non-PB runs, and
 * therefore doesn't really correspond to a leaderboard - rather all the runs
 * that ever qualified for that leaderboard in the past. Used for tracking
 * user's run history.
 */
export type PastRunModel = runtime.Types.Result.DefaultSelection<Prisma.$PastRunPayload>

export type AggregatePastRun = {
  _count: PastRunCountAggregateOutputType | null
  _avg: PastRunAvgAggregateOutputType | null
  _sum: PastRunSumAggregateOutputType | null
  _min: PastRunMinAggregateOutputType | null
  _max: PastRunMaxAggregateOutputType | null
}

export type PastRunAvgAggregateOutputType = {
  id: number | null
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  flags: number | null
}

export type PastRunSumAggregateOutputType = {
  id: bigint | null
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  flags: number[]
}

export type PastRunMinAggregateOutputType = {
  id: bigint | null
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  createdAt: Date | null
}

export type PastRunMaxAggregateOutputType = {
  id: bigint | null
  userID: number | null
  mapID: number | null
  gamemode: number | null
  trackType: number | null
  trackNum: number | null
  style: number | null
  time: number | null
  createdAt: Date | null
}

export type PastRunCountAggregateOutputType = {
  id: number
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags: number
  createdAt: number
  _all: number
}


export type PastRunAvgAggregateInputType = {
  id?: true
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  flags?: true
}

export type PastRunSumAggregateInputType = {
  id?: true
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  flags?: true
}

export type PastRunMinAggregateInputType = {
  id?: true
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  createdAt?: true
}

export type PastRunMaxAggregateInputType = {
  id?: true
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  createdAt?: true
}

export type PastRunCountAggregateInputType = {
  id?: true
  userID?: true
  mapID?: true
  gamemode?: true
  trackType?: true
  trackNum?: true
  style?: true
  time?: true
  flags?: true
  createdAt?: true
  _all?: true
}

export type PastRunAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PastRun to aggregate.
   */
  where?: Prisma.PastRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PastRuns to fetch.
   */
  orderBy?: Prisma.PastRunOrderByWithRelationInput | Prisma.PastRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PastRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PastRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PastRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PastRuns
  **/
  _count?: true | PastRunCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PastRunAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PastRunSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PastRunMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PastRunMaxAggregateInputType
}

export type GetPastRunAggregateType<T extends PastRunAggregateArgs> = {
      [P in keyof T & keyof AggregatePastRun]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePastRun[P]>
    : Prisma.GetScalarType<T[P], AggregatePastRun[P]>
}




export type PastRunGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PastRunWhereInput
  orderBy?: Prisma.PastRunOrderByWithAggregationInput | Prisma.PastRunOrderByWithAggregationInput[]
  by: Prisma.PastRunScalarFieldEnum[] | Prisma.PastRunScalarFieldEnum
  having?: Prisma.PastRunScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PastRunCountAggregateInputType | true
  _avg?: PastRunAvgAggregateInputType
  _sum?: PastRunSumAggregateInputType
  _min?: PastRunMinAggregateInputType
  _max?: PastRunMaxAggregateInputType
}

export type PastRunGroupByOutputType = {
  id: bigint
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags: number[]
  createdAt: Date
  _count: PastRunCountAggregateOutputType | null
  _avg: PastRunAvgAggregateOutputType | null
  _sum: PastRunSumAggregateOutputType | null
  _min: PastRunMinAggregateOutputType | null
  _max: PastRunMaxAggregateOutputType | null
}

type GetPastRunGroupByPayload<T extends PastRunGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PastRunGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PastRunGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PastRunGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PastRunGroupByOutputType[P]>
      }
    >
  >



export type PastRunWhereInput = {
  AND?: Prisma.PastRunWhereInput | Prisma.PastRunWhereInput[]
  OR?: Prisma.PastRunWhereInput[]
  NOT?: Prisma.PastRunWhereInput | Prisma.PastRunWhereInput[]
  id?: Prisma.BigIntFilter<"PastRun"> | bigint | number
  userID?: Prisma.IntFilter<"PastRun"> | number
  mapID?: Prisma.IntFilter<"PastRun"> | number
  gamemode?: Prisma.IntFilter<"PastRun"> | number
  trackType?: Prisma.IntFilter<"PastRun"> | number
  trackNum?: Prisma.IntFilter<"PastRun"> | number
  style?: Prisma.IntFilter<"PastRun"> | number
  time?: Prisma.FloatFilter<"PastRun"> | number
  flags?: Prisma.IntNullableListFilter<"PastRun">
  createdAt?: Prisma.DateTimeFilter<"PastRun"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  leaderboardRun?: Prisma.XOR<Prisma.LeaderboardRunNullableScalarRelationFilter, Prisma.LeaderboardRunWhereInput> | null
}

export type PastRunOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  flags?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  mmap?: Prisma.MMapOrderByWithRelationInput
  leaderboardRun?: Prisma.LeaderboardRunOrderByWithRelationInput
}

export type PastRunWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.PastRunWhereInput | Prisma.PastRunWhereInput[]
  OR?: Prisma.PastRunWhereInput[]
  NOT?: Prisma.PastRunWhereInput | Prisma.PastRunWhereInput[]
  userID?: Prisma.IntFilter<"PastRun"> | number
  mapID?: Prisma.IntFilter<"PastRun"> | number
  gamemode?: Prisma.IntFilter<"PastRun"> | number
  trackType?: Prisma.IntFilter<"PastRun"> | number
  trackNum?: Prisma.IntFilter<"PastRun"> | number
  style?: Prisma.IntFilter<"PastRun"> | number
  time?: Prisma.FloatFilter<"PastRun"> | number
  flags?: Prisma.IntNullableListFilter<"PastRun">
  createdAt?: Prisma.DateTimeFilter<"PastRun"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  leaderboardRun?: Prisma.XOR<Prisma.LeaderboardRunNullableScalarRelationFilter, Prisma.LeaderboardRunWhereInput> | null
}, "id">

export type PastRunOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  flags?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.PastRunCountOrderByAggregateInput
  _avg?: Prisma.PastRunAvgOrderByAggregateInput
  _max?: Prisma.PastRunMaxOrderByAggregateInput
  _min?: Prisma.PastRunMinOrderByAggregateInput
  _sum?: Prisma.PastRunSumOrderByAggregateInput
}

export type PastRunScalarWhereWithAggregatesInput = {
  AND?: Prisma.PastRunScalarWhereWithAggregatesInput | Prisma.PastRunScalarWhereWithAggregatesInput[]
  OR?: Prisma.PastRunScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PastRunScalarWhereWithAggregatesInput | Prisma.PastRunScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"PastRun"> | bigint | number
  userID?: Prisma.IntWithAggregatesFilter<"PastRun"> | number
  mapID?: Prisma.IntWithAggregatesFilter<"PastRun"> | number
  gamemode?: Prisma.IntWithAggregatesFilter<"PastRun"> | number
  trackType?: Prisma.IntWithAggregatesFilter<"PastRun"> | number
  trackNum?: Prisma.IntWithAggregatesFilter<"PastRun"> | number
  style?: Prisma.IntWithAggregatesFilter<"PastRun"> | number
  time?: Prisma.FloatWithAggregatesFilter<"PastRun"> | number
  flags?: Prisma.IntNullableListFilter<"PastRun">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PastRun"> | Date | string
}

export type PastRunCreateInput = {
  id?: bigint | number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPastRunsInput
  mmap: Prisma.MMapCreateNestedOneWithoutPastRunsInput
  leaderboardRun?: Prisma.LeaderboardRunCreateNestedOneWithoutPastRunInput
}

export type PastRunUncheckedCreateInput = {
  id?: bigint | number
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
  leaderboardRun?: Prisma.LeaderboardRunUncheckedCreateNestedOneWithoutPastRunInput
}

export type PastRunUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPastRunsNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutPastRunsNestedInput
  leaderboardRun?: Prisma.LeaderboardRunUpdateOneWithoutPastRunNestedInput
}

export type PastRunUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leaderboardRun?: Prisma.LeaderboardRunUncheckedUpdateOneWithoutPastRunNestedInput
}

export type PastRunCreateManyInput = {
  id?: bigint | number
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
}

export type PastRunUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PastRunUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PastRunListRelationFilter = {
  every?: Prisma.PastRunWhereInput
  some?: Prisma.PastRunWhereInput
  none?: Prisma.PastRunWhereInput
}

export type PastRunOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PastRunNullableScalarRelationFilter = {
  is?: Prisma.PastRunWhereInput | null
  isNot?: Prisma.PastRunWhereInput | null
}

export type PastRunCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  flags?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PastRunAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  flags?: Prisma.SortOrder
}

export type PastRunMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PastRunMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PastRunSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  gamemode?: Prisma.SortOrder
  trackType?: Prisma.SortOrder
  trackNum?: Prisma.SortOrder
  style?: Prisma.SortOrder
  time?: Prisma.SortOrder
  flags?: Prisma.SortOrder
}

export type PastRunCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutUserInput, Prisma.PastRunUncheckedCreateWithoutUserInput> | Prisma.PastRunCreateWithoutUserInput[] | Prisma.PastRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutUserInput | Prisma.PastRunCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PastRunCreateManyUserInputEnvelope
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
}

export type PastRunUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutUserInput, Prisma.PastRunUncheckedCreateWithoutUserInput> | Prisma.PastRunCreateWithoutUserInput[] | Prisma.PastRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutUserInput | Prisma.PastRunCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PastRunCreateManyUserInputEnvelope
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
}

export type PastRunUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutUserInput, Prisma.PastRunUncheckedCreateWithoutUserInput> | Prisma.PastRunCreateWithoutUserInput[] | Prisma.PastRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutUserInput | Prisma.PastRunCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PastRunUpsertWithWhereUniqueWithoutUserInput | Prisma.PastRunUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PastRunCreateManyUserInputEnvelope
  set?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  disconnect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  delete?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  update?: Prisma.PastRunUpdateWithWhereUniqueWithoutUserInput | Prisma.PastRunUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PastRunUpdateManyWithWhereWithoutUserInput | Prisma.PastRunUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PastRunScalarWhereInput | Prisma.PastRunScalarWhereInput[]
}

export type PastRunUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutUserInput, Prisma.PastRunUncheckedCreateWithoutUserInput> | Prisma.PastRunCreateWithoutUserInput[] | Prisma.PastRunUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutUserInput | Prisma.PastRunCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PastRunUpsertWithWhereUniqueWithoutUserInput | Prisma.PastRunUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PastRunCreateManyUserInputEnvelope
  set?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  disconnect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  delete?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  update?: Prisma.PastRunUpdateWithWhereUniqueWithoutUserInput | Prisma.PastRunUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PastRunUpdateManyWithWhereWithoutUserInput | Prisma.PastRunUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PastRunScalarWhereInput | Prisma.PastRunScalarWhereInput[]
}

export type PastRunCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutMmapInput, Prisma.PastRunUncheckedCreateWithoutMmapInput> | Prisma.PastRunCreateWithoutMmapInput[] | Prisma.PastRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutMmapInput | Prisma.PastRunCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.PastRunCreateManyMmapInputEnvelope
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
}

export type PastRunUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutMmapInput, Prisma.PastRunUncheckedCreateWithoutMmapInput> | Prisma.PastRunCreateWithoutMmapInput[] | Prisma.PastRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutMmapInput | Prisma.PastRunCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.PastRunCreateManyMmapInputEnvelope
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
}

export type PastRunUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutMmapInput, Prisma.PastRunUncheckedCreateWithoutMmapInput> | Prisma.PastRunCreateWithoutMmapInput[] | Prisma.PastRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutMmapInput | Prisma.PastRunCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.PastRunUpsertWithWhereUniqueWithoutMmapInput | Prisma.PastRunUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.PastRunCreateManyMmapInputEnvelope
  set?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  disconnect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  delete?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  update?: Prisma.PastRunUpdateWithWhereUniqueWithoutMmapInput | Prisma.PastRunUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.PastRunUpdateManyWithWhereWithoutMmapInput | Prisma.PastRunUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.PastRunScalarWhereInput | Prisma.PastRunScalarWhereInput[]
}

export type PastRunUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutMmapInput, Prisma.PastRunUncheckedCreateWithoutMmapInput> | Prisma.PastRunCreateWithoutMmapInput[] | Prisma.PastRunUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutMmapInput | Prisma.PastRunCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.PastRunUpsertWithWhereUniqueWithoutMmapInput | Prisma.PastRunUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.PastRunCreateManyMmapInputEnvelope
  set?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  disconnect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  delete?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  connect?: Prisma.PastRunWhereUniqueInput | Prisma.PastRunWhereUniqueInput[]
  update?: Prisma.PastRunUpdateWithWhereUniqueWithoutMmapInput | Prisma.PastRunUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.PastRunUpdateManyWithWhereWithoutMmapInput | Prisma.PastRunUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.PastRunScalarWhereInput | Prisma.PastRunScalarWhereInput[]
}

export type PastRunCreateNestedOneWithoutLeaderboardRunInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutLeaderboardRunInput, Prisma.PastRunUncheckedCreateWithoutLeaderboardRunInput>
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutLeaderboardRunInput
  connect?: Prisma.PastRunWhereUniqueInput
}

export type PastRunUpdateOneWithoutLeaderboardRunNestedInput = {
  create?: Prisma.XOR<Prisma.PastRunCreateWithoutLeaderboardRunInput, Prisma.PastRunUncheckedCreateWithoutLeaderboardRunInput>
  connectOrCreate?: Prisma.PastRunCreateOrConnectWithoutLeaderboardRunInput
  upsert?: Prisma.PastRunUpsertWithoutLeaderboardRunInput
  disconnect?: Prisma.PastRunWhereInput | boolean
  delete?: Prisma.PastRunWhereInput | boolean
  connect?: Prisma.PastRunWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PastRunUpdateToOneWithWhereWithoutLeaderboardRunInput, Prisma.PastRunUpdateWithoutLeaderboardRunInput>, Prisma.PastRunUncheckedUpdateWithoutLeaderboardRunInput>
}

export type PastRunCreateflagsInput = {
  set: number[]
}

export type PastRunUpdateflagsInput = {
  set?: number[]
  push?: number | number[]
}

export type PastRunCreateWithoutUserInput = {
  id?: bigint | number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
  mmap: Prisma.MMapCreateNestedOneWithoutPastRunsInput
  leaderboardRun?: Prisma.LeaderboardRunCreateNestedOneWithoutPastRunInput
}

export type PastRunUncheckedCreateWithoutUserInput = {
  id?: bigint | number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
  leaderboardRun?: Prisma.LeaderboardRunUncheckedCreateNestedOneWithoutPastRunInput
}

export type PastRunCreateOrConnectWithoutUserInput = {
  where: Prisma.PastRunWhereUniqueInput
  create: Prisma.XOR<Prisma.PastRunCreateWithoutUserInput, Prisma.PastRunUncheckedCreateWithoutUserInput>
}

export type PastRunCreateManyUserInputEnvelope = {
  data: Prisma.PastRunCreateManyUserInput | Prisma.PastRunCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PastRunUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PastRunWhereUniqueInput
  update: Prisma.XOR<Prisma.PastRunUpdateWithoutUserInput, Prisma.PastRunUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PastRunCreateWithoutUserInput, Prisma.PastRunUncheckedCreateWithoutUserInput>
}

export type PastRunUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PastRunWhereUniqueInput
  data: Prisma.XOR<Prisma.PastRunUpdateWithoutUserInput, Prisma.PastRunUncheckedUpdateWithoutUserInput>
}

export type PastRunUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PastRunScalarWhereInput
  data: Prisma.XOR<Prisma.PastRunUpdateManyMutationInput, Prisma.PastRunUncheckedUpdateManyWithoutUserInput>
}

export type PastRunScalarWhereInput = {
  AND?: Prisma.PastRunScalarWhereInput | Prisma.PastRunScalarWhereInput[]
  OR?: Prisma.PastRunScalarWhereInput[]
  NOT?: Prisma.PastRunScalarWhereInput | Prisma.PastRunScalarWhereInput[]
  id?: Prisma.BigIntFilter<"PastRun"> | bigint | number
  userID?: Prisma.IntFilter<"PastRun"> | number
  mapID?: Prisma.IntFilter<"PastRun"> | number
  gamemode?: Prisma.IntFilter<"PastRun"> | number
  trackType?: Prisma.IntFilter<"PastRun"> | number
  trackNum?: Prisma.IntFilter<"PastRun"> | number
  style?: Prisma.IntFilter<"PastRun"> | number
  time?: Prisma.FloatFilter<"PastRun"> | number
  flags?: Prisma.IntNullableListFilter<"PastRun">
  createdAt?: Prisma.DateTimeFilter<"PastRun"> | Date | string
}

export type PastRunCreateWithoutMmapInput = {
  id?: bigint | number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPastRunsInput
  leaderboardRun?: Prisma.LeaderboardRunCreateNestedOneWithoutPastRunInput
}

export type PastRunUncheckedCreateWithoutMmapInput = {
  id?: bigint | number
  userID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
  leaderboardRun?: Prisma.LeaderboardRunUncheckedCreateNestedOneWithoutPastRunInput
}

export type PastRunCreateOrConnectWithoutMmapInput = {
  where: Prisma.PastRunWhereUniqueInput
  create: Prisma.XOR<Prisma.PastRunCreateWithoutMmapInput, Prisma.PastRunUncheckedCreateWithoutMmapInput>
}

export type PastRunCreateManyMmapInputEnvelope = {
  data: Prisma.PastRunCreateManyMmapInput | Prisma.PastRunCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type PastRunUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.PastRunWhereUniqueInput
  update: Prisma.XOR<Prisma.PastRunUpdateWithoutMmapInput, Prisma.PastRunUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.PastRunCreateWithoutMmapInput, Prisma.PastRunUncheckedCreateWithoutMmapInput>
}

export type PastRunUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.PastRunWhereUniqueInput
  data: Prisma.XOR<Prisma.PastRunUpdateWithoutMmapInput, Prisma.PastRunUncheckedUpdateWithoutMmapInput>
}

export type PastRunUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.PastRunScalarWhereInput
  data: Prisma.XOR<Prisma.PastRunUpdateManyMutationInput, Prisma.PastRunUncheckedUpdateManyWithoutMmapInput>
}

export type PastRunCreateWithoutLeaderboardRunInput = {
  id?: bigint | number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPastRunsInput
  mmap: Prisma.MMapCreateNestedOneWithoutPastRunsInput
}

export type PastRunUncheckedCreateWithoutLeaderboardRunInput = {
  id?: bigint | number
  userID: number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
}

export type PastRunCreateOrConnectWithoutLeaderboardRunInput = {
  where: Prisma.PastRunWhereUniqueInput
  create: Prisma.XOR<Prisma.PastRunCreateWithoutLeaderboardRunInput, Prisma.PastRunUncheckedCreateWithoutLeaderboardRunInput>
}

export type PastRunUpsertWithoutLeaderboardRunInput = {
  update: Prisma.XOR<Prisma.PastRunUpdateWithoutLeaderboardRunInput, Prisma.PastRunUncheckedUpdateWithoutLeaderboardRunInput>
  create: Prisma.XOR<Prisma.PastRunCreateWithoutLeaderboardRunInput, Prisma.PastRunUncheckedCreateWithoutLeaderboardRunInput>
  where?: Prisma.PastRunWhereInput
}

export type PastRunUpdateToOneWithWhereWithoutLeaderboardRunInput = {
  where?: Prisma.PastRunWhereInput
  data: Prisma.XOR<Prisma.PastRunUpdateWithoutLeaderboardRunInput, Prisma.PastRunUncheckedUpdateWithoutLeaderboardRunInput>
}

export type PastRunUpdateWithoutLeaderboardRunInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPastRunsNestedInput
  mmap?: Prisma.MMapUpdateOneRequiredWithoutPastRunsNestedInput
}

export type PastRunUncheckedUpdateWithoutLeaderboardRunInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PastRunCreateManyUserInput = {
  id?: bigint | number
  mapID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
}

export type PastRunUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mmap?: Prisma.MMapUpdateOneRequiredWithoutPastRunsNestedInput
  leaderboardRun?: Prisma.LeaderboardRunUpdateOneWithoutPastRunNestedInput
}

export type PastRunUncheckedUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leaderboardRun?: Prisma.LeaderboardRunUncheckedUpdateOneWithoutPastRunNestedInput
}

export type PastRunUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PastRunCreateManyMmapInput = {
  id?: bigint | number
  userID: number
  gamemode: number
  trackType: number
  trackNum: number
  style: number
  time: number
  flags?: Prisma.PastRunCreateflagsInput | number[]
  createdAt?: Date | string
}

export type PastRunUpdateWithoutMmapInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPastRunsNestedInput
  leaderboardRun?: Prisma.LeaderboardRunUpdateOneWithoutPastRunNestedInput
}

export type PastRunUncheckedUpdateWithoutMmapInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leaderboardRun?: Prisma.LeaderboardRunUncheckedUpdateOneWithoutPastRunNestedInput
}

export type PastRunUncheckedUpdateManyWithoutMmapInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  gamemode?: Prisma.IntFieldUpdateOperationsInput | number
  trackType?: Prisma.IntFieldUpdateOperationsInput | number
  trackNum?: Prisma.IntFieldUpdateOperationsInput | number
  style?: Prisma.IntFieldUpdateOperationsInput | number
  time?: Prisma.FloatFieldUpdateOperationsInput | number
  flags?: Prisma.PastRunUpdateflagsInput | number[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PastRunSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  flags?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  leaderboardRun?: boolean | Prisma.PastRun$leaderboardRunArgs<ExtArgs>
}, ExtArgs["result"]["pastRun"]>

export type PastRunSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  flags?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pastRun"]>

export type PastRunSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  flags?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pastRun"]>

export type PastRunSelectScalar = {
  id?: boolean
  userID?: boolean
  mapID?: boolean
  gamemode?: boolean
  trackType?: boolean
  trackNum?: boolean
  style?: boolean
  time?: boolean
  flags?: boolean
  createdAt?: boolean
}

export type PastRunOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userID" | "mapID" | "gamemode" | "trackType" | "trackNum" | "style" | "time" | "flags" | "createdAt", ExtArgs["result"]["pastRun"]>
export type PastRunInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  leaderboardRun?: boolean | Prisma.PastRun$leaderboardRunArgs<ExtArgs>
}
export type PastRunIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type PastRunIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}

export type $PastRunPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PastRun"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    mmap: Prisma.$MMapPayload<ExtArgs>
    leaderboardRun: Prisma.$LeaderboardRunPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    userID: number
    mapID: number
    gamemode: number
    trackType: number
    trackNum: number
    style: number
    time: number
    flags: number[]
    createdAt: Date
  }, ExtArgs["result"]["pastRun"]>
  composites: {}
}

export type PastRunGetPayload<S extends boolean | null | undefined | PastRunDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PastRunPayload, S>

export type PastRunCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PastRunFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PastRunCountAggregateInputType | true
  }

export interface PastRunDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PastRun'], meta: { name: 'PastRun' } }
  /**
   * Find zero or one PastRun that matches the filter.
   * @param {PastRunFindUniqueArgs} args - Arguments to find a PastRun
   * @example
   * // Get one PastRun
   * const pastRun = await prisma.pastRun.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PastRunFindUniqueArgs>(args: Prisma.SelectSubset<T, PastRunFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PastRun that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PastRunFindUniqueOrThrowArgs} args - Arguments to find a PastRun
   * @example
   * // Get one PastRun
   * const pastRun = await prisma.pastRun.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PastRunFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PastRunFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PastRun that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PastRunFindFirstArgs} args - Arguments to find a PastRun
   * @example
   * // Get one PastRun
   * const pastRun = await prisma.pastRun.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PastRunFindFirstArgs>(args?: Prisma.SelectSubset<T, PastRunFindFirstArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PastRun that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PastRunFindFirstOrThrowArgs} args - Arguments to find a PastRun
   * @example
   * // Get one PastRun
   * const pastRun = await prisma.pastRun.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PastRunFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PastRunFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PastRuns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PastRunFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PastRuns
   * const pastRuns = await prisma.pastRun.findMany()
   * 
   * // Get first 10 PastRuns
   * const pastRuns = await prisma.pastRun.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pastRunWithIdOnly = await prisma.pastRun.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PastRunFindManyArgs>(args?: Prisma.SelectSubset<T, PastRunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PastRun.
   * @param {PastRunCreateArgs} args - Arguments to create a PastRun.
   * @example
   * // Create one PastRun
   * const PastRun = await prisma.pastRun.create({
   *   data: {
   *     // ... data to create a PastRun
   *   }
   * })
   * 
   */
  create<T extends PastRunCreateArgs>(args: Prisma.SelectSubset<T, PastRunCreateArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PastRuns.
   * @param {PastRunCreateManyArgs} args - Arguments to create many PastRuns.
   * @example
   * // Create many PastRuns
   * const pastRun = await prisma.pastRun.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PastRunCreateManyArgs>(args?: Prisma.SelectSubset<T, PastRunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PastRuns and returns the data saved in the database.
   * @param {PastRunCreateManyAndReturnArgs} args - Arguments to create many PastRuns.
   * @example
   * // Create many PastRuns
   * const pastRun = await prisma.pastRun.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PastRuns and only return the `id`
   * const pastRunWithIdOnly = await prisma.pastRun.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PastRunCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PastRunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PastRun.
   * @param {PastRunDeleteArgs} args - Arguments to delete one PastRun.
   * @example
   * // Delete one PastRun
   * const PastRun = await prisma.pastRun.delete({
   *   where: {
   *     // ... filter to delete one PastRun
   *   }
   * })
   * 
   */
  delete<T extends PastRunDeleteArgs>(args: Prisma.SelectSubset<T, PastRunDeleteArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PastRun.
   * @param {PastRunUpdateArgs} args - Arguments to update one PastRun.
   * @example
   * // Update one PastRun
   * const pastRun = await prisma.pastRun.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PastRunUpdateArgs>(args: Prisma.SelectSubset<T, PastRunUpdateArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PastRuns.
   * @param {PastRunDeleteManyArgs} args - Arguments to filter PastRuns to delete.
   * @example
   * // Delete a few PastRuns
   * const { count } = await prisma.pastRun.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PastRunDeleteManyArgs>(args?: Prisma.SelectSubset<T, PastRunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PastRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PastRunUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PastRuns
   * const pastRun = await prisma.pastRun.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PastRunUpdateManyArgs>(args: Prisma.SelectSubset<T, PastRunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PastRuns and returns the data updated in the database.
   * @param {PastRunUpdateManyAndReturnArgs} args - Arguments to update many PastRuns.
   * @example
   * // Update many PastRuns
   * const pastRun = await prisma.pastRun.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PastRuns and only return the `id`
   * const pastRunWithIdOnly = await prisma.pastRun.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PastRunUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PastRunUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PastRun.
   * @param {PastRunUpsertArgs} args - Arguments to update or create a PastRun.
   * @example
   * // Update or create a PastRun
   * const pastRun = await prisma.pastRun.upsert({
   *   create: {
   *     // ... data to create a PastRun
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PastRun we want to update
   *   }
   * })
   */
  upsert<T extends PastRunUpsertArgs>(args: Prisma.SelectSubset<T, PastRunUpsertArgs<ExtArgs>>): Prisma.Prisma__PastRunClient<runtime.Types.Result.GetResult<Prisma.$PastRunPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PastRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PastRunCountArgs} args - Arguments to filter PastRuns to count.
   * @example
   * // Count the number of PastRuns
   * const count = await prisma.pastRun.count({
   *   where: {
   *     // ... the filter for the PastRuns we want to count
   *   }
   * })
  **/
  count<T extends PastRunCountArgs>(
    args?: Prisma.Subset<T, PastRunCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PastRunCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PastRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PastRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PastRunAggregateArgs>(args: Prisma.Subset<T, PastRunAggregateArgs>): Prisma.PrismaPromise<GetPastRunAggregateType<T>>

  /**
   * Group by PastRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PastRunGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PastRunGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PastRunGroupByArgs['orderBy'] }
      : { orderBy?: PastRunGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PastRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPastRunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PastRun model
 */
readonly fields: PastRunFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PastRun.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PastRunClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leaderboardRun<T extends Prisma.PastRun$leaderboardRunArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PastRun$leaderboardRunArgs<ExtArgs>>): Prisma.Prisma__LeaderboardRunClient<runtime.Types.Result.GetResult<Prisma.$LeaderboardRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PastRun model
 */
export interface PastRunFieldRefs {
  readonly id: Prisma.FieldRef<"PastRun", 'BigInt'>
  readonly userID: Prisma.FieldRef<"PastRun", 'Int'>
  readonly mapID: Prisma.FieldRef<"PastRun", 'Int'>
  readonly gamemode: Prisma.FieldRef<"PastRun", 'Int'>
  readonly trackType: Prisma.FieldRef<"PastRun", 'Int'>
  readonly trackNum: Prisma.FieldRef<"PastRun", 'Int'>
  readonly style: Prisma.FieldRef<"PastRun", 'Int'>
  readonly time: Prisma.FieldRef<"PastRun", 'Float'>
  readonly flags: Prisma.FieldRef<"PastRun", 'Int[]'>
  readonly createdAt: Prisma.FieldRef<"PastRun", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PastRun findUnique
 */
export type PastRunFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * Filter, which PastRun to fetch.
   */
  where: Prisma.PastRunWhereUniqueInput
}

/**
 * PastRun findUniqueOrThrow
 */
export type PastRunFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * Filter, which PastRun to fetch.
   */
  where: Prisma.PastRunWhereUniqueInput
}

/**
 * PastRun findFirst
 */
export type PastRunFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * Filter, which PastRun to fetch.
   */
  where?: Prisma.PastRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PastRuns to fetch.
   */
  orderBy?: Prisma.PastRunOrderByWithRelationInput | Prisma.PastRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PastRuns.
   */
  cursor?: Prisma.PastRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PastRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PastRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PastRuns.
   */
  distinct?: Prisma.PastRunScalarFieldEnum | Prisma.PastRunScalarFieldEnum[]
}

/**
 * PastRun findFirstOrThrow
 */
export type PastRunFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * Filter, which PastRun to fetch.
   */
  where?: Prisma.PastRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PastRuns to fetch.
   */
  orderBy?: Prisma.PastRunOrderByWithRelationInput | Prisma.PastRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PastRuns.
   */
  cursor?: Prisma.PastRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PastRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PastRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PastRuns.
   */
  distinct?: Prisma.PastRunScalarFieldEnum | Prisma.PastRunScalarFieldEnum[]
}

/**
 * PastRun findMany
 */
export type PastRunFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * Filter, which PastRuns to fetch.
   */
  where?: Prisma.PastRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PastRuns to fetch.
   */
  orderBy?: Prisma.PastRunOrderByWithRelationInput | Prisma.PastRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PastRuns.
   */
  cursor?: Prisma.PastRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PastRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PastRuns.
   */
  skip?: number
  distinct?: Prisma.PastRunScalarFieldEnum | Prisma.PastRunScalarFieldEnum[]
}

/**
 * PastRun create
 */
export type PastRunCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * The data needed to create a PastRun.
   */
  data: Prisma.XOR<Prisma.PastRunCreateInput, Prisma.PastRunUncheckedCreateInput>
}

/**
 * PastRun createMany
 */
export type PastRunCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PastRuns.
   */
  data: Prisma.PastRunCreateManyInput | Prisma.PastRunCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PastRun createManyAndReturn
 */
export type PastRunCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * The data used to create many PastRuns.
   */
  data: Prisma.PastRunCreateManyInput | Prisma.PastRunCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PastRun update
 */
export type PastRunUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * The data needed to update a PastRun.
   */
  data: Prisma.XOR<Prisma.PastRunUpdateInput, Prisma.PastRunUncheckedUpdateInput>
  /**
   * Choose, which PastRun to update.
   */
  where: Prisma.PastRunWhereUniqueInput
}

/**
 * PastRun updateMany
 */
export type PastRunUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PastRuns.
   */
  data: Prisma.XOR<Prisma.PastRunUpdateManyMutationInput, Prisma.PastRunUncheckedUpdateManyInput>
  /**
   * Filter which PastRuns to update
   */
  where?: Prisma.PastRunWhereInput
  /**
   * Limit how many PastRuns to update.
   */
  limit?: number
}

/**
 * PastRun updateManyAndReturn
 */
export type PastRunUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * The data used to update PastRuns.
   */
  data: Prisma.XOR<Prisma.PastRunUpdateManyMutationInput, Prisma.PastRunUncheckedUpdateManyInput>
  /**
   * Filter which PastRuns to update
   */
  where?: Prisma.PastRunWhereInput
  /**
   * Limit how many PastRuns to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PastRun upsert
 */
export type PastRunUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * The filter to search for the PastRun to update in case it exists.
   */
  where: Prisma.PastRunWhereUniqueInput
  /**
   * In case the PastRun found by the `where` argument doesn't exist, create a new PastRun with this data.
   */
  create: Prisma.XOR<Prisma.PastRunCreateInput, Prisma.PastRunUncheckedCreateInput>
  /**
   * In case the PastRun was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PastRunUpdateInput, Prisma.PastRunUncheckedUpdateInput>
}

/**
 * PastRun delete
 */
export type PastRunDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
  /**
   * Filter which PastRun to delete.
   */
  where: Prisma.PastRunWhereUniqueInput
}

/**
 * PastRun deleteMany
 */
export type PastRunDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PastRuns to delete
   */
  where?: Prisma.PastRunWhereInput
  /**
   * Limit how many PastRuns to delete.
   */
  limit?: number
}

/**
 * PastRun.leaderboardRun
 */
export type PastRun$leaderboardRunArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaderboardRun
   */
  select?: Prisma.LeaderboardRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LeaderboardRun
   */
  omit?: Prisma.LeaderboardRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeaderboardRunInclude<ExtArgs> | null
  where?: Prisma.LeaderboardRunWhereInput
}

/**
 * PastRun without action
 */
export type PastRunDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PastRun
   */
  select?: Prisma.PastRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PastRun
   */
  omit?: Prisma.PastRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PastRunInclude<ExtArgs> | null
}
