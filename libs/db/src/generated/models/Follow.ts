
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Follow` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Follow
 * 
 */
export type FollowModel = runtime.Types.Result.DefaultSelection<Prisma.$FollowPayload>

export type AggregateFollow = {
  _count: FollowCountAggregateOutputType | null
  _avg: FollowAvgAggregateOutputType | null
  _sum: FollowSumAggregateOutputType | null
  _min: FollowMinAggregateOutputType | null
  _max: FollowMaxAggregateOutputType | null
}

export type FollowAvgAggregateOutputType = {
  notifyOn: number | null
  followedID: number | null
  followeeID: number | null
}

export type FollowSumAggregateOutputType = {
  notifyOn: number | null
  followedID: number | null
  followeeID: number | null
}

export type FollowMinAggregateOutputType = {
  notifyOn: number | null
  followedID: number | null
  followeeID: number | null
  createdAt: Date | null
}

export type FollowMaxAggregateOutputType = {
  notifyOn: number | null
  followedID: number | null
  followeeID: number | null
  createdAt: Date | null
}

export type FollowCountAggregateOutputType = {
  notifyOn: number
  followedID: number
  followeeID: number
  createdAt: number
  _all: number
}


export type FollowAvgAggregateInputType = {
  notifyOn?: true
  followedID?: true
  followeeID?: true
}

export type FollowSumAggregateInputType = {
  notifyOn?: true
  followedID?: true
  followeeID?: true
}

export type FollowMinAggregateInputType = {
  notifyOn?: true
  followedID?: true
  followeeID?: true
  createdAt?: true
}

export type FollowMaxAggregateInputType = {
  notifyOn?: true
  followedID?: true
  followeeID?: true
  createdAt?: true
}

export type FollowCountAggregateInputType = {
  notifyOn?: true
  followedID?: true
  followeeID?: true
  createdAt?: true
  _all?: true
}

export type FollowAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Follow to aggregate.
   */
  where?: Prisma.FollowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Follows to fetch.
   */
  orderBy?: Prisma.FollowOrderByWithRelationInput | Prisma.FollowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FollowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Follows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Follows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Follows
  **/
  _count?: true | FollowCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FollowAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FollowSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FollowMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FollowMaxAggregateInputType
}

export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
      [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFollow[P]>
    : Prisma.GetScalarType<T[P], AggregateFollow[P]>
}




export type FollowGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FollowWhereInput
  orderBy?: Prisma.FollowOrderByWithAggregationInput | Prisma.FollowOrderByWithAggregationInput[]
  by: Prisma.FollowScalarFieldEnum[] | Prisma.FollowScalarFieldEnum
  having?: Prisma.FollowScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FollowCountAggregateInputType | true
  _avg?: FollowAvgAggregateInputType
  _sum?: FollowSumAggregateInputType
  _min?: FollowMinAggregateInputType
  _max?: FollowMaxAggregateInputType
}

export type FollowGroupByOutputType = {
  notifyOn: number
  followedID: number
  followeeID: number
  createdAt: Date
  _count: FollowCountAggregateOutputType | null
  _avg: FollowAvgAggregateOutputType | null
  _sum: FollowSumAggregateOutputType | null
  _min: FollowMinAggregateOutputType | null
  _max: FollowMaxAggregateOutputType | null
}

type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FollowGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FollowGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FollowGroupByOutputType[P]>
      }
    >
  >



export type FollowWhereInput = {
  AND?: Prisma.FollowWhereInput | Prisma.FollowWhereInput[]
  OR?: Prisma.FollowWhereInput[]
  NOT?: Prisma.FollowWhereInput | Prisma.FollowWhereInput[]
  notifyOn?: Prisma.IntFilter<"Follow"> | number
  followedID?: Prisma.IntFilter<"Follow"> | number
  followeeID?: Prisma.IntFilter<"Follow"> | number
  createdAt?: Prisma.DateTimeFilter<"Follow"> | Date | string
  followed?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  followee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type FollowOrderByWithRelationInput = {
  notifyOn?: Prisma.SortOrder
  followedID?: Prisma.SortOrder
  followeeID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  followed?: Prisma.UserOrderByWithRelationInput
  followee?: Prisma.UserOrderByWithRelationInput
}

export type FollowWhereUniqueInput = Prisma.AtLeast<{
  followeeID_followedID?: Prisma.FollowFolloweeIDFollowedIDCompoundUniqueInput
  AND?: Prisma.FollowWhereInput | Prisma.FollowWhereInput[]
  OR?: Prisma.FollowWhereInput[]
  NOT?: Prisma.FollowWhereInput | Prisma.FollowWhereInput[]
  notifyOn?: Prisma.IntFilter<"Follow"> | number
  followedID?: Prisma.IntFilter<"Follow"> | number
  followeeID?: Prisma.IntFilter<"Follow"> | number
  createdAt?: Prisma.DateTimeFilter<"Follow"> | Date | string
  followed?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  followee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "followeeID_followedID">

export type FollowOrderByWithAggregationInput = {
  notifyOn?: Prisma.SortOrder
  followedID?: Prisma.SortOrder
  followeeID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.FollowCountOrderByAggregateInput
  _avg?: Prisma.FollowAvgOrderByAggregateInput
  _max?: Prisma.FollowMaxOrderByAggregateInput
  _min?: Prisma.FollowMinOrderByAggregateInput
  _sum?: Prisma.FollowSumOrderByAggregateInput
}

export type FollowScalarWhereWithAggregatesInput = {
  AND?: Prisma.FollowScalarWhereWithAggregatesInput | Prisma.FollowScalarWhereWithAggregatesInput[]
  OR?: Prisma.FollowScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FollowScalarWhereWithAggregatesInput | Prisma.FollowScalarWhereWithAggregatesInput[]
  notifyOn?: Prisma.IntWithAggregatesFilter<"Follow"> | number
  followedID?: Prisma.IntWithAggregatesFilter<"Follow"> | number
  followeeID?: Prisma.IntWithAggregatesFilter<"Follow"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Follow"> | Date | string
}

export type FollowCreateInput = {
  notifyOn?: number
  createdAt?: Date | string
  followed: Prisma.UserCreateNestedOneWithoutFollowersInput
  followee: Prisma.UserCreateNestedOneWithoutFollowsInput
}

export type FollowUncheckedCreateInput = {
  notifyOn?: number
  followedID: number
  followeeID: number
  createdAt?: Date | string
}

export type FollowUpdateInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followed?: Prisma.UserUpdateOneRequiredWithoutFollowersNestedInput
  followee?: Prisma.UserUpdateOneRequiredWithoutFollowsNestedInput
}

export type FollowUncheckedUpdateInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  followedID?: Prisma.IntFieldUpdateOperationsInput | number
  followeeID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FollowCreateManyInput = {
  notifyOn?: number
  followedID: number
  followeeID: number
  createdAt?: Date | string
}

export type FollowUpdateManyMutationInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FollowUncheckedUpdateManyInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  followedID?: Prisma.IntFieldUpdateOperationsInput | number
  followeeID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FollowListRelationFilter = {
  every?: Prisma.FollowWhereInput
  some?: Prisma.FollowWhereInput
  none?: Prisma.FollowWhereInput
}

export type FollowOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FollowFolloweeIDFollowedIDCompoundUniqueInput = {
  followeeID: number
  followedID: number
}

export type FollowCountOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  followedID?: Prisma.SortOrder
  followeeID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FollowAvgOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  followedID?: Prisma.SortOrder
  followeeID?: Prisma.SortOrder
}

export type FollowMaxOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  followedID?: Prisma.SortOrder
  followeeID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FollowMinOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  followedID?: Prisma.SortOrder
  followeeID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FollowSumOrderByAggregateInput = {
  notifyOn?: Prisma.SortOrder
  followedID?: Prisma.SortOrder
  followeeID?: Prisma.SortOrder
}

export type FollowCreateNestedManyWithoutFolloweeInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFolloweeInput, Prisma.FollowUncheckedCreateWithoutFolloweeInput> | Prisma.FollowCreateWithoutFolloweeInput[] | Prisma.FollowUncheckedCreateWithoutFolloweeInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFolloweeInput | Prisma.FollowCreateOrConnectWithoutFolloweeInput[]
  createMany?: Prisma.FollowCreateManyFolloweeInputEnvelope
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
}

export type FollowCreateNestedManyWithoutFollowedInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFollowedInput, Prisma.FollowUncheckedCreateWithoutFollowedInput> | Prisma.FollowCreateWithoutFollowedInput[] | Prisma.FollowUncheckedCreateWithoutFollowedInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFollowedInput | Prisma.FollowCreateOrConnectWithoutFollowedInput[]
  createMany?: Prisma.FollowCreateManyFollowedInputEnvelope
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
}

export type FollowUncheckedCreateNestedManyWithoutFolloweeInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFolloweeInput, Prisma.FollowUncheckedCreateWithoutFolloweeInput> | Prisma.FollowCreateWithoutFolloweeInput[] | Prisma.FollowUncheckedCreateWithoutFolloweeInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFolloweeInput | Prisma.FollowCreateOrConnectWithoutFolloweeInput[]
  createMany?: Prisma.FollowCreateManyFolloweeInputEnvelope
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
}

export type FollowUncheckedCreateNestedManyWithoutFollowedInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFollowedInput, Prisma.FollowUncheckedCreateWithoutFollowedInput> | Prisma.FollowCreateWithoutFollowedInput[] | Prisma.FollowUncheckedCreateWithoutFollowedInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFollowedInput | Prisma.FollowCreateOrConnectWithoutFollowedInput[]
  createMany?: Prisma.FollowCreateManyFollowedInputEnvelope
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
}

export type FollowUpdateManyWithoutFolloweeNestedInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFolloweeInput, Prisma.FollowUncheckedCreateWithoutFolloweeInput> | Prisma.FollowCreateWithoutFolloweeInput[] | Prisma.FollowUncheckedCreateWithoutFolloweeInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFolloweeInput | Prisma.FollowCreateOrConnectWithoutFolloweeInput[]
  upsert?: Prisma.FollowUpsertWithWhereUniqueWithoutFolloweeInput | Prisma.FollowUpsertWithWhereUniqueWithoutFolloweeInput[]
  createMany?: Prisma.FollowCreateManyFolloweeInputEnvelope
  set?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  disconnect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  delete?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  update?: Prisma.FollowUpdateWithWhereUniqueWithoutFolloweeInput | Prisma.FollowUpdateWithWhereUniqueWithoutFolloweeInput[]
  updateMany?: Prisma.FollowUpdateManyWithWhereWithoutFolloweeInput | Prisma.FollowUpdateManyWithWhereWithoutFolloweeInput[]
  deleteMany?: Prisma.FollowScalarWhereInput | Prisma.FollowScalarWhereInput[]
}

export type FollowUpdateManyWithoutFollowedNestedInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFollowedInput, Prisma.FollowUncheckedCreateWithoutFollowedInput> | Prisma.FollowCreateWithoutFollowedInput[] | Prisma.FollowUncheckedCreateWithoutFollowedInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFollowedInput | Prisma.FollowCreateOrConnectWithoutFollowedInput[]
  upsert?: Prisma.FollowUpsertWithWhereUniqueWithoutFollowedInput | Prisma.FollowUpsertWithWhereUniqueWithoutFollowedInput[]
  createMany?: Prisma.FollowCreateManyFollowedInputEnvelope
  set?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  disconnect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  delete?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  update?: Prisma.FollowUpdateWithWhereUniqueWithoutFollowedInput | Prisma.FollowUpdateWithWhereUniqueWithoutFollowedInput[]
  updateMany?: Prisma.FollowUpdateManyWithWhereWithoutFollowedInput | Prisma.FollowUpdateManyWithWhereWithoutFollowedInput[]
  deleteMany?: Prisma.FollowScalarWhereInput | Prisma.FollowScalarWhereInput[]
}

export type FollowUncheckedUpdateManyWithoutFolloweeNestedInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFolloweeInput, Prisma.FollowUncheckedCreateWithoutFolloweeInput> | Prisma.FollowCreateWithoutFolloweeInput[] | Prisma.FollowUncheckedCreateWithoutFolloweeInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFolloweeInput | Prisma.FollowCreateOrConnectWithoutFolloweeInput[]
  upsert?: Prisma.FollowUpsertWithWhereUniqueWithoutFolloweeInput | Prisma.FollowUpsertWithWhereUniqueWithoutFolloweeInput[]
  createMany?: Prisma.FollowCreateManyFolloweeInputEnvelope
  set?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  disconnect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  delete?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  update?: Prisma.FollowUpdateWithWhereUniqueWithoutFolloweeInput | Prisma.FollowUpdateWithWhereUniqueWithoutFolloweeInput[]
  updateMany?: Prisma.FollowUpdateManyWithWhereWithoutFolloweeInput | Prisma.FollowUpdateManyWithWhereWithoutFolloweeInput[]
  deleteMany?: Prisma.FollowScalarWhereInput | Prisma.FollowScalarWhereInput[]
}

export type FollowUncheckedUpdateManyWithoutFollowedNestedInput = {
  create?: Prisma.XOR<Prisma.FollowCreateWithoutFollowedInput, Prisma.FollowUncheckedCreateWithoutFollowedInput> | Prisma.FollowCreateWithoutFollowedInput[] | Prisma.FollowUncheckedCreateWithoutFollowedInput[]
  connectOrCreate?: Prisma.FollowCreateOrConnectWithoutFollowedInput | Prisma.FollowCreateOrConnectWithoutFollowedInput[]
  upsert?: Prisma.FollowUpsertWithWhereUniqueWithoutFollowedInput | Prisma.FollowUpsertWithWhereUniqueWithoutFollowedInput[]
  createMany?: Prisma.FollowCreateManyFollowedInputEnvelope
  set?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  disconnect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  delete?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  connect?: Prisma.FollowWhereUniqueInput | Prisma.FollowWhereUniqueInput[]
  update?: Prisma.FollowUpdateWithWhereUniqueWithoutFollowedInput | Prisma.FollowUpdateWithWhereUniqueWithoutFollowedInput[]
  updateMany?: Prisma.FollowUpdateManyWithWhereWithoutFollowedInput | Prisma.FollowUpdateManyWithWhereWithoutFollowedInput[]
  deleteMany?: Prisma.FollowScalarWhereInput | Prisma.FollowScalarWhereInput[]
}

export type FollowCreateWithoutFolloweeInput = {
  notifyOn?: number
  createdAt?: Date | string
  followed: Prisma.UserCreateNestedOneWithoutFollowersInput
}

export type FollowUncheckedCreateWithoutFolloweeInput = {
  notifyOn?: number
  followedID: number
  createdAt?: Date | string
}

export type FollowCreateOrConnectWithoutFolloweeInput = {
  where: Prisma.FollowWhereUniqueInput
  create: Prisma.XOR<Prisma.FollowCreateWithoutFolloweeInput, Prisma.FollowUncheckedCreateWithoutFolloweeInput>
}

export type FollowCreateManyFolloweeInputEnvelope = {
  data: Prisma.FollowCreateManyFolloweeInput | Prisma.FollowCreateManyFolloweeInput[]
  skipDuplicates?: boolean
}

export type FollowCreateWithoutFollowedInput = {
  notifyOn?: number
  createdAt?: Date | string
  followee: Prisma.UserCreateNestedOneWithoutFollowsInput
}

export type FollowUncheckedCreateWithoutFollowedInput = {
  notifyOn?: number
  followeeID: number
  createdAt?: Date | string
}

export type FollowCreateOrConnectWithoutFollowedInput = {
  where: Prisma.FollowWhereUniqueInput
  create: Prisma.XOR<Prisma.FollowCreateWithoutFollowedInput, Prisma.FollowUncheckedCreateWithoutFollowedInput>
}

export type FollowCreateManyFollowedInputEnvelope = {
  data: Prisma.FollowCreateManyFollowedInput | Prisma.FollowCreateManyFollowedInput[]
  skipDuplicates?: boolean
}

export type FollowUpsertWithWhereUniqueWithoutFolloweeInput = {
  where: Prisma.FollowWhereUniqueInput
  update: Prisma.XOR<Prisma.FollowUpdateWithoutFolloweeInput, Prisma.FollowUncheckedUpdateWithoutFolloweeInput>
  create: Prisma.XOR<Prisma.FollowCreateWithoutFolloweeInput, Prisma.FollowUncheckedCreateWithoutFolloweeInput>
}

export type FollowUpdateWithWhereUniqueWithoutFolloweeInput = {
  where: Prisma.FollowWhereUniqueInput
  data: Prisma.XOR<Prisma.FollowUpdateWithoutFolloweeInput, Prisma.FollowUncheckedUpdateWithoutFolloweeInput>
}

export type FollowUpdateManyWithWhereWithoutFolloweeInput = {
  where: Prisma.FollowScalarWhereInput
  data: Prisma.XOR<Prisma.FollowUpdateManyMutationInput, Prisma.FollowUncheckedUpdateManyWithoutFolloweeInput>
}

export type FollowScalarWhereInput = {
  AND?: Prisma.FollowScalarWhereInput | Prisma.FollowScalarWhereInput[]
  OR?: Prisma.FollowScalarWhereInput[]
  NOT?: Prisma.FollowScalarWhereInput | Prisma.FollowScalarWhereInput[]
  notifyOn?: Prisma.IntFilter<"Follow"> | number
  followedID?: Prisma.IntFilter<"Follow"> | number
  followeeID?: Prisma.IntFilter<"Follow"> | number
  createdAt?: Prisma.DateTimeFilter<"Follow"> | Date | string
}

export type FollowUpsertWithWhereUniqueWithoutFollowedInput = {
  where: Prisma.FollowWhereUniqueInput
  update: Prisma.XOR<Prisma.FollowUpdateWithoutFollowedInput, Prisma.FollowUncheckedUpdateWithoutFollowedInput>
  create: Prisma.XOR<Prisma.FollowCreateWithoutFollowedInput, Prisma.FollowUncheckedCreateWithoutFollowedInput>
}

export type FollowUpdateWithWhereUniqueWithoutFollowedInput = {
  where: Prisma.FollowWhereUniqueInput
  data: Prisma.XOR<Prisma.FollowUpdateWithoutFollowedInput, Prisma.FollowUncheckedUpdateWithoutFollowedInput>
}

export type FollowUpdateManyWithWhereWithoutFollowedInput = {
  where: Prisma.FollowScalarWhereInput
  data: Prisma.XOR<Prisma.FollowUpdateManyMutationInput, Prisma.FollowUncheckedUpdateManyWithoutFollowedInput>
}

export type FollowCreateManyFolloweeInput = {
  notifyOn?: number
  followedID: number
  createdAt?: Date | string
}

export type FollowCreateManyFollowedInput = {
  notifyOn?: number
  followeeID: number
  createdAt?: Date | string
}

export type FollowUpdateWithoutFolloweeInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followed?: Prisma.UserUpdateOneRequiredWithoutFollowersNestedInput
}

export type FollowUncheckedUpdateWithoutFolloweeInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  followedID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FollowUncheckedUpdateManyWithoutFolloweeInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  followedID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FollowUpdateWithoutFollowedInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  followee?: Prisma.UserUpdateOneRequiredWithoutFollowsNestedInput
}

export type FollowUncheckedUpdateWithoutFollowedInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  followeeID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FollowUncheckedUpdateManyWithoutFollowedInput = {
  notifyOn?: Prisma.IntFieldUpdateOperationsInput | number
  followeeID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FollowSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  notifyOn?: boolean
  followedID?: boolean
  followeeID?: boolean
  createdAt?: boolean
  followed?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  followee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["follow"]>

export type FollowSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  notifyOn?: boolean
  followedID?: boolean
  followeeID?: boolean
  createdAt?: boolean
  followed?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  followee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["follow"]>

export type FollowSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  notifyOn?: boolean
  followedID?: boolean
  followeeID?: boolean
  createdAt?: boolean
  followed?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  followee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["follow"]>

export type FollowSelectScalar = {
  notifyOn?: boolean
  followedID?: boolean
  followeeID?: boolean
  createdAt?: boolean
}

export type FollowOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"notifyOn" | "followedID" | "followeeID" | "createdAt", ExtArgs["result"]["follow"]>
export type FollowInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  followed?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  followee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FollowIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  followed?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  followee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FollowIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  followed?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  followee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $FollowPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Follow"
  objects: {
    followed: Prisma.$UserPayload<ExtArgs>
    followee: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * Flags of activity-type.enum.ts
     */
    notifyOn: number
    followedID: number
    followeeID: number
    createdAt: Date
  }, ExtArgs["result"]["follow"]>
  composites: {}
}

export type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FollowPayload, S>

export type FollowCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FollowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FollowCountAggregateInputType | true
  }

export interface FollowDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
  /**
   * Find zero or one Follow that matches the filter.
   * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
   * @example
   * // Get one Follow
   * const follow = await prisma.follow.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FollowFindUniqueArgs>(args: Prisma.SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Follow that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
   * @example
   * // Get one Follow
   * const follow = await prisma.follow.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Follow that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FollowFindFirstArgs} args - Arguments to find a Follow
   * @example
   * // Get one Follow
   * const follow = await prisma.follow.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FollowFindFirstArgs>(args?: Prisma.SelectSubset<T, FollowFindFirstArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Follow that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
   * @example
   * // Get one Follow
   * const follow = await prisma.follow.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Follows that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Follows
   * const follows = await prisma.follow.findMany()
   * 
   * // Get first 10 Follows
   * const follows = await prisma.follow.findMany({ take: 10 })
   * 
   * // Only select the `notifyOn`
   * const followWithNotifyOnOnly = await prisma.follow.findMany({ select: { notifyOn: true } })
   * 
   */
  findMany<T extends FollowFindManyArgs>(args?: Prisma.SelectSubset<T, FollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Follow.
   * @param {FollowCreateArgs} args - Arguments to create a Follow.
   * @example
   * // Create one Follow
   * const Follow = await prisma.follow.create({
   *   data: {
   *     // ... data to create a Follow
   *   }
   * })
   * 
   */
  create<T extends FollowCreateArgs>(args: Prisma.SelectSubset<T, FollowCreateArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Follows.
   * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
   * @example
   * // Create many Follows
   * const follow = await prisma.follow.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FollowCreateManyArgs>(args?: Prisma.SelectSubset<T, FollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Follows and returns the data saved in the database.
   * @param {FollowCreateManyAndReturnArgs} args - Arguments to create many Follows.
   * @example
   * // Create many Follows
   * const follow = await prisma.follow.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Follows and only return the `notifyOn`
   * const followWithNotifyOnOnly = await prisma.follow.createManyAndReturn({
   *   select: { notifyOn: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FollowCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FollowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Follow.
   * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
   * @example
   * // Delete one Follow
   * const Follow = await prisma.follow.delete({
   *   where: {
   *     // ... filter to delete one Follow
   *   }
   * })
   * 
   */
  delete<T extends FollowDeleteArgs>(args: Prisma.SelectSubset<T, FollowDeleteArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Follow.
   * @param {FollowUpdateArgs} args - Arguments to update one Follow.
   * @example
   * // Update one Follow
   * const follow = await prisma.follow.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FollowUpdateArgs>(args: Prisma.SelectSubset<T, FollowUpdateArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Follows.
   * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
   * @example
   * // Delete a few Follows
   * const { count } = await prisma.follow.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FollowDeleteManyArgs>(args?: Prisma.SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Follows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Follows
   * const follow = await prisma.follow.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FollowUpdateManyArgs>(args: Prisma.SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Follows and returns the data updated in the database.
   * @param {FollowUpdateManyAndReturnArgs} args - Arguments to update many Follows.
   * @example
   * // Update many Follows
   * const follow = await prisma.follow.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Follows and only return the `notifyOn`
   * const followWithNotifyOnOnly = await prisma.follow.updateManyAndReturn({
   *   select: { notifyOn: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FollowUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FollowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Follow.
   * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
   * @example
   * // Update or create a Follow
   * const follow = await prisma.follow.upsert({
   *   create: {
   *     // ... data to create a Follow
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Follow we want to update
   *   }
   * })
   */
  upsert<T extends FollowUpsertArgs>(args: Prisma.SelectSubset<T, FollowUpsertArgs<ExtArgs>>): Prisma.Prisma__FollowClient<runtime.Types.Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Follows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FollowCountArgs} args - Arguments to filter Follows to count.
   * @example
   * // Count the number of Follows
   * const count = await prisma.follow.count({
   *   where: {
   *     // ... the filter for the Follows we want to count
   *   }
   * })
  **/
  count<T extends FollowCountArgs>(
    args?: Prisma.Subset<T, FollowCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FollowCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Follow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FollowAggregateArgs>(args: Prisma.Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

  /**
   * Group by Follow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FollowGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FollowGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FollowGroupByArgs['orderBy'] }
      : { orderBy?: FollowGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Follow model
 */
readonly fields: FollowFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Follow.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FollowClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  followed<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  followee<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Follow model
 */
export interface FollowFieldRefs {
  readonly notifyOn: Prisma.FieldRef<"Follow", 'Int'>
  readonly followedID: Prisma.FieldRef<"Follow", 'Int'>
  readonly followeeID: Prisma.FieldRef<"Follow", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Follow", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Follow findUnique
 */
export type FollowFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * Filter, which Follow to fetch.
   */
  where: Prisma.FollowWhereUniqueInput
}

/**
 * Follow findUniqueOrThrow
 */
export type FollowFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * Filter, which Follow to fetch.
   */
  where: Prisma.FollowWhereUniqueInput
}

/**
 * Follow findFirst
 */
export type FollowFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * Filter, which Follow to fetch.
   */
  where?: Prisma.FollowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Follows to fetch.
   */
  orderBy?: Prisma.FollowOrderByWithRelationInput | Prisma.FollowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Follows.
   */
  cursor?: Prisma.FollowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Follows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Follows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Follows.
   */
  distinct?: Prisma.FollowScalarFieldEnum | Prisma.FollowScalarFieldEnum[]
}

/**
 * Follow findFirstOrThrow
 */
export type FollowFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * Filter, which Follow to fetch.
   */
  where?: Prisma.FollowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Follows to fetch.
   */
  orderBy?: Prisma.FollowOrderByWithRelationInput | Prisma.FollowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Follows.
   */
  cursor?: Prisma.FollowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Follows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Follows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Follows.
   */
  distinct?: Prisma.FollowScalarFieldEnum | Prisma.FollowScalarFieldEnum[]
}

/**
 * Follow findMany
 */
export type FollowFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * Filter, which Follows to fetch.
   */
  where?: Prisma.FollowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Follows to fetch.
   */
  orderBy?: Prisma.FollowOrderByWithRelationInput | Prisma.FollowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Follows.
   */
  cursor?: Prisma.FollowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Follows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Follows.
   */
  skip?: number
  distinct?: Prisma.FollowScalarFieldEnum | Prisma.FollowScalarFieldEnum[]
}

/**
 * Follow create
 */
export type FollowCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * The data needed to create a Follow.
   */
  data: Prisma.XOR<Prisma.FollowCreateInput, Prisma.FollowUncheckedCreateInput>
}

/**
 * Follow createMany
 */
export type FollowCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Follows.
   */
  data: Prisma.FollowCreateManyInput | Prisma.FollowCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Follow createManyAndReturn
 */
export type FollowCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * The data used to create many Follows.
   */
  data: Prisma.FollowCreateManyInput | Prisma.FollowCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Follow update
 */
export type FollowUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * The data needed to update a Follow.
   */
  data: Prisma.XOR<Prisma.FollowUpdateInput, Prisma.FollowUncheckedUpdateInput>
  /**
   * Choose, which Follow to update.
   */
  where: Prisma.FollowWhereUniqueInput
}

/**
 * Follow updateMany
 */
export type FollowUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Follows.
   */
  data: Prisma.XOR<Prisma.FollowUpdateManyMutationInput, Prisma.FollowUncheckedUpdateManyInput>
  /**
   * Filter which Follows to update
   */
  where?: Prisma.FollowWhereInput
  /**
   * Limit how many Follows to update.
   */
  limit?: number
}

/**
 * Follow updateManyAndReturn
 */
export type FollowUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * The data used to update Follows.
   */
  data: Prisma.XOR<Prisma.FollowUpdateManyMutationInput, Prisma.FollowUncheckedUpdateManyInput>
  /**
   * Filter which Follows to update
   */
  where?: Prisma.FollowWhereInput
  /**
   * Limit how many Follows to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Follow upsert
 */
export type FollowUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * The filter to search for the Follow to update in case it exists.
   */
  where: Prisma.FollowWhereUniqueInput
  /**
   * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
   */
  create: Prisma.XOR<Prisma.FollowCreateInput, Prisma.FollowUncheckedCreateInput>
  /**
   * In case the Follow was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FollowUpdateInput, Prisma.FollowUncheckedUpdateInput>
}

/**
 * Follow delete
 */
export type FollowDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
  /**
   * Filter which Follow to delete.
   */
  where: Prisma.FollowWhereUniqueInput
}

/**
 * Follow deleteMany
 */
export type FollowDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Follows to delete
   */
  where?: Prisma.FollowWhereInput
  /**
   * Limit how many Follows to delete.
   */
  limit?: number
}

/**
 * Follow without action
 */
export type FollowDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Follow
   */
  select?: Prisma.FollowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Follow
   */
  omit?: Prisma.FollowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FollowInclude<ExtArgs> | null
}
