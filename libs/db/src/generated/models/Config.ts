
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Config` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Config
 * Not standard SQL practice but whatever, this is a solid way to persist
 * config
 */
export type ConfigModel = runtime.Types.Result.DefaultSelection<Prisma.$ConfigPayload>

export type AggregateConfig = {
  _count: ConfigCountAggregateOutputType | null
  _min: ConfigMinAggregateOutputType | null
  _max: ConfigMaxAggregateOutputType | null
}

export type ConfigMinAggregateOutputType = {
  id: string | null
}

export type ConfigMaxAggregateOutputType = {
  id: string | null
}

export type ConfigCountAggregateOutputType = {
  id: number
  value: number
  _all: number
}


export type ConfigMinAggregateInputType = {
  id?: true
}

export type ConfigMaxAggregateInputType = {
  id?: true
}

export type ConfigCountAggregateInputType = {
  id?: true
  value?: true
  _all?: true
}

export type ConfigAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Config to aggregate.
   */
  where?: Prisma.ConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Configs to fetch.
   */
  orderBy?: Prisma.ConfigOrderByWithRelationInput | Prisma.ConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Configs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Configs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Configs
  **/
  _count?: true | ConfigCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConfigMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConfigMaxAggregateInputType
}

export type GetConfigAggregateType<T extends ConfigAggregateArgs> = {
      [P in keyof T & keyof AggregateConfig]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConfig[P]>
    : Prisma.GetScalarType<T[P], AggregateConfig[P]>
}




export type ConfigGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConfigWhereInput
  orderBy?: Prisma.ConfigOrderByWithAggregationInput | Prisma.ConfigOrderByWithAggregationInput[]
  by: Prisma.ConfigScalarFieldEnum[] | Prisma.ConfigScalarFieldEnum
  having?: Prisma.ConfigScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConfigCountAggregateInputType | true
  _min?: ConfigMinAggregateInputType
  _max?: ConfigMaxAggregateInputType
}

export type ConfigGroupByOutputType = {
  id: string
  value: runtime.JsonValue
  _count: ConfigCountAggregateOutputType | null
  _min: ConfigMinAggregateOutputType | null
  _max: ConfigMaxAggregateOutputType | null
}

type GetConfigGroupByPayload<T extends ConfigGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConfigGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConfigGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConfigGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConfigGroupByOutputType[P]>
      }
    >
  >



export type ConfigWhereInput = {
  AND?: Prisma.ConfigWhereInput | Prisma.ConfigWhereInput[]
  OR?: Prisma.ConfigWhereInput[]
  NOT?: Prisma.ConfigWhereInput | Prisma.ConfigWhereInput[]
  id?: Prisma.StringFilter<"Config"> | string
  value?: Prisma.JsonFilter<"Config">
}

export type ConfigOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type ConfigWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ConfigWhereInput | Prisma.ConfigWhereInput[]
  OR?: Prisma.ConfigWhereInput[]
  NOT?: Prisma.ConfigWhereInput | Prisma.ConfigWhereInput[]
  value?: Prisma.JsonFilter<"Config">
}, "id">

export type ConfigOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  _count?: Prisma.ConfigCountOrderByAggregateInput
  _max?: Prisma.ConfigMaxOrderByAggregateInput
  _min?: Prisma.ConfigMinOrderByAggregateInput
}

export type ConfigScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConfigScalarWhereWithAggregatesInput | Prisma.ConfigScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConfigScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConfigScalarWhereWithAggregatesInput | Prisma.ConfigScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Config"> | string
  value?: Prisma.JsonWithAggregatesFilter<"Config">
}

export type ConfigCreateInput = {
  id: string
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ConfigUncheckedCreateInput = {
  id: string
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ConfigUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ConfigUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ConfigCreateManyInput = {
  id: string
  value: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ConfigUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ConfigUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ConfigCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type ConfigMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ConfigMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type ConfigSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
}, ExtArgs["result"]["config"]>

export type ConfigSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
}, ExtArgs["result"]["config"]>

export type ConfigSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  value?: boolean
}, ExtArgs["result"]["config"]>

export type ConfigSelectScalar = {
  id?: boolean
  value?: boolean
}

export type ConfigOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "value", ExtArgs["result"]["config"]>

export type $ConfigPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Config"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    value: runtime.JsonValue
  }, ExtArgs["result"]["config"]>
  composites: {}
}

export type ConfigGetPayload<S extends boolean | null | undefined | ConfigDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConfigPayload, S>

export type ConfigCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConfigCountAggregateInputType | true
  }

export interface ConfigDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Config'], meta: { name: 'Config' } }
  /**
   * Find zero or one Config that matches the filter.
   * @param {ConfigFindUniqueArgs} args - Arguments to find a Config
   * @example
   * // Get one Config
   * const config = await prisma.config.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConfigFindUniqueArgs>(args: Prisma.SelectSubset<T, ConfigFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Config that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConfigFindUniqueOrThrowArgs} args - Arguments to find a Config
   * @example
   * // Get one Config
   * const config = await prisma.config.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConfigFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Config that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigFindFirstArgs} args - Arguments to find a Config
   * @example
   * // Get one Config
   * const config = await prisma.config.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConfigFindFirstArgs>(args?: Prisma.SelectSubset<T, ConfigFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Config that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigFindFirstOrThrowArgs} args - Arguments to find a Config
   * @example
   * // Get one Config
   * const config = await prisma.config.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConfigFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Configs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Configs
   * const configs = await prisma.config.findMany()
   * 
   * // Get first 10 Configs
   * const configs = await prisma.config.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const configWithIdOnly = await prisma.config.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConfigFindManyArgs>(args?: Prisma.SelectSubset<T, ConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Config.
   * @param {ConfigCreateArgs} args - Arguments to create a Config.
   * @example
   * // Create one Config
   * const Config = await prisma.config.create({
   *   data: {
   *     // ... data to create a Config
   *   }
   * })
   * 
   */
  create<T extends ConfigCreateArgs>(args: Prisma.SelectSubset<T, ConfigCreateArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Configs.
   * @param {ConfigCreateManyArgs} args - Arguments to create many Configs.
   * @example
   * // Create many Configs
   * const config = await prisma.config.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConfigCreateManyArgs>(args?: Prisma.SelectSubset<T, ConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Configs and returns the data saved in the database.
   * @param {ConfigCreateManyAndReturnArgs} args - Arguments to create many Configs.
   * @example
   * // Create many Configs
   * const config = await prisma.config.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Configs and only return the `id`
   * const configWithIdOnly = await prisma.config.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConfigCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Config.
   * @param {ConfigDeleteArgs} args - Arguments to delete one Config.
   * @example
   * // Delete one Config
   * const Config = await prisma.config.delete({
   *   where: {
   *     // ... filter to delete one Config
   *   }
   * })
   * 
   */
  delete<T extends ConfigDeleteArgs>(args: Prisma.SelectSubset<T, ConfigDeleteArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Config.
   * @param {ConfigUpdateArgs} args - Arguments to update one Config.
   * @example
   * // Update one Config
   * const config = await prisma.config.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConfigUpdateArgs>(args: Prisma.SelectSubset<T, ConfigUpdateArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Configs.
   * @param {ConfigDeleteManyArgs} args - Arguments to filter Configs to delete.
   * @example
   * // Delete a few Configs
   * const { count } = await prisma.config.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConfigDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Configs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Configs
   * const config = await prisma.config.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConfigUpdateManyArgs>(args: Prisma.SelectSubset<T, ConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Configs and returns the data updated in the database.
   * @param {ConfigUpdateManyAndReturnArgs} args - Arguments to update many Configs.
   * @example
   * // Update many Configs
   * const config = await prisma.config.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Configs and only return the `id`
   * const configWithIdOnly = await prisma.config.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConfigUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Config.
   * @param {ConfigUpsertArgs} args - Arguments to update or create a Config.
   * @example
   * // Update or create a Config
   * const config = await prisma.config.upsert({
   *   create: {
   *     // ... data to create a Config
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Config we want to update
   *   }
   * })
   */
  upsert<T extends ConfigUpsertArgs>(args: Prisma.SelectSubset<T, ConfigUpsertArgs<ExtArgs>>): Prisma.Prisma__ConfigClient<runtime.Types.Result.GetResult<Prisma.$ConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Configs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigCountArgs} args - Arguments to filter Configs to count.
   * @example
   * // Count the number of Configs
   * const count = await prisma.config.count({
   *   where: {
   *     // ... the filter for the Configs we want to count
   *   }
   * })
  **/
  count<T extends ConfigCountArgs>(
    args?: Prisma.Subset<T, ConfigCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConfigCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Config.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConfigAggregateArgs>(args: Prisma.Subset<T, ConfigAggregateArgs>): Prisma.PrismaPromise<GetConfigAggregateType<T>>

  /**
   * Group by Config.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConfigGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConfigGroupByArgs['orderBy'] }
      : { orderBy?: ConfigGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Config model
 */
readonly fields: ConfigFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Config.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConfigClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Config model
 */
export interface ConfigFieldRefs {
  readonly id: Prisma.FieldRef<"Config", 'String'>
  readonly value: Prisma.FieldRef<"Config", 'Json'>
}
    

// Custom InputTypes
/**
 * Config findUnique
 */
export type ConfigFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * Filter, which Config to fetch.
   */
  where: Prisma.ConfigWhereUniqueInput
}

/**
 * Config findUniqueOrThrow
 */
export type ConfigFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * Filter, which Config to fetch.
   */
  where: Prisma.ConfigWhereUniqueInput
}

/**
 * Config findFirst
 */
export type ConfigFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * Filter, which Config to fetch.
   */
  where?: Prisma.ConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Configs to fetch.
   */
  orderBy?: Prisma.ConfigOrderByWithRelationInput | Prisma.ConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Configs.
   */
  cursor?: Prisma.ConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Configs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Configs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Configs.
   */
  distinct?: Prisma.ConfigScalarFieldEnum | Prisma.ConfigScalarFieldEnum[]
}

/**
 * Config findFirstOrThrow
 */
export type ConfigFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * Filter, which Config to fetch.
   */
  where?: Prisma.ConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Configs to fetch.
   */
  orderBy?: Prisma.ConfigOrderByWithRelationInput | Prisma.ConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Configs.
   */
  cursor?: Prisma.ConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Configs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Configs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Configs.
   */
  distinct?: Prisma.ConfigScalarFieldEnum | Prisma.ConfigScalarFieldEnum[]
}

/**
 * Config findMany
 */
export type ConfigFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * Filter, which Configs to fetch.
   */
  where?: Prisma.ConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Configs to fetch.
   */
  orderBy?: Prisma.ConfigOrderByWithRelationInput | Prisma.ConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Configs.
   */
  cursor?: Prisma.ConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Configs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Configs.
   */
  skip?: number
  distinct?: Prisma.ConfigScalarFieldEnum | Prisma.ConfigScalarFieldEnum[]
}

/**
 * Config create
 */
export type ConfigCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * The data needed to create a Config.
   */
  data: Prisma.XOR<Prisma.ConfigCreateInput, Prisma.ConfigUncheckedCreateInput>
}

/**
 * Config createMany
 */
export type ConfigCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Configs.
   */
  data: Prisma.ConfigCreateManyInput | Prisma.ConfigCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Config createManyAndReturn
 */
export type ConfigCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * The data used to create many Configs.
   */
  data: Prisma.ConfigCreateManyInput | Prisma.ConfigCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Config update
 */
export type ConfigUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * The data needed to update a Config.
   */
  data: Prisma.XOR<Prisma.ConfigUpdateInput, Prisma.ConfigUncheckedUpdateInput>
  /**
   * Choose, which Config to update.
   */
  where: Prisma.ConfigWhereUniqueInput
}

/**
 * Config updateMany
 */
export type ConfigUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Configs.
   */
  data: Prisma.XOR<Prisma.ConfigUpdateManyMutationInput, Prisma.ConfigUncheckedUpdateManyInput>
  /**
   * Filter which Configs to update
   */
  where?: Prisma.ConfigWhereInput
  /**
   * Limit how many Configs to update.
   */
  limit?: number
}

/**
 * Config updateManyAndReturn
 */
export type ConfigUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * The data used to update Configs.
   */
  data: Prisma.XOR<Prisma.ConfigUpdateManyMutationInput, Prisma.ConfigUncheckedUpdateManyInput>
  /**
   * Filter which Configs to update
   */
  where?: Prisma.ConfigWhereInput
  /**
   * Limit how many Configs to update.
   */
  limit?: number
}

/**
 * Config upsert
 */
export type ConfigUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * The filter to search for the Config to update in case it exists.
   */
  where: Prisma.ConfigWhereUniqueInput
  /**
   * In case the Config found by the `where` argument doesn't exist, create a new Config with this data.
   */
  create: Prisma.XOR<Prisma.ConfigCreateInput, Prisma.ConfigUncheckedCreateInput>
  /**
   * In case the Config was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConfigUpdateInput, Prisma.ConfigUncheckedUpdateInput>
}

/**
 * Config delete
 */
export type ConfigDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
  /**
   * Filter which Config to delete.
   */
  where: Prisma.ConfigWhereUniqueInput
}

/**
 * Config deleteMany
 */
export type ConfigDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Configs to delete
   */
  where?: Prisma.ConfigWhereInput
  /**
   * Limit how many Configs to delete.
   */
  limit?: number
}

/**
 * Config without action
 */
export type ConfigDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Config
   */
  select?: Prisma.ConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Config
   */
  omit?: Prisma.ConfigOmit<ExtArgs> | null
}
