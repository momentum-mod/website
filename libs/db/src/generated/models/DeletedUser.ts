
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DeletedUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DeletedUser
 * 
 */
export type DeletedUserModel = runtime.Types.Result.DefaultSelection<Prisma.$DeletedUserPayload>

export type AggregateDeletedUser = {
  _count: DeletedUserCountAggregateOutputType | null
  _min: DeletedUserMinAggregateOutputType | null
  _max: DeletedUserMaxAggregateOutputType | null
}

export type DeletedUserMinAggregateOutputType = {
  steamIDHash: string | null
}

export type DeletedUserMaxAggregateOutputType = {
  steamIDHash: string | null
}

export type DeletedUserCountAggregateOutputType = {
  steamIDHash: number
  _all: number
}


export type DeletedUserMinAggregateInputType = {
  steamIDHash?: true
}

export type DeletedUserMaxAggregateInputType = {
  steamIDHash?: true
}

export type DeletedUserCountAggregateInputType = {
  steamIDHash?: true
  _all?: true
}

export type DeletedUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DeletedUser to aggregate.
   */
  where?: Prisma.DeletedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeletedUsers to fetch.
   */
  orderBy?: Prisma.DeletedUserOrderByWithRelationInput | Prisma.DeletedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DeletedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DeletedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeletedUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DeletedUsers
  **/
  _count?: true | DeletedUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DeletedUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DeletedUserMaxAggregateInputType
}

export type GetDeletedUserAggregateType<T extends DeletedUserAggregateArgs> = {
      [P in keyof T & keyof AggregateDeletedUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDeletedUser[P]>
    : Prisma.GetScalarType<T[P], AggregateDeletedUser[P]>
}




export type DeletedUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DeletedUserWhereInput
  orderBy?: Prisma.DeletedUserOrderByWithAggregationInput | Prisma.DeletedUserOrderByWithAggregationInput[]
  by: Prisma.DeletedUserScalarFieldEnum[] | Prisma.DeletedUserScalarFieldEnum
  having?: Prisma.DeletedUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DeletedUserCountAggregateInputType | true
  _min?: DeletedUserMinAggregateInputType
  _max?: DeletedUserMaxAggregateInputType
}

export type DeletedUserGroupByOutputType = {
  steamIDHash: string
  _count: DeletedUserCountAggregateOutputType | null
  _min: DeletedUserMinAggregateOutputType | null
  _max: DeletedUserMaxAggregateOutputType | null
}

type GetDeletedUserGroupByPayload<T extends DeletedUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DeletedUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DeletedUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DeletedUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DeletedUserGroupByOutputType[P]>
      }
    >
  >



export type DeletedUserWhereInput = {
  AND?: Prisma.DeletedUserWhereInput | Prisma.DeletedUserWhereInput[]
  OR?: Prisma.DeletedUserWhereInput[]
  NOT?: Prisma.DeletedUserWhereInput | Prisma.DeletedUserWhereInput[]
  steamIDHash?: Prisma.StringFilter<"DeletedUser"> | string
}

export type DeletedUserOrderByWithRelationInput = {
  steamIDHash?: Prisma.SortOrder
}

export type DeletedUserWhereUniqueInput = Prisma.AtLeast<{
  steamIDHash?: string
  AND?: Prisma.DeletedUserWhereInput | Prisma.DeletedUserWhereInput[]
  OR?: Prisma.DeletedUserWhereInput[]
  NOT?: Prisma.DeletedUserWhereInput | Prisma.DeletedUserWhereInput[]
}, "steamIDHash">

export type DeletedUserOrderByWithAggregationInput = {
  steamIDHash?: Prisma.SortOrder
  _count?: Prisma.DeletedUserCountOrderByAggregateInput
  _max?: Prisma.DeletedUserMaxOrderByAggregateInput
  _min?: Prisma.DeletedUserMinOrderByAggregateInput
}

export type DeletedUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.DeletedUserScalarWhereWithAggregatesInput | Prisma.DeletedUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.DeletedUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DeletedUserScalarWhereWithAggregatesInput | Prisma.DeletedUserScalarWhereWithAggregatesInput[]
  steamIDHash?: Prisma.StringWithAggregatesFilter<"DeletedUser"> | string
}

export type DeletedUserCreateInput = {
  steamIDHash: string
}

export type DeletedUserUncheckedCreateInput = {
  steamIDHash: string
}

export type DeletedUserUpdateInput = {
  steamIDHash?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DeletedUserUncheckedUpdateInput = {
  steamIDHash?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DeletedUserCreateManyInput = {
  steamIDHash: string
}

export type DeletedUserUpdateManyMutationInput = {
  steamIDHash?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DeletedUserUncheckedUpdateManyInput = {
  steamIDHash?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DeletedUserCountOrderByAggregateInput = {
  steamIDHash?: Prisma.SortOrder
}

export type DeletedUserMaxOrderByAggregateInput = {
  steamIDHash?: Prisma.SortOrder
}

export type DeletedUserMinOrderByAggregateInput = {
  steamIDHash?: Prisma.SortOrder
}



export type DeletedUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  steamIDHash?: boolean
}, ExtArgs["result"]["deletedUser"]>

export type DeletedUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  steamIDHash?: boolean
}, ExtArgs["result"]["deletedUser"]>

export type DeletedUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  steamIDHash?: boolean
}, ExtArgs["result"]["deletedUser"]>

export type DeletedUserSelectScalar = {
  steamIDHash?: boolean
}

export type DeletedUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"steamIDHash", ExtArgs["result"]["deletedUser"]>

export type $DeletedUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DeletedUser"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * SHA-256 hex hash of steamID
     */
    steamIDHash: string
  }, ExtArgs["result"]["deletedUser"]>
  composites: {}
}

export type DeletedUserGetPayload<S extends boolean | null | undefined | DeletedUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload, S>

export type DeletedUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DeletedUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DeletedUserCountAggregateInputType | true
  }

export interface DeletedUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeletedUser'], meta: { name: 'DeletedUser' } }
  /**
   * Find zero or one DeletedUser that matches the filter.
   * @param {DeletedUserFindUniqueArgs} args - Arguments to find a DeletedUser
   * @example
   * // Get one DeletedUser
   * const deletedUser = await prisma.deletedUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DeletedUserFindUniqueArgs>(args: Prisma.SelectSubset<T, DeletedUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DeletedUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DeletedUserFindUniqueOrThrowArgs} args - Arguments to find a DeletedUser
   * @example
   * // Get one DeletedUser
   * const deletedUser = await prisma.deletedUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DeletedUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DeletedUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DeletedUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeletedUserFindFirstArgs} args - Arguments to find a DeletedUser
   * @example
   * // Get one DeletedUser
   * const deletedUser = await prisma.deletedUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DeletedUserFindFirstArgs>(args?: Prisma.SelectSubset<T, DeletedUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DeletedUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeletedUserFindFirstOrThrowArgs} args - Arguments to find a DeletedUser
   * @example
   * // Get one DeletedUser
   * const deletedUser = await prisma.deletedUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DeletedUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DeletedUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DeletedUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeletedUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DeletedUsers
   * const deletedUsers = await prisma.deletedUser.findMany()
   * 
   * // Get first 10 DeletedUsers
   * const deletedUsers = await prisma.deletedUser.findMany({ take: 10 })
   * 
   * // Only select the `steamIDHash`
   * const deletedUserWithSteamIDHashOnly = await prisma.deletedUser.findMany({ select: { steamIDHash: true } })
   * 
   */
  findMany<T extends DeletedUserFindManyArgs>(args?: Prisma.SelectSubset<T, DeletedUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DeletedUser.
   * @param {DeletedUserCreateArgs} args - Arguments to create a DeletedUser.
   * @example
   * // Create one DeletedUser
   * const DeletedUser = await prisma.deletedUser.create({
   *   data: {
   *     // ... data to create a DeletedUser
   *   }
   * })
   * 
   */
  create<T extends DeletedUserCreateArgs>(args: Prisma.SelectSubset<T, DeletedUserCreateArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DeletedUsers.
   * @param {DeletedUserCreateManyArgs} args - Arguments to create many DeletedUsers.
   * @example
   * // Create many DeletedUsers
   * const deletedUser = await prisma.deletedUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DeletedUserCreateManyArgs>(args?: Prisma.SelectSubset<T, DeletedUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DeletedUsers and returns the data saved in the database.
   * @param {DeletedUserCreateManyAndReturnArgs} args - Arguments to create many DeletedUsers.
   * @example
   * // Create many DeletedUsers
   * const deletedUser = await prisma.deletedUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DeletedUsers and only return the `steamIDHash`
   * const deletedUserWithSteamIDHashOnly = await prisma.deletedUser.createManyAndReturn({
   *   select: { steamIDHash: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DeletedUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DeletedUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DeletedUser.
   * @param {DeletedUserDeleteArgs} args - Arguments to delete one DeletedUser.
   * @example
   * // Delete one DeletedUser
   * const DeletedUser = await prisma.deletedUser.delete({
   *   where: {
   *     // ... filter to delete one DeletedUser
   *   }
   * })
   * 
   */
  delete<T extends DeletedUserDeleteArgs>(args: Prisma.SelectSubset<T, DeletedUserDeleteArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DeletedUser.
   * @param {DeletedUserUpdateArgs} args - Arguments to update one DeletedUser.
   * @example
   * // Update one DeletedUser
   * const deletedUser = await prisma.deletedUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DeletedUserUpdateArgs>(args: Prisma.SelectSubset<T, DeletedUserUpdateArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DeletedUsers.
   * @param {DeletedUserDeleteManyArgs} args - Arguments to filter DeletedUsers to delete.
   * @example
   * // Delete a few DeletedUsers
   * const { count } = await prisma.deletedUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DeletedUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, DeletedUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DeletedUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeletedUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DeletedUsers
   * const deletedUser = await prisma.deletedUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DeletedUserUpdateManyArgs>(args: Prisma.SelectSubset<T, DeletedUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DeletedUsers and returns the data updated in the database.
   * @param {DeletedUserUpdateManyAndReturnArgs} args - Arguments to update many DeletedUsers.
   * @example
   * // Update many DeletedUsers
   * const deletedUser = await prisma.deletedUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DeletedUsers and only return the `steamIDHash`
   * const deletedUserWithSteamIDHashOnly = await prisma.deletedUser.updateManyAndReturn({
   *   select: { steamIDHash: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DeletedUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DeletedUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DeletedUser.
   * @param {DeletedUserUpsertArgs} args - Arguments to update or create a DeletedUser.
   * @example
   * // Update or create a DeletedUser
   * const deletedUser = await prisma.deletedUser.upsert({
   *   create: {
   *     // ... data to create a DeletedUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DeletedUser we want to update
   *   }
   * })
   */
  upsert<T extends DeletedUserUpsertArgs>(args: Prisma.SelectSubset<T, DeletedUserUpsertArgs<ExtArgs>>): Prisma.Prisma__DeletedUserClient<runtime.Types.Result.GetResult<Prisma.$DeletedUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DeletedUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeletedUserCountArgs} args - Arguments to filter DeletedUsers to count.
   * @example
   * // Count the number of DeletedUsers
   * const count = await prisma.deletedUser.count({
   *   where: {
   *     // ... the filter for the DeletedUsers we want to count
   *   }
   * })
  **/
  count<T extends DeletedUserCountArgs>(
    args?: Prisma.Subset<T, DeletedUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DeletedUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DeletedUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeletedUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DeletedUserAggregateArgs>(args: Prisma.Subset<T, DeletedUserAggregateArgs>): Prisma.PrismaPromise<GetDeletedUserAggregateType<T>>

  /**
   * Group by DeletedUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeletedUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DeletedUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DeletedUserGroupByArgs['orderBy'] }
      : { orderBy?: DeletedUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DeletedUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeletedUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DeletedUser model
 */
readonly fields: DeletedUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DeletedUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DeletedUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DeletedUser model
 */
export interface DeletedUserFieldRefs {
  readonly steamIDHash: Prisma.FieldRef<"DeletedUser", 'String'>
}
    

// Custom InputTypes
/**
 * DeletedUser findUnique
 */
export type DeletedUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * Filter, which DeletedUser to fetch.
   */
  where: Prisma.DeletedUserWhereUniqueInput
}

/**
 * DeletedUser findUniqueOrThrow
 */
export type DeletedUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * Filter, which DeletedUser to fetch.
   */
  where: Prisma.DeletedUserWhereUniqueInput
}

/**
 * DeletedUser findFirst
 */
export type DeletedUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * Filter, which DeletedUser to fetch.
   */
  where?: Prisma.DeletedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeletedUsers to fetch.
   */
  orderBy?: Prisma.DeletedUserOrderByWithRelationInput | Prisma.DeletedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DeletedUsers.
   */
  cursor?: Prisma.DeletedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DeletedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeletedUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DeletedUsers.
   */
  distinct?: Prisma.DeletedUserScalarFieldEnum | Prisma.DeletedUserScalarFieldEnum[]
}

/**
 * DeletedUser findFirstOrThrow
 */
export type DeletedUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * Filter, which DeletedUser to fetch.
   */
  where?: Prisma.DeletedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeletedUsers to fetch.
   */
  orderBy?: Prisma.DeletedUserOrderByWithRelationInput | Prisma.DeletedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DeletedUsers.
   */
  cursor?: Prisma.DeletedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DeletedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeletedUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DeletedUsers.
   */
  distinct?: Prisma.DeletedUserScalarFieldEnum | Prisma.DeletedUserScalarFieldEnum[]
}

/**
 * DeletedUser findMany
 */
export type DeletedUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * Filter, which DeletedUsers to fetch.
   */
  where?: Prisma.DeletedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DeletedUsers to fetch.
   */
  orderBy?: Prisma.DeletedUserOrderByWithRelationInput | Prisma.DeletedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DeletedUsers.
   */
  cursor?: Prisma.DeletedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DeletedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DeletedUsers.
   */
  skip?: number
  distinct?: Prisma.DeletedUserScalarFieldEnum | Prisma.DeletedUserScalarFieldEnum[]
}

/**
 * DeletedUser create
 */
export type DeletedUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * The data needed to create a DeletedUser.
   */
  data: Prisma.XOR<Prisma.DeletedUserCreateInput, Prisma.DeletedUserUncheckedCreateInput>
}

/**
 * DeletedUser createMany
 */
export type DeletedUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DeletedUsers.
   */
  data: Prisma.DeletedUserCreateManyInput | Prisma.DeletedUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DeletedUser createManyAndReturn
 */
export type DeletedUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * The data used to create many DeletedUsers.
   */
  data: Prisma.DeletedUserCreateManyInput | Prisma.DeletedUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DeletedUser update
 */
export type DeletedUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * The data needed to update a DeletedUser.
   */
  data: Prisma.XOR<Prisma.DeletedUserUpdateInput, Prisma.DeletedUserUncheckedUpdateInput>
  /**
   * Choose, which DeletedUser to update.
   */
  where: Prisma.DeletedUserWhereUniqueInput
}

/**
 * DeletedUser updateMany
 */
export type DeletedUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DeletedUsers.
   */
  data: Prisma.XOR<Prisma.DeletedUserUpdateManyMutationInput, Prisma.DeletedUserUncheckedUpdateManyInput>
  /**
   * Filter which DeletedUsers to update
   */
  where?: Prisma.DeletedUserWhereInput
  /**
   * Limit how many DeletedUsers to update.
   */
  limit?: number
}

/**
 * DeletedUser updateManyAndReturn
 */
export type DeletedUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * The data used to update DeletedUsers.
   */
  data: Prisma.XOR<Prisma.DeletedUserUpdateManyMutationInput, Prisma.DeletedUserUncheckedUpdateManyInput>
  /**
   * Filter which DeletedUsers to update
   */
  where?: Prisma.DeletedUserWhereInput
  /**
   * Limit how many DeletedUsers to update.
   */
  limit?: number
}

/**
 * DeletedUser upsert
 */
export type DeletedUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * The filter to search for the DeletedUser to update in case it exists.
   */
  where: Prisma.DeletedUserWhereUniqueInput
  /**
   * In case the DeletedUser found by the `where` argument doesn't exist, create a new DeletedUser with this data.
   */
  create: Prisma.XOR<Prisma.DeletedUserCreateInput, Prisma.DeletedUserUncheckedCreateInput>
  /**
   * In case the DeletedUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DeletedUserUpdateInput, Prisma.DeletedUserUncheckedUpdateInput>
}

/**
 * DeletedUser delete
 */
export type DeletedUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
  /**
   * Filter which DeletedUser to delete.
   */
  where: Prisma.DeletedUserWhereUniqueInput
}

/**
 * DeletedUser deleteMany
 */
export type DeletedUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DeletedUsers to delete
   */
  where?: Prisma.DeletedUserWhereInput
  /**
   * Limit how many DeletedUsers to delete.
   */
  limit?: number
}

/**
 * DeletedUser without action
 */
export type DeletedUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeletedUser
   */
  select?: Prisma.DeletedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DeletedUser
   */
  omit?: Prisma.DeletedUserOmit<ExtArgs> | null
}
