
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapStats` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapStats
 * 
 */
export type MapStatsModel = runtime.Types.Result.DefaultSelection<Prisma.$MapStatsPayload>

export type AggregateMapStats = {
  _count: MapStatsCountAggregateOutputType | null
  _avg: MapStatsAvgAggregateOutputType | null
  _sum: MapStatsSumAggregateOutputType | null
  _min: MapStatsMinAggregateOutputType | null
  _max: MapStatsMaxAggregateOutputType | null
}

export type MapStatsAvgAggregateOutputType = {
  reviews: number | null
  subscriptions: number | null
  plays: number | null
  favorites: number | null
  completions: number | null
  uniqueCompletions: number | null
  timePlayed: number | null
  mapID: number | null
}

export type MapStatsSumAggregateOutputType = {
  reviews: number | null
  subscriptions: number | null
  plays: number | null
  favorites: number | null
  completions: number | null
  uniqueCompletions: number | null
  timePlayed: bigint | null
  mapID: number | null
}

export type MapStatsMinAggregateOutputType = {
  reviews: number | null
  subscriptions: number | null
  plays: number | null
  favorites: number | null
  completions: number | null
  uniqueCompletions: number | null
  timePlayed: bigint | null
  mapID: number | null
}

export type MapStatsMaxAggregateOutputType = {
  reviews: number | null
  subscriptions: number | null
  plays: number | null
  favorites: number | null
  completions: number | null
  uniqueCompletions: number | null
  timePlayed: bigint | null
  mapID: number | null
}

export type MapStatsCountAggregateOutputType = {
  reviews: number
  subscriptions: number
  plays: number
  favorites: number
  completions: number
  uniqueCompletions: number
  timePlayed: number
  mapID: number
  _all: number
}


export type MapStatsAvgAggregateInputType = {
  reviews?: true
  subscriptions?: true
  plays?: true
  favorites?: true
  completions?: true
  uniqueCompletions?: true
  timePlayed?: true
  mapID?: true
}

export type MapStatsSumAggregateInputType = {
  reviews?: true
  subscriptions?: true
  plays?: true
  favorites?: true
  completions?: true
  uniqueCompletions?: true
  timePlayed?: true
  mapID?: true
}

export type MapStatsMinAggregateInputType = {
  reviews?: true
  subscriptions?: true
  plays?: true
  favorites?: true
  completions?: true
  uniqueCompletions?: true
  timePlayed?: true
  mapID?: true
}

export type MapStatsMaxAggregateInputType = {
  reviews?: true
  subscriptions?: true
  plays?: true
  favorites?: true
  completions?: true
  uniqueCompletions?: true
  timePlayed?: true
  mapID?: true
}

export type MapStatsCountAggregateInputType = {
  reviews?: true
  subscriptions?: true
  plays?: true
  favorites?: true
  completions?: true
  uniqueCompletions?: true
  timePlayed?: true
  mapID?: true
  _all?: true
}

export type MapStatsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapStats to aggregate.
   */
  where?: Prisma.MapStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapStats to fetch.
   */
  orderBy?: Prisma.MapStatsOrderByWithRelationInput | Prisma.MapStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapStats
  **/
  _count?: true | MapStatsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapStatsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapStatsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapStatsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapStatsMaxAggregateInputType
}

export type GetMapStatsAggregateType<T extends MapStatsAggregateArgs> = {
      [P in keyof T & keyof AggregateMapStats]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapStats[P]>
    : Prisma.GetScalarType<T[P], AggregateMapStats[P]>
}




export type MapStatsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapStatsWhereInput
  orderBy?: Prisma.MapStatsOrderByWithAggregationInput | Prisma.MapStatsOrderByWithAggregationInput[]
  by: Prisma.MapStatsScalarFieldEnum[] | Prisma.MapStatsScalarFieldEnum
  having?: Prisma.MapStatsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapStatsCountAggregateInputType | true
  _avg?: MapStatsAvgAggregateInputType
  _sum?: MapStatsSumAggregateInputType
  _min?: MapStatsMinAggregateInputType
  _max?: MapStatsMaxAggregateInputType
}

export type MapStatsGroupByOutputType = {
  reviews: number
  subscriptions: number
  plays: number
  favorites: number
  completions: number
  uniqueCompletions: number
  timePlayed: bigint
  mapID: number
  _count: MapStatsCountAggregateOutputType | null
  _avg: MapStatsAvgAggregateOutputType | null
  _sum: MapStatsSumAggregateOutputType | null
  _min: MapStatsMinAggregateOutputType | null
  _max: MapStatsMaxAggregateOutputType | null
}

type GetMapStatsGroupByPayload<T extends MapStatsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapStatsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapStatsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapStatsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapStatsGroupByOutputType[P]>
      }
    >
  >



export type MapStatsWhereInput = {
  AND?: Prisma.MapStatsWhereInput | Prisma.MapStatsWhereInput[]
  OR?: Prisma.MapStatsWhereInput[]
  NOT?: Prisma.MapStatsWhereInput | Prisma.MapStatsWhereInput[]
  reviews?: Prisma.IntFilter<"MapStats"> | number
  subscriptions?: Prisma.IntFilter<"MapStats"> | number
  plays?: Prisma.IntFilter<"MapStats"> | number
  favorites?: Prisma.IntFilter<"MapStats"> | number
  completions?: Prisma.IntFilter<"MapStats"> | number
  uniqueCompletions?: Prisma.IntFilter<"MapStats"> | number
  timePlayed?: Prisma.BigIntFilter<"MapStats"> | bigint | number
  mapID?: Prisma.IntFilter<"MapStats"> | number
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}

export type MapStatsOrderByWithRelationInput = {
  reviews?: Prisma.SortOrder
  subscriptions?: Prisma.SortOrder
  plays?: Prisma.SortOrder
  favorites?: Prisma.SortOrder
  completions?: Prisma.SortOrder
  uniqueCompletions?: Prisma.SortOrder
  timePlayed?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
}

export type MapStatsWhereUniqueInput = Prisma.AtLeast<{
  mapID?: number
  AND?: Prisma.MapStatsWhereInput | Prisma.MapStatsWhereInput[]
  OR?: Prisma.MapStatsWhereInput[]
  NOT?: Prisma.MapStatsWhereInput | Prisma.MapStatsWhereInput[]
  reviews?: Prisma.IntFilter<"MapStats"> | number
  subscriptions?: Prisma.IntFilter<"MapStats"> | number
  plays?: Prisma.IntFilter<"MapStats"> | number
  favorites?: Prisma.IntFilter<"MapStats"> | number
  completions?: Prisma.IntFilter<"MapStats"> | number
  uniqueCompletions?: Prisma.IntFilter<"MapStats"> | number
  timePlayed?: Prisma.BigIntFilter<"MapStats"> | bigint | number
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}, "mapID">

export type MapStatsOrderByWithAggregationInput = {
  reviews?: Prisma.SortOrder
  subscriptions?: Prisma.SortOrder
  plays?: Prisma.SortOrder
  favorites?: Prisma.SortOrder
  completions?: Prisma.SortOrder
  uniqueCompletions?: Prisma.SortOrder
  timePlayed?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  _count?: Prisma.MapStatsCountOrderByAggregateInput
  _avg?: Prisma.MapStatsAvgOrderByAggregateInput
  _max?: Prisma.MapStatsMaxOrderByAggregateInput
  _min?: Prisma.MapStatsMinOrderByAggregateInput
  _sum?: Prisma.MapStatsSumOrderByAggregateInput
}

export type MapStatsScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapStatsScalarWhereWithAggregatesInput | Prisma.MapStatsScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapStatsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapStatsScalarWhereWithAggregatesInput | Prisma.MapStatsScalarWhereWithAggregatesInput[]
  reviews?: Prisma.IntWithAggregatesFilter<"MapStats"> | number
  subscriptions?: Prisma.IntWithAggregatesFilter<"MapStats"> | number
  plays?: Prisma.IntWithAggregatesFilter<"MapStats"> | number
  favorites?: Prisma.IntWithAggregatesFilter<"MapStats"> | number
  completions?: Prisma.IntWithAggregatesFilter<"MapStats"> | number
  uniqueCompletions?: Prisma.IntWithAggregatesFilter<"MapStats"> | number
  timePlayed?: Prisma.BigIntWithAggregatesFilter<"MapStats"> | bigint | number
  mapID?: Prisma.IntWithAggregatesFilter<"MapStats"> | number
}

export type MapStatsCreateInput = {
  reviews?: number
  subscriptions?: number
  plays?: number
  favorites?: number
  completions?: number
  uniqueCompletions?: number
  timePlayed?: bigint | number
  mmap: Prisma.MMapCreateNestedOneWithoutStatsInput
}

export type MapStatsUncheckedCreateInput = {
  reviews?: number
  subscriptions?: number
  plays?: number
  favorites?: number
  completions?: number
  uniqueCompletions?: number
  timePlayed?: bigint | number
  mapID: number
}

export type MapStatsUpdateInput = {
  reviews?: Prisma.IntFieldUpdateOperationsInput | number
  subscriptions?: Prisma.IntFieldUpdateOperationsInput | number
  plays?: Prisma.IntFieldUpdateOperationsInput | number
  favorites?: Prisma.IntFieldUpdateOperationsInput | number
  completions?: Prisma.IntFieldUpdateOperationsInput | number
  uniqueCompletions?: Prisma.IntFieldUpdateOperationsInput | number
  timePlayed?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mmap?: Prisma.MMapUpdateOneRequiredWithoutStatsNestedInput
}

export type MapStatsUncheckedUpdateInput = {
  reviews?: Prisma.IntFieldUpdateOperationsInput | number
  subscriptions?: Prisma.IntFieldUpdateOperationsInput | number
  plays?: Prisma.IntFieldUpdateOperationsInput | number
  favorites?: Prisma.IntFieldUpdateOperationsInput | number
  completions?: Prisma.IntFieldUpdateOperationsInput | number
  uniqueCompletions?: Prisma.IntFieldUpdateOperationsInput | number
  timePlayed?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapStatsCreateManyInput = {
  reviews?: number
  subscriptions?: number
  plays?: number
  favorites?: number
  completions?: number
  uniqueCompletions?: number
  timePlayed?: bigint | number
  mapID: number
}

export type MapStatsUpdateManyMutationInput = {
  reviews?: Prisma.IntFieldUpdateOperationsInput | number
  subscriptions?: Prisma.IntFieldUpdateOperationsInput | number
  plays?: Prisma.IntFieldUpdateOperationsInput | number
  favorites?: Prisma.IntFieldUpdateOperationsInput | number
  completions?: Prisma.IntFieldUpdateOperationsInput | number
  uniqueCompletions?: Prisma.IntFieldUpdateOperationsInput | number
  timePlayed?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type MapStatsUncheckedUpdateManyInput = {
  reviews?: Prisma.IntFieldUpdateOperationsInput | number
  subscriptions?: Prisma.IntFieldUpdateOperationsInput | number
  plays?: Prisma.IntFieldUpdateOperationsInput | number
  favorites?: Prisma.IntFieldUpdateOperationsInput | number
  completions?: Prisma.IntFieldUpdateOperationsInput | number
  uniqueCompletions?: Prisma.IntFieldUpdateOperationsInput | number
  timePlayed?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapStatsNullableScalarRelationFilter = {
  is?: Prisma.MapStatsWhereInput | null
  isNot?: Prisma.MapStatsWhereInput | null
}

export type MapStatsCountOrderByAggregateInput = {
  reviews?: Prisma.SortOrder
  subscriptions?: Prisma.SortOrder
  plays?: Prisma.SortOrder
  favorites?: Prisma.SortOrder
  completions?: Prisma.SortOrder
  uniqueCompletions?: Prisma.SortOrder
  timePlayed?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapStatsAvgOrderByAggregateInput = {
  reviews?: Prisma.SortOrder
  subscriptions?: Prisma.SortOrder
  plays?: Prisma.SortOrder
  favorites?: Prisma.SortOrder
  completions?: Prisma.SortOrder
  uniqueCompletions?: Prisma.SortOrder
  timePlayed?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapStatsMaxOrderByAggregateInput = {
  reviews?: Prisma.SortOrder
  subscriptions?: Prisma.SortOrder
  plays?: Prisma.SortOrder
  favorites?: Prisma.SortOrder
  completions?: Prisma.SortOrder
  uniqueCompletions?: Prisma.SortOrder
  timePlayed?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapStatsMinOrderByAggregateInput = {
  reviews?: Prisma.SortOrder
  subscriptions?: Prisma.SortOrder
  plays?: Prisma.SortOrder
  favorites?: Prisma.SortOrder
  completions?: Prisma.SortOrder
  uniqueCompletions?: Prisma.SortOrder
  timePlayed?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapStatsSumOrderByAggregateInput = {
  reviews?: Prisma.SortOrder
  subscriptions?: Prisma.SortOrder
  plays?: Prisma.SortOrder
  favorites?: Prisma.SortOrder
  completions?: Prisma.SortOrder
  uniqueCompletions?: Prisma.SortOrder
  timePlayed?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
}

export type MapStatsCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapStatsCreateWithoutMmapInput, Prisma.MapStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapStatsCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapStatsWhereUniqueInput
}

export type MapStatsUncheckedCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapStatsCreateWithoutMmapInput, Prisma.MapStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapStatsCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapStatsWhereUniqueInput
}

export type MapStatsUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapStatsCreateWithoutMmapInput, Prisma.MapStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapStatsCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapStatsUpsertWithoutMmapInput
  disconnect?: Prisma.MapStatsWhereInput | boolean
  delete?: Prisma.MapStatsWhereInput | boolean
  connect?: Prisma.MapStatsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapStatsUpdateToOneWithWhereWithoutMmapInput, Prisma.MapStatsUpdateWithoutMmapInput>, Prisma.MapStatsUncheckedUpdateWithoutMmapInput>
}

export type MapStatsUncheckedUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapStatsCreateWithoutMmapInput, Prisma.MapStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapStatsCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapStatsUpsertWithoutMmapInput
  disconnect?: Prisma.MapStatsWhereInput | boolean
  delete?: Prisma.MapStatsWhereInput | boolean
  connect?: Prisma.MapStatsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapStatsUpdateToOneWithWhereWithoutMmapInput, Prisma.MapStatsUpdateWithoutMmapInput>, Prisma.MapStatsUncheckedUpdateWithoutMmapInput>
}

export type MapStatsCreateWithoutMmapInput = {
  reviews?: number
  subscriptions?: number
  plays?: number
  favorites?: number
  completions?: number
  uniqueCompletions?: number
  timePlayed?: bigint | number
}

export type MapStatsUncheckedCreateWithoutMmapInput = {
  reviews?: number
  subscriptions?: number
  plays?: number
  favorites?: number
  completions?: number
  uniqueCompletions?: number
  timePlayed?: bigint | number
}

export type MapStatsCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapStatsWhereUniqueInput
  create: Prisma.XOR<Prisma.MapStatsCreateWithoutMmapInput, Prisma.MapStatsUncheckedCreateWithoutMmapInput>
}

export type MapStatsUpsertWithoutMmapInput = {
  update: Prisma.XOR<Prisma.MapStatsUpdateWithoutMmapInput, Prisma.MapStatsUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapStatsCreateWithoutMmapInput, Prisma.MapStatsUncheckedCreateWithoutMmapInput>
  where?: Prisma.MapStatsWhereInput
}

export type MapStatsUpdateToOneWithWhereWithoutMmapInput = {
  where?: Prisma.MapStatsWhereInput
  data: Prisma.XOR<Prisma.MapStatsUpdateWithoutMmapInput, Prisma.MapStatsUncheckedUpdateWithoutMmapInput>
}

export type MapStatsUpdateWithoutMmapInput = {
  reviews?: Prisma.IntFieldUpdateOperationsInput | number
  subscriptions?: Prisma.IntFieldUpdateOperationsInput | number
  plays?: Prisma.IntFieldUpdateOperationsInput | number
  favorites?: Prisma.IntFieldUpdateOperationsInput | number
  completions?: Prisma.IntFieldUpdateOperationsInput | number
  uniqueCompletions?: Prisma.IntFieldUpdateOperationsInput | number
  timePlayed?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type MapStatsUncheckedUpdateWithoutMmapInput = {
  reviews?: Prisma.IntFieldUpdateOperationsInput | number
  subscriptions?: Prisma.IntFieldUpdateOperationsInput | number
  plays?: Prisma.IntFieldUpdateOperationsInput | number
  favorites?: Prisma.IntFieldUpdateOperationsInput | number
  completions?: Prisma.IntFieldUpdateOperationsInput | number
  uniqueCompletions?: Prisma.IntFieldUpdateOperationsInput | number
  timePlayed?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}



export type MapStatsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  reviews?: boolean
  subscriptions?: boolean
  plays?: boolean
  favorites?: boolean
  completions?: boolean
  uniqueCompletions?: boolean
  timePlayed?: boolean
  mapID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapStats"]>

export type MapStatsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  reviews?: boolean
  subscriptions?: boolean
  plays?: boolean
  favorites?: boolean
  completions?: boolean
  uniqueCompletions?: boolean
  timePlayed?: boolean
  mapID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapStats"]>

export type MapStatsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  reviews?: boolean
  subscriptions?: boolean
  plays?: boolean
  favorites?: boolean
  completions?: boolean
  uniqueCompletions?: boolean
  timePlayed?: boolean
  mapID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapStats"]>

export type MapStatsSelectScalar = {
  reviews?: boolean
  subscriptions?: boolean
  plays?: boolean
  favorites?: boolean
  completions?: boolean
  uniqueCompletions?: boolean
  timePlayed?: boolean
  mapID?: boolean
}

export type MapStatsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"reviews" | "subscriptions" | "plays" | "favorites" | "completions" | "uniqueCompletions" | "timePlayed" | "mapID", ExtArgs["result"]["mapStats"]>
export type MapStatsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapStatsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapStatsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}

export type $MapStatsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapStats"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    reviews: number
    subscriptions: number
    plays: number
    favorites: number
    completions: number
    uniqueCompletions: number
    timePlayed: bigint
    mapID: number
  }, ExtArgs["result"]["mapStats"]>
  composites: {}
}

export type MapStatsGetPayload<S extends boolean | null | undefined | MapStatsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapStatsPayload, S>

export type MapStatsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapStatsCountAggregateInputType | true
  }

export interface MapStatsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapStats'], meta: { name: 'MapStats' } }
  /**
   * Find zero or one MapStats that matches the filter.
   * @param {MapStatsFindUniqueArgs} args - Arguments to find a MapStats
   * @example
   * // Get one MapStats
   * const mapStats = await prisma.mapStats.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapStatsFindUniqueArgs>(args: Prisma.SelectSubset<T, MapStatsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapStats that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapStatsFindUniqueOrThrowArgs} args - Arguments to find a MapStats
   * @example
   * // Get one MapStats
   * const mapStats = await prisma.mapStats.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapStatsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapStatsFindFirstArgs} args - Arguments to find a MapStats
   * @example
   * // Get one MapStats
   * const mapStats = await prisma.mapStats.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapStatsFindFirstArgs>(args?: Prisma.SelectSubset<T, MapStatsFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapStats that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapStatsFindFirstOrThrowArgs} args - Arguments to find a MapStats
   * @example
   * // Get one MapStats
   * const mapStats = await prisma.mapStats.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapStatsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapStatsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapStats
   * const mapStats = await prisma.mapStats.findMany()
   * 
   * // Get first 10 MapStats
   * const mapStats = await prisma.mapStats.findMany({ take: 10 })
   * 
   * // Only select the `reviews`
   * const mapStatsWithReviewsOnly = await prisma.mapStats.findMany({ select: { reviews: true } })
   * 
   */
  findMany<T extends MapStatsFindManyArgs>(args?: Prisma.SelectSubset<T, MapStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapStats.
   * @param {MapStatsCreateArgs} args - Arguments to create a MapStats.
   * @example
   * // Create one MapStats
   * const MapStats = await prisma.mapStats.create({
   *   data: {
   *     // ... data to create a MapStats
   *   }
   * })
   * 
   */
  create<T extends MapStatsCreateArgs>(args: Prisma.SelectSubset<T, MapStatsCreateArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapStats.
   * @param {MapStatsCreateManyArgs} args - Arguments to create many MapStats.
   * @example
   * // Create many MapStats
   * const mapStats = await prisma.mapStats.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapStatsCreateManyArgs>(args?: Prisma.SelectSubset<T, MapStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapStats and returns the data saved in the database.
   * @param {MapStatsCreateManyAndReturnArgs} args - Arguments to create many MapStats.
   * @example
   * // Create many MapStats
   * const mapStats = await prisma.mapStats.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapStats and only return the `reviews`
   * const mapStatsWithReviewsOnly = await prisma.mapStats.createManyAndReturn({
   *   select: { reviews: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapStatsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapStats.
   * @param {MapStatsDeleteArgs} args - Arguments to delete one MapStats.
   * @example
   * // Delete one MapStats
   * const MapStats = await prisma.mapStats.delete({
   *   where: {
   *     // ... filter to delete one MapStats
   *   }
   * })
   * 
   */
  delete<T extends MapStatsDeleteArgs>(args: Prisma.SelectSubset<T, MapStatsDeleteArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapStats.
   * @param {MapStatsUpdateArgs} args - Arguments to update one MapStats.
   * @example
   * // Update one MapStats
   * const mapStats = await prisma.mapStats.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapStatsUpdateArgs>(args: Prisma.SelectSubset<T, MapStatsUpdateArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapStats.
   * @param {MapStatsDeleteManyArgs} args - Arguments to filter MapStats to delete.
   * @example
   * // Delete a few MapStats
   * const { count } = await prisma.mapStats.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapStatsDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapStatsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapStats
   * const mapStats = await prisma.mapStats.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapStatsUpdateManyArgs>(args: Prisma.SelectSubset<T, MapStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapStats and returns the data updated in the database.
   * @param {MapStatsUpdateManyAndReturnArgs} args - Arguments to update many MapStats.
   * @example
   * // Update many MapStats
   * const mapStats = await prisma.mapStats.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapStats and only return the `reviews`
   * const mapStatsWithReviewsOnly = await prisma.mapStats.updateManyAndReturn({
   *   select: { reviews: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapStatsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapStats.
   * @param {MapStatsUpsertArgs} args - Arguments to update or create a MapStats.
   * @example
   * // Update or create a MapStats
   * const mapStats = await prisma.mapStats.upsert({
   *   create: {
   *     // ... data to create a MapStats
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapStats we want to update
   *   }
   * })
   */
  upsert<T extends MapStatsUpsertArgs>(args: Prisma.SelectSubset<T, MapStatsUpsertArgs<ExtArgs>>): Prisma.Prisma__MapStatsClient<runtime.Types.Result.GetResult<Prisma.$MapStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapStatsCountArgs} args - Arguments to filter MapStats to count.
   * @example
   * // Count the number of MapStats
   * const count = await prisma.mapStats.count({
   *   where: {
   *     // ... the filter for the MapStats we want to count
   *   }
   * })
  **/
  count<T extends MapStatsCountArgs>(
    args?: Prisma.Subset<T, MapStatsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapStatsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapStatsAggregateArgs>(args: Prisma.Subset<T, MapStatsAggregateArgs>): Prisma.PrismaPromise<GetMapStatsAggregateType<T>>

  /**
   * Group by MapStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapStatsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapStatsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapStatsGroupByArgs['orderBy'] }
      : { orderBy?: MapStatsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapStats model
 */
readonly fields: MapStatsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapStats.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapStatsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapStats model
 */
export interface MapStatsFieldRefs {
  readonly reviews: Prisma.FieldRef<"MapStats", 'Int'>
  readonly subscriptions: Prisma.FieldRef<"MapStats", 'Int'>
  readonly plays: Prisma.FieldRef<"MapStats", 'Int'>
  readonly favorites: Prisma.FieldRef<"MapStats", 'Int'>
  readonly completions: Prisma.FieldRef<"MapStats", 'Int'>
  readonly uniqueCompletions: Prisma.FieldRef<"MapStats", 'Int'>
  readonly timePlayed: Prisma.FieldRef<"MapStats", 'BigInt'>
  readonly mapID: Prisma.FieldRef<"MapStats", 'Int'>
}
    

// Custom InputTypes
/**
 * MapStats findUnique
 */
export type MapStatsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapStats to fetch.
   */
  where: Prisma.MapStatsWhereUniqueInput
}

/**
 * MapStats findUniqueOrThrow
 */
export type MapStatsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapStats to fetch.
   */
  where: Prisma.MapStatsWhereUniqueInput
}

/**
 * MapStats findFirst
 */
export type MapStatsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapStats to fetch.
   */
  where?: Prisma.MapStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapStats to fetch.
   */
  orderBy?: Prisma.MapStatsOrderByWithRelationInput | Prisma.MapStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapStats.
   */
  cursor?: Prisma.MapStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapStats.
   */
  distinct?: Prisma.MapStatsScalarFieldEnum | Prisma.MapStatsScalarFieldEnum[]
}

/**
 * MapStats findFirstOrThrow
 */
export type MapStatsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapStats to fetch.
   */
  where?: Prisma.MapStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapStats to fetch.
   */
  orderBy?: Prisma.MapStatsOrderByWithRelationInput | Prisma.MapStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapStats.
   */
  cursor?: Prisma.MapStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapStats.
   */
  distinct?: Prisma.MapStatsScalarFieldEnum | Prisma.MapStatsScalarFieldEnum[]
}

/**
 * MapStats findMany
 */
export type MapStatsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapStats to fetch.
   */
  where?: Prisma.MapStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapStats to fetch.
   */
  orderBy?: Prisma.MapStatsOrderByWithRelationInput | Prisma.MapStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapStats.
   */
  cursor?: Prisma.MapStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapStats.
   */
  skip?: number
  distinct?: Prisma.MapStatsScalarFieldEnum | Prisma.MapStatsScalarFieldEnum[]
}

/**
 * MapStats create
 */
export type MapStatsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * The data needed to create a MapStats.
   */
  data: Prisma.XOR<Prisma.MapStatsCreateInput, Prisma.MapStatsUncheckedCreateInput>
}

/**
 * MapStats createMany
 */
export type MapStatsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapStats.
   */
  data: Prisma.MapStatsCreateManyInput | Prisma.MapStatsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapStats createManyAndReturn
 */
export type MapStatsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * The data used to create many MapStats.
   */
  data: Prisma.MapStatsCreateManyInput | Prisma.MapStatsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapStats update
 */
export type MapStatsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * The data needed to update a MapStats.
   */
  data: Prisma.XOR<Prisma.MapStatsUpdateInput, Prisma.MapStatsUncheckedUpdateInput>
  /**
   * Choose, which MapStats to update.
   */
  where: Prisma.MapStatsWhereUniqueInput
}

/**
 * MapStats updateMany
 */
export type MapStatsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapStats.
   */
  data: Prisma.XOR<Prisma.MapStatsUpdateManyMutationInput, Prisma.MapStatsUncheckedUpdateManyInput>
  /**
   * Filter which MapStats to update
   */
  where?: Prisma.MapStatsWhereInput
  /**
   * Limit how many MapStats to update.
   */
  limit?: number
}

/**
 * MapStats updateManyAndReturn
 */
export type MapStatsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * The data used to update MapStats.
   */
  data: Prisma.XOR<Prisma.MapStatsUpdateManyMutationInput, Prisma.MapStatsUncheckedUpdateManyInput>
  /**
   * Filter which MapStats to update
   */
  where?: Prisma.MapStatsWhereInput
  /**
   * Limit how many MapStats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapStats upsert
 */
export type MapStatsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * The filter to search for the MapStats to update in case it exists.
   */
  where: Prisma.MapStatsWhereUniqueInput
  /**
   * In case the MapStats found by the `where` argument doesn't exist, create a new MapStats with this data.
   */
  create: Prisma.XOR<Prisma.MapStatsCreateInput, Prisma.MapStatsUncheckedCreateInput>
  /**
   * In case the MapStats was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapStatsUpdateInput, Prisma.MapStatsUncheckedUpdateInput>
}

/**
 * MapStats delete
 */
export type MapStatsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
  /**
   * Filter which MapStats to delete.
   */
  where: Prisma.MapStatsWhereUniqueInput
}

/**
 * MapStats deleteMany
 */
export type MapStatsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapStats to delete
   */
  where?: Prisma.MapStatsWhereInput
  /**
   * Limit how many MapStats to delete.
   */
  limit?: number
}

/**
 * MapStats without action
 */
export type MapStatsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapStats
   */
  select?: Prisma.MapStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapStats
   */
  omit?: Prisma.MapStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapStatsInclude<ExtArgs> | null
}
