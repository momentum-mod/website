
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapReviewStats` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapReviewStats
 * 
 */
export type MapReviewStatsModel = runtime.Types.Result.DefaultSelection<Prisma.$MapReviewStatsPayload>

export type AggregateMapReviewStats = {
  _count: MapReviewStatsCountAggregateOutputType | null
  _avg: MapReviewStatsAvgAggregateOutputType | null
  _sum: MapReviewStatsSumAggregateOutputType | null
  _min: MapReviewStatsMinAggregateOutputType | null
  _max: MapReviewStatsMaxAggregateOutputType | null
}

export type MapReviewStatsAvgAggregateOutputType = {
  mapID: number | null
  total: number | null
  approvals: number | null
  resolved: number | null
  unresolved: number | null
}

export type MapReviewStatsSumAggregateOutputType = {
  mapID: number | null
  total: number | null
  approvals: number | null
  resolved: number | null
  unresolved: number | null
}

export type MapReviewStatsMinAggregateOutputType = {
  mapID: number | null
  total: number | null
  approvals: number | null
  resolved: number | null
  unresolved: number | null
}

export type MapReviewStatsMaxAggregateOutputType = {
  mapID: number | null
  total: number | null
  approvals: number | null
  resolved: number | null
  unresolved: number | null
}

export type MapReviewStatsCountAggregateOutputType = {
  mapID: number
  total: number
  approvals: number
  resolved: number
  unresolved: number
  _all: number
}


export type MapReviewStatsAvgAggregateInputType = {
  mapID?: true
  total?: true
  approvals?: true
  resolved?: true
  unresolved?: true
}

export type MapReviewStatsSumAggregateInputType = {
  mapID?: true
  total?: true
  approvals?: true
  resolved?: true
  unresolved?: true
}

export type MapReviewStatsMinAggregateInputType = {
  mapID?: true
  total?: true
  approvals?: true
  resolved?: true
  unresolved?: true
}

export type MapReviewStatsMaxAggregateInputType = {
  mapID?: true
  total?: true
  approvals?: true
  resolved?: true
  unresolved?: true
}

export type MapReviewStatsCountAggregateInputType = {
  mapID?: true
  total?: true
  approvals?: true
  resolved?: true
  unresolved?: true
  _all?: true
}

export type MapReviewStatsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapReviewStats to aggregate.
   */
  where?: Prisma.MapReviewStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewStats to fetch.
   */
  orderBy?: Prisma.MapReviewStatsOrderByWithRelationInput | Prisma.MapReviewStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapReviewStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapReviewStats
  **/
  _count?: true | MapReviewStatsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapReviewStatsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapReviewStatsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapReviewStatsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapReviewStatsMaxAggregateInputType
}

export type GetMapReviewStatsAggregateType<T extends MapReviewStatsAggregateArgs> = {
      [P in keyof T & keyof AggregateMapReviewStats]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapReviewStats[P]>
    : Prisma.GetScalarType<T[P], AggregateMapReviewStats[P]>
}




export type MapReviewStatsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapReviewStatsWhereInput
  orderBy?: Prisma.MapReviewStatsOrderByWithAggregationInput | Prisma.MapReviewStatsOrderByWithAggregationInput[]
  by: Prisma.MapReviewStatsScalarFieldEnum[] | Prisma.MapReviewStatsScalarFieldEnum
  having?: Prisma.MapReviewStatsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapReviewStatsCountAggregateInputType | true
  _avg?: MapReviewStatsAvgAggregateInputType
  _sum?: MapReviewStatsSumAggregateInputType
  _min?: MapReviewStatsMinAggregateInputType
  _max?: MapReviewStatsMaxAggregateInputType
}

export type MapReviewStatsGroupByOutputType = {
  mapID: number
  total: number
  approvals: number
  resolved: number
  unresolved: number
  _count: MapReviewStatsCountAggregateOutputType | null
  _avg: MapReviewStatsAvgAggregateOutputType | null
  _sum: MapReviewStatsSumAggregateOutputType | null
  _min: MapReviewStatsMinAggregateOutputType | null
  _max: MapReviewStatsMaxAggregateOutputType | null
}

type GetMapReviewStatsGroupByPayload<T extends MapReviewStatsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapReviewStatsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapReviewStatsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapReviewStatsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapReviewStatsGroupByOutputType[P]>
      }
    >
  >



export type MapReviewStatsWhereInput = {
  AND?: Prisma.MapReviewStatsWhereInput | Prisma.MapReviewStatsWhereInput[]
  OR?: Prisma.MapReviewStatsWhereInput[]
  NOT?: Prisma.MapReviewStatsWhereInput | Prisma.MapReviewStatsWhereInput[]
  mapID?: Prisma.IntFilter<"MapReviewStats"> | number
  total?: Prisma.IntFilter<"MapReviewStats"> | number
  approvals?: Prisma.IntFilter<"MapReviewStats"> | number
  resolved?: Prisma.IntFilter<"MapReviewStats"> | number
  unresolved?: Prisma.IntFilter<"MapReviewStats"> | number
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}

export type MapReviewStatsOrderByWithRelationInput = {
  mapID?: Prisma.SortOrder
  total?: Prisma.SortOrder
  approvals?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  unresolved?: Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
}

export type MapReviewStatsWhereUniqueInput = Prisma.AtLeast<{
  mapID?: number
  AND?: Prisma.MapReviewStatsWhereInput | Prisma.MapReviewStatsWhereInput[]
  OR?: Prisma.MapReviewStatsWhereInput[]
  NOT?: Prisma.MapReviewStatsWhereInput | Prisma.MapReviewStatsWhereInput[]
  total?: Prisma.IntFilter<"MapReviewStats"> | number
  approvals?: Prisma.IntFilter<"MapReviewStats"> | number
  resolved?: Prisma.IntFilter<"MapReviewStats"> | number
  unresolved?: Prisma.IntFilter<"MapReviewStats"> | number
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
}, "mapID">

export type MapReviewStatsOrderByWithAggregationInput = {
  mapID?: Prisma.SortOrder
  total?: Prisma.SortOrder
  approvals?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  unresolved?: Prisma.SortOrder
  _count?: Prisma.MapReviewStatsCountOrderByAggregateInput
  _avg?: Prisma.MapReviewStatsAvgOrderByAggregateInput
  _max?: Prisma.MapReviewStatsMaxOrderByAggregateInput
  _min?: Prisma.MapReviewStatsMinOrderByAggregateInput
  _sum?: Prisma.MapReviewStatsSumOrderByAggregateInput
}

export type MapReviewStatsScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapReviewStatsScalarWhereWithAggregatesInput | Prisma.MapReviewStatsScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapReviewStatsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapReviewStatsScalarWhereWithAggregatesInput | Prisma.MapReviewStatsScalarWhereWithAggregatesInput[]
  mapID?: Prisma.IntWithAggregatesFilter<"MapReviewStats"> | number
  total?: Prisma.IntWithAggregatesFilter<"MapReviewStats"> | number
  approvals?: Prisma.IntWithAggregatesFilter<"MapReviewStats"> | number
  resolved?: Prisma.IntWithAggregatesFilter<"MapReviewStats"> | number
  unresolved?: Prisma.IntWithAggregatesFilter<"MapReviewStats"> | number
}

export type MapReviewStatsCreateInput = {
  total?: number
  approvals?: number
  resolved?: number
  unresolved?: number
  mmap: Prisma.MMapCreateNestedOneWithoutReviewStatsInput
}

export type MapReviewStatsUncheckedCreateInput = {
  mapID: number
  total?: number
  approvals?: number
  resolved?: number
  unresolved?: number
}

export type MapReviewStatsUpdateInput = {
  total?: Prisma.IntFieldUpdateOperationsInput | number
  approvals?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.IntFieldUpdateOperationsInput | number
  unresolved?: Prisma.IntFieldUpdateOperationsInput | number
  mmap?: Prisma.MMapUpdateOneRequiredWithoutReviewStatsNestedInput
}

export type MapReviewStatsUncheckedUpdateInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  total?: Prisma.IntFieldUpdateOperationsInput | number
  approvals?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.IntFieldUpdateOperationsInput | number
  unresolved?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapReviewStatsCreateManyInput = {
  mapID: number
  total?: number
  approvals?: number
  resolved?: number
  unresolved?: number
}

export type MapReviewStatsUpdateManyMutationInput = {
  total?: Prisma.IntFieldUpdateOperationsInput | number
  approvals?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.IntFieldUpdateOperationsInput | number
  unresolved?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapReviewStatsUncheckedUpdateManyInput = {
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  total?: Prisma.IntFieldUpdateOperationsInput | number
  approvals?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.IntFieldUpdateOperationsInput | number
  unresolved?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapReviewStatsNullableScalarRelationFilter = {
  is?: Prisma.MapReviewStatsWhereInput | null
  isNot?: Prisma.MapReviewStatsWhereInput | null
}

export type MapReviewStatsCountOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  total?: Prisma.SortOrder
  approvals?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  unresolved?: Prisma.SortOrder
}

export type MapReviewStatsAvgOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  total?: Prisma.SortOrder
  approvals?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  unresolved?: Prisma.SortOrder
}

export type MapReviewStatsMaxOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  total?: Prisma.SortOrder
  approvals?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  unresolved?: Prisma.SortOrder
}

export type MapReviewStatsMinOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  total?: Prisma.SortOrder
  approvals?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  unresolved?: Prisma.SortOrder
}

export type MapReviewStatsSumOrderByAggregateInput = {
  mapID?: Prisma.SortOrder
  total?: Prisma.SortOrder
  approvals?: Prisma.SortOrder
  resolved?: Prisma.SortOrder
  unresolved?: Prisma.SortOrder
}

export type MapReviewStatsCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapReviewStatsCreateWithoutMmapInput, Prisma.MapReviewStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapReviewStatsCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapReviewStatsWhereUniqueInput
}

export type MapReviewStatsUncheckedCreateNestedOneWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapReviewStatsCreateWithoutMmapInput, Prisma.MapReviewStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapReviewStatsCreateOrConnectWithoutMmapInput
  connect?: Prisma.MapReviewStatsWhereUniqueInput
}

export type MapReviewStatsUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewStatsCreateWithoutMmapInput, Prisma.MapReviewStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapReviewStatsCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapReviewStatsUpsertWithoutMmapInput
  disconnect?: Prisma.MapReviewStatsWhereInput | boolean
  delete?: Prisma.MapReviewStatsWhereInput | boolean
  connect?: Prisma.MapReviewStatsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapReviewStatsUpdateToOneWithWhereWithoutMmapInput, Prisma.MapReviewStatsUpdateWithoutMmapInput>, Prisma.MapReviewStatsUncheckedUpdateWithoutMmapInput>
}

export type MapReviewStatsUncheckedUpdateOneWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapReviewStatsCreateWithoutMmapInput, Prisma.MapReviewStatsUncheckedCreateWithoutMmapInput>
  connectOrCreate?: Prisma.MapReviewStatsCreateOrConnectWithoutMmapInput
  upsert?: Prisma.MapReviewStatsUpsertWithoutMmapInput
  disconnect?: Prisma.MapReviewStatsWhereInput | boolean
  delete?: Prisma.MapReviewStatsWhereInput | boolean
  connect?: Prisma.MapReviewStatsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MapReviewStatsUpdateToOneWithWhereWithoutMmapInput, Prisma.MapReviewStatsUpdateWithoutMmapInput>, Prisma.MapReviewStatsUncheckedUpdateWithoutMmapInput>
}

export type MapReviewStatsCreateWithoutMmapInput = {
  total?: number
  approvals?: number
  resolved?: number
  unresolved?: number
}

export type MapReviewStatsUncheckedCreateWithoutMmapInput = {
  total?: number
  approvals?: number
  resolved?: number
  unresolved?: number
}

export type MapReviewStatsCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapReviewStatsWhereUniqueInput
  create: Prisma.XOR<Prisma.MapReviewStatsCreateWithoutMmapInput, Prisma.MapReviewStatsUncheckedCreateWithoutMmapInput>
}

export type MapReviewStatsUpsertWithoutMmapInput = {
  update: Prisma.XOR<Prisma.MapReviewStatsUpdateWithoutMmapInput, Prisma.MapReviewStatsUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapReviewStatsCreateWithoutMmapInput, Prisma.MapReviewStatsUncheckedCreateWithoutMmapInput>
  where?: Prisma.MapReviewStatsWhereInput
}

export type MapReviewStatsUpdateToOneWithWhereWithoutMmapInput = {
  where?: Prisma.MapReviewStatsWhereInput
  data: Prisma.XOR<Prisma.MapReviewStatsUpdateWithoutMmapInput, Prisma.MapReviewStatsUncheckedUpdateWithoutMmapInput>
}

export type MapReviewStatsUpdateWithoutMmapInput = {
  total?: Prisma.IntFieldUpdateOperationsInput | number
  approvals?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.IntFieldUpdateOperationsInput | number
  unresolved?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapReviewStatsUncheckedUpdateWithoutMmapInput = {
  total?: Prisma.IntFieldUpdateOperationsInput | number
  approvals?: Prisma.IntFieldUpdateOperationsInput | number
  resolved?: Prisma.IntFieldUpdateOperationsInput | number
  unresolved?: Prisma.IntFieldUpdateOperationsInput | number
}



export type MapReviewStatsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  total?: boolean
  approvals?: boolean
  resolved?: boolean
  unresolved?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapReviewStats"]>

export type MapReviewStatsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  total?: boolean
  approvals?: boolean
  resolved?: boolean
  unresolved?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapReviewStats"]>

export type MapReviewStatsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  mapID?: boolean
  total?: boolean
  approvals?: boolean
  resolved?: boolean
  unresolved?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapReviewStats"]>

export type MapReviewStatsSelectScalar = {
  mapID?: boolean
  total?: boolean
  approvals?: boolean
  resolved?: boolean
  unresolved?: boolean
}

export type MapReviewStatsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"mapID" | "total" | "approvals" | "resolved" | "unresolved", ExtArgs["result"]["mapReviewStats"]>
export type MapReviewStatsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapReviewStatsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}
export type MapReviewStatsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
}

export type $MapReviewStatsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapReviewStats"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    mapID: number
    total: number
    approvals: number
    resolved: number
    unresolved: number
  }, ExtArgs["result"]["mapReviewStats"]>
  composites: {}
}

export type MapReviewStatsGetPayload<S extends boolean | null | undefined | MapReviewStatsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload, S>

export type MapReviewStatsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapReviewStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapReviewStatsCountAggregateInputType | true
  }

export interface MapReviewStatsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapReviewStats'], meta: { name: 'MapReviewStats' } }
  /**
   * Find zero or one MapReviewStats that matches the filter.
   * @param {MapReviewStatsFindUniqueArgs} args - Arguments to find a MapReviewStats
   * @example
   * // Get one MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapReviewStatsFindUniqueArgs>(args: Prisma.SelectSubset<T, MapReviewStatsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapReviewStats that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapReviewStatsFindUniqueOrThrowArgs} args - Arguments to find a MapReviewStats
   * @example
   * // Get one MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapReviewStatsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapReviewStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapReviewStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewStatsFindFirstArgs} args - Arguments to find a MapReviewStats
   * @example
   * // Get one MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapReviewStatsFindFirstArgs>(args?: Prisma.SelectSubset<T, MapReviewStatsFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapReviewStats that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewStatsFindFirstOrThrowArgs} args - Arguments to find a MapReviewStats
   * @example
   * // Get one MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapReviewStatsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapReviewStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapReviewStats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewStatsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.findMany()
   * 
   * // Get first 10 MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.findMany({ take: 10 })
   * 
   * // Only select the `mapID`
   * const mapReviewStatsWithMapIDOnly = await prisma.mapReviewStats.findMany({ select: { mapID: true } })
   * 
   */
  findMany<T extends MapReviewStatsFindManyArgs>(args?: Prisma.SelectSubset<T, MapReviewStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapReviewStats.
   * @param {MapReviewStatsCreateArgs} args - Arguments to create a MapReviewStats.
   * @example
   * // Create one MapReviewStats
   * const MapReviewStats = await prisma.mapReviewStats.create({
   *   data: {
   *     // ... data to create a MapReviewStats
   *   }
   * })
   * 
   */
  create<T extends MapReviewStatsCreateArgs>(args: Prisma.SelectSubset<T, MapReviewStatsCreateArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapReviewStats.
   * @param {MapReviewStatsCreateManyArgs} args - Arguments to create many MapReviewStats.
   * @example
   * // Create many MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapReviewStatsCreateManyArgs>(args?: Prisma.SelectSubset<T, MapReviewStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapReviewStats and returns the data saved in the database.
   * @param {MapReviewStatsCreateManyAndReturnArgs} args - Arguments to create many MapReviewStats.
   * @example
   * // Create many MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapReviewStats and only return the `mapID`
   * const mapReviewStatsWithMapIDOnly = await prisma.mapReviewStats.createManyAndReturn({
   *   select: { mapID: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapReviewStatsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapReviewStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapReviewStats.
   * @param {MapReviewStatsDeleteArgs} args - Arguments to delete one MapReviewStats.
   * @example
   * // Delete one MapReviewStats
   * const MapReviewStats = await prisma.mapReviewStats.delete({
   *   where: {
   *     // ... filter to delete one MapReviewStats
   *   }
   * })
   * 
   */
  delete<T extends MapReviewStatsDeleteArgs>(args: Prisma.SelectSubset<T, MapReviewStatsDeleteArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapReviewStats.
   * @param {MapReviewStatsUpdateArgs} args - Arguments to update one MapReviewStats.
   * @example
   * // Update one MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapReviewStatsUpdateArgs>(args: Prisma.SelectSubset<T, MapReviewStatsUpdateArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapReviewStats.
   * @param {MapReviewStatsDeleteManyArgs} args - Arguments to filter MapReviewStats to delete.
   * @example
   * // Delete a few MapReviewStats
   * const { count } = await prisma.mapReviewStats.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapReviewStatsDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapReviewStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapReviewStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewStatsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapReviewStatsUpdateManyArgs>(args: Prisma.SelectSubset<T, MapReviewStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapReviewStats and returns the data updated in the database.
   * @param {MapReviewStatsUpdateManyAndReturnArgs} args - Arguments to update many MapReviewStats.
   * @example
   * // Update many MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapReviewStats and only return the `mapID`
   * const mapReviewStatsWithMapIDOnly = await prisma.mapReviewStats.updateManyAndReturn({
   *   select: { mapID: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapReviewStatsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapReviewStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapReviewStats.
   * @param {MapReviewStatsUpsertArgs} args - Arguments to update or create a MapReviewStats.
   * @example
   * // Update or create a MapReviewStats
   * const mapReviewStats = await prisma.mapReviewStats.upsert({
   *   create: {
   *     // ... data to create a MapReviewStats
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapReviewStats we want to update
   *   }
   * })
   */
  upsert<T extends MapReviewStatsUpsertArgs>(args: Prisma.SelectSubset<T, MapReviewStatsUpsertArgs<ExtArgs>>): Prisma.Prisma__MapReviewStatsClient<runtime.Types.Result.GetResult<Prisma.$MapReviewStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapReviewStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewStatsCountArgs} args - Arguments to filter MapReviewStats to count.
   * @example
   * // Count the number of MapReviewStats
   * const count = await prisma.mapReviewStats.count({
   *   where: {
   *     // ... the filter for the MapReviewStats we want to count
   *   }
   * })
  **/
  count<T extends MapReviewStatsCountArgs>(
    args?: Prisma.Subset<T, MapReviewStatsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapReviewStatsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapReviewStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapReviewStatsAggregateArgs>(args: Prisma.Subset<T, MapReviewStatsAggregateArgs>): Prisma.PrismaPromise<GetMapReviewStatsAggregateType<T>>

  /**
   * Group by MapReviewStats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapReviewStatsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapReviewStatsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapReviewStatsGroupByArgs['orderBy'] }
      : { orderBy?: MapReviewStatsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapReviewStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapReviewStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapReviewStats model
 */
readonly fields: MapReviewStatsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapReviewStats.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapReviewStatsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapReviewStats model
 */
export interface MapReviewStatsFieldRefs {
  readonly mapID: Prisma.FieldRef<"MapReviewStats", 'Int'>
  readonly total: Prisma.FieldRef<"MapReviewStats", 'Int'>
  readonly approvals: Prisma.FieldRef<"MapReviewStats", 'Int'>
  readonly resolved: Prisma.FieldRef<"MapReviewStats", 'Int'>
  readonly unresolved: Prisma.FieldRef<"MapReviewStats", 'Int'>
}
    

// Custom InputTypes
/**
 * MapReviewStats findUnique
 */
export type MapReviewStatsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewStats to fetch.
   */
  where: Prisma.MapReviewStatsWhereUniqueInput
}

/**
 * MapReviewStats findUniqueOrThrow
 */
export type MapReviewStatsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewStats to fetch.
   */
  where: Prisma.MapReviewStatsWhereUniqueInput
}

/**
 * MapReviewStats findFirst
 */
export type MapReviewStatsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewStats to fetch.
   */
  where?: Prisma.MapReviewStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewStats to fetch.
   */
  orderBy?: Prisma.MapReviewStatsOrderByWithRelationInput | Prisma.MapReviewStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapReviewStats.
   */
  cursor?: Prisma.MapReviewStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapReviewStats.
   */
  distinct?: Prisma.MapReviewStatsScalarFieldEnum | Prisma.MapReviewStatsScalarFieldEnum[]
}

/**
 * MapReviewStats findFirstOrThrow
 */
export type MapReviewStatsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewStats to fetch.
   */
  where?: Prisma.MapReviewStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewStats to fetch.
   */
  orderBy?: Prisma.MapReviewStatsOrderByWithRelationInput | Prisma.MapReviewStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapReviewStats.
   */
  cursor?: Prisma.MapReviewStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewStats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapReviewStats.
   */
  distinct?: Prisma.MapReviewStatsScalarFieldEnum | Prisma.MapReviewStatsScalarFieldEnum[]
}

/**
 * MapReviewStats findMany
 */
export type MapReviewStatsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * Filter, which MapReviewStats to fetch.
   */
  where?: Prisma.MapReviewStatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapReviewStats to fetch.
   */
  orderBy?: Prisma.MapReviewStatsOrderByWithRelationInput | Prisma.MapReviewStatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapReviewStats.
   */
  cursor?: Prisma.MapReviewStatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapReviewStats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapReviewStats.
   */
  skip?: number
  distinct?: Prisma.MapReviewStatsScalarFieldEnum | Prisma.MapReviewStatsScalarFieldEnum[]
}

/**
 * MapReviewStats create
 */
export type MapReviewStatsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * The data needed to create a MapReviewStats.
   */
  data: Prisma.XOR<Prisma.MapReviewStatsCreateInput, Prisma.MapReviewStatsUncheckedCreateInput>
}

/**
 * MapReviewStats createMany
 */
export type MapReviewStatsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapReviewStats.
   */
  data: Prisma.MapReviewStatsCreateManyInput | Prisma.MapReviewStatsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapReviewStats createManyAndReturn
 */
export type MapReviewStatsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * The data used to create many MapReviewStats.
   */
  data: Prisma.MapReviewStatsCreateManyInput | Prisma.MapReviewStatsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapReviewStats update
 */
export type MapReviewStatsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * The data needed to update a MapReviewStats.
   */
  data: Prisma.XOR<Prisma.MapReviewStatsUpdateInput, Prisma.MapReviewStatsUncheckedUpdateInput>
  /**
   * Choose, which MapReviewStats to update.
   */
  where: Prisma.MapReviewStatsWhereUniqueInput
}

/**
 * MapReviewStats updateMany
 */
export type MapReviewStatsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapReviewStats.
   */
  data: Prisma.XOR<Prisma.MapReviewStatsUpdateManyMutationInput, Prisma.MapReviewStatsUncheckedUpdateManyInput>
  /**
   * Filter which MapReviewStats to update
   */
  where?: Prisma.MapReviewStatsWhereInput
  /**
   * Limit how many MapReviewStats to update.
   */
  limit?: number
}

/**
 * MapReviewStats updateManyAndReturn
 */
export type MapReviewStatsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * The data used to update MapReviewStats.
   */
  data: Prisma.XOR<Prisma.MapReviewStatsUpdateManyMutationInput, Prisma.MapReviewStatsUncheckedUpdateManyInput>
  /**
   * Filter which MapReviewStats to update
   */
  where?: Prisma.MapReviewStatsWhereInput
  /**
   * Limit how many MapReviewStats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapReviewStats upsert
 */
export type MapReviewStatsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * The filter to search for the MapReviewStats to update in case it exists.
   */
  where: Prisma.MapReviewStatsWhereUniqueInput
  /**
   * In case the MapReviewStats found by the `where` argument doesn't exist, create a new MapReviewStats with this data.
   */
  create: Prisma.XOR<Prisma.MapReviewStatsCreateInput, Prisma.MapReviewStatsUncheckedCreateInput>
  /**
   * In case the MapReviewStats was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapReviewStatsUpdateInput, Prisma.MapReviewStatsUncheckedUpdateInput>
}

/**
 * MapReviewStats delete
 */
export type MapReviewStatsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
  /**
   * Filter which MapReviewStats to delete.
   */
  where: Prisma.MapReviewStatsWhereUniqueInput
}

/**
 * MapReviewStats deleteMany
 */
export type MapReviewStatsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapReviewStats to delete
   */
  where?: Prisma.MapReviewStatsWhereInput
  /**
   * Limit how many MapReviewStats to delete.
   */
  limit?: number
}

/**
 * MapReviewStats without action
 */
export type MapReviewStatsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapReviewStats
   */
  select?: Prisma.MapReviewStatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapReviewStats
   */
  omit?: Prisma.MapReviewStatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapReviewStatsInclude<ExtArgs> | null
}
