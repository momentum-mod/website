
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MapCredit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MapCredit
 * 
 */
export type MapCreditModel = runtime.Types.Result.DefaultSelection<Prisma.$MapCreditPayload>

export type AggregateMapCredit = {
  _count: MapCreditCountAggregateOutputType | null
  _avg: MapCreditAvgAggregateOutputType | null
  _sum: MapCreditSumAggregateOutputType | null
  _min: MapCreditMinAggregateOutputType | null
  _max: MapCreditMaxAggregateOutputType | null
}

export type MapCreditAvgAggregateOutputType = {
  type: number | null
  mapID: number | null
  userID: number | null
}

export type MapCreditSumAggregateOutputType = {
  type: number | null
  mapID: number | null
  userID: number | null
}

export type MapCreditMinAggregateOutputType = {
  type: number | null
  description: string | null
  mapID: number | null
  userID: number | null
}

export type MapCreditMaxAggregateOutputType = {
  type: number | null
  description: string | null
  mapID: number | null
  userID: number | null
}

export type MapCreditCountAggregateOutputType = {
  type: number
  description: number
  mapID: number
  userID: number
  _all: number
}


export type MapCreditAvgAggregateInputType = {
  type?: true
  mapID?: true
  userID?: true
}

export type MapCreditSumAggregateInputType = {
  type?: true
  mapID?: true
  userID?: true
}

export type MapCreditMinAggregateInputType = {
  type?: true
  description?: true
  mapID?: true
  userID?: true
}

export type MapCreditMaxAggregateInputType = {
  type?: true
  description?: true
  mapID?: true
  userID?: true
}

export type MapCreditCountAggregateInputType = {
  type?: true
  description?: true
  mapID?: true
  userID?: true
  _all?: true
}

export type MapCreditAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapCredit to aggregate.
   */
  where?: Prisma.MapCreditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapCredits to fetch.
   */
  orderBy?: Prisma.MapCreditOrderByWithRelationInput | Prisma.MapCreditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MapCreditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapCredits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapCredits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MapCredits
  **/
  _count?: true | MapCreditCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MapCreditAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MapCreditSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MapCreditMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MapCreditMaxAggregateInputType
}

export type GetMapCreditAggregateType<T extends MapCreditAggregateArgs> = {
      [P in keyof T & keyof AggregateMapCredit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMapCredit[P]>
    : Prisma.GetScalarType<T[P], AggregateMapCredit[P]>
}




export type MapCreditGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MapCreditWhereInput
  orderBy?: Prisma.MapCreditOrderByWithAggregationInput | Prisma.MapCreditOrderByWithAggregationInput[]
  by: Prisma.MapCreditScalarFieldEnum[] | Prisma.MapCreditScalarFieldEnum
  having?: Prisma.MapCreditScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MapCreditCountAggregateInputType | true
  _avg?: MapCreditAvgAggregateInputType
  _sum?: MapCreditSumAggregateInputType
  _min?: MapCreditMinAggregateInputType
  _max?: MapCreditMaxAggregateInputType
}

export type MapCreditGroupByOutputType = {
  type: number
  description: string | null
  mapID: number
  userID: number
  _count: MapCreditCountAggregateOutputType | null
  _avg: MapCreditAvgAggregateOutputType | null
  _sum: MapCreditSumAggregateOutputType | null
  _min: MapCreditMinAggregateOutputType | null
  _max: MapCreditMaxAggregateOutputType | null
}

type GetMapCreditGroupByPayload<T extends MapCreditGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MapCreditGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MapCreditGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MapCreditGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MapCreditGroupByOutputType[P]>
      }
    >
  >



export type MapCreditWhereInput = {
  AND?: Prisma.MapCreditWhereInput | Prisma.MapCreditWhereInput[]
  OR?: Prisma.MapCreditWhereInput[]
  NOT?: Prisma.MapCreditWhereInput | Prisma.MapCreditWhereInput[]
  type?: Prisma.IntFilter<"MapCredit"> | number
  description?: Prisma.StringNullableFilter<"MapCredit"> | string | null
  mapID?: Prisma.IntFilter<"MapCredit"> | number
  userID?: Prisma.IntFilter<"MapCredit"> | number
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MapCreditOrderByWithRelationInput = {
  type?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  mmap?: Prisma.MMapOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type MapCreditWhereUniqueInput = Prisma.AtLeast<{
  mapID_userID?: Prisma.MapCreditMapIDUserIDCompoundUniqueInput
  AND?: Prisma.MapCreditWhereInput | Prisma.MapCreditWhereInput[]
  OR?: Prisma.MapCreditWhereInput[]
  NOT?: Prisma.MapCreditWhereInput | Prisma.MapCreditWhereInput[]
  type?: Prisma.IntFilter<"MapCredit"> | number
  description?: Prisma.StringNullableFilter<"MapCredit"> | string | null
  mapID?: Prisma.IntFilter<"MapCredit"> | number
  userID?: Prisma.IntFilter<"MapCredit"> | number
  mmap?: Prisma.XOR<Prisma.MMapScalarRelationFilter, Prisma.MMapWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "mapID_userID">

export type MapCreditOrderByWithAggregationInput = {
  type?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  _count?: Prisma.MapCreditCountOrderByAggregateInput
  _avg?: Prisma.MapCreditAvgOrderByAggregateInput
  _max?: Prisma.MapCreditMaxOrderByAggregateInput
  _min?: Prisma.MapCreditMinOrderByAggregateInput
  _sum?: Prisma.MapCreditSumOrderByAggregateInput
}

export type MapCreditScalarWhereWithAggregatesInput = {
  AND?: Prisma.MapCreditScalarWhereWithAggregatesInput | Prisma.MapCreditScalarWhereWithAggregatesInput[]
  OR?: Prisma.MapCreditScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MapCreditScalarWhereWithAggregatesInput | Prisma.MapCreditScalarWhereWithAggregatesInput[]
  type?: Prisma.IntWithAggregatesFilter<"MapCredit"> | number
  description?: Prisma.StringNullableWithAggregatesFilter<"MapCredit"> | string | null
  mapID?: Prisma.IntWithAggregatesFilter<"MapCredit"> | number
  userID?: Prisma.IntWithAggregatesFilter<"MapCredit"> | number
}

export type MapCreditCreateInput = {
  type: number
  description?: string | null
  mmap: Prisma.MMapCreateNestedOneWithoutCreditsInput
  user: Prisma.UserCreateNestedOneWithoutMapCreditsInput
}

export type MapCreditUncheckedCreateInput = {
  type: number
  description?: string | null
  mapID: number
  userID: number
}

export type MapCreditUpdateInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mmap?: Prisma.MMapUpdateOneRequiredWithoutCreditsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMapCreditsNestedInput
}

export type MapCreditUncheckedUpdateInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapCreditCreateManyInput = {
  type: number
  description?: string | null
  mapID: number
  userID: number
}

export type MapCreditUpdateManyMutationInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MapCreditUncheckedUpdateManyInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapCreditListRelationFilter = {
  every?: Prisma.MapCreditWhereInput
  some?: Prisma.MapCreditWhereInput
  none?: Prisma.MapCreditWhereInput
}

export type MapCreditOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MapCreditMapIDUserIDCompoundUniqueInput = {
  mapID: number
  userID: number
}

export type MapCreditCountOrderByAggregateInput = {
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapCreditAvgOrderByAggregateInput = {
  type?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapCreditMaxOrderByAggregateInput = {
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapCreditMinOrderByAggregateInput = {
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapCreditSumOrderByAggregateInput = {
  type?: Prisma.SortOrder
  mapID?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type MapCreditCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutUserInput, Prisma.MapCreditUncheckedCreateWithoutUserInput> | Prisma.MapCreditCreateWithoutUserInput[] | Prisma.MapCreditUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutUserInput | Prisma.MapCreditCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapCreditCreateManyUserInputEnvelope
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
}

export type MapCreditUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutUserInput, Prisma.MapCreditUncheckedCreateWithoutUserInput> | Prisma.MapCreditCreateWithoutUserInput[] | Prisma.MapCreditUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutUserInput | Prisma.MapCreditCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MapCreditCreateManyUserInputEnvelope
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
}

export type MapCreditUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutUserInput, Prisma.MapCreditUncheckedCreateWithoutUserInput> | Prisma.MapCreditCreateWithoutUserInput[] | Prisma.MapCreditUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutUserInput | Prisma.MapCreditCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapCreditUpsertWithWhereUniqueWithoutUserInput | Prisma.MapCreditUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapCreditCreateManyUserInputEnvelope
  set?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  disconnect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  delete?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  update?: Prisma.MapCreditUpdateWithWhereUniqueWithoutUserInput | Prisma.MapCreditUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapCreditUpdateManyWithWhereWithoutUserInput | Prisma.MapCreditUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapCreditScalarWhereInput | Prisma.MapCreditScalarWhereInput[]
}

export type MapCreditUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutUserInput, Prisma.MapCreditUncheckedCreateWithoutUserInput> | Prisma.MapCreditCreateWithoutUserInput[] | Prisma.MapCreditUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutUserInput | Prisma.MapCreditCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MapCreditUpsertWithWhereUniqueWithoutUserInput | Prisma.MapCreditUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MapCreditCreateManyUserInputEnvelope
  set?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  disconnect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  delete?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  update?: Prisma.MapCreditUpdateWithWhereUniqueWithoutUserInput | Prisma.MapCreditUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MapCreditUpdateManyWithWhereWithoutUserInput | Prisma.MapCreditUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MapCreditScalarWhereInput | Prisma.MapCreditScalarWhereInput[]
}

export type MapCreditCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutMmapInput, Prisma.MapCreditUncheckedCreateWithoutMmapInput> | Prisma.MapCreditCreateWithoutMmapInput[] | Prisma.MapCreditUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutMmapInput | Prisma.MapCreditCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapCreditCreateManyMmapInputEnvelope
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
}

export type MapCreditUncheckedCreateNestedManyWithoutMmapInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutMmapInput, Prisma.MapCreditUncheckedCreateWithoutMmapInput> | Prisma.MapCreditCreateWithoutMmapInput[] | Prisma.MapCreditUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutMmapInput | Prisma.MapCreditCreateOrConnectWithoutMmapInput[]
  createMany?: Prisma.MapCreditCreateManyMmapInputEnvelope
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
}

export type MapCreditUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutMmapInput, Prisma.MapCreditUncheckedCreateWithoutMmapInput> | Prisma.MapCreditCreateWithoutMmapInput[] | Prisma.MapCreditUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutMmapInput | Prisma.MapCreditCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapCreditUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapCreditUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapCreditCreateManyMmapInputEnvelope
  set?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  disconnect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  delete?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  update?: Prisma.MapCreditUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapCreditUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapCreditUpdateManyWithWhereWithoutMmapInput | Prisma.MapCreditUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapCreditScalarWhereInput | Prisma.MapCreditScalarWhereInput[]
}

export type MapCreditUncheckedUpdateManyWithoutMmapNestedInput = {
  create?: Prisma.XOR<Prisma.MapCreditCreateWithoutMmapInput, Prisma.MapCreditUncheckedCreateWithoutMmapInput> | Prisma.MapCreditCreateWithoutMmapInput[] | Prisma.MapCreditUncheckedCreateWithoutMmapInput[]
  connectOrCreate?: Prisma.MapCreditCreateOrConnectWithoutMmapInput | Prisma.MapCreditCreateOrConnectWithoutMmapInput[]
  upsert?: Prisma.MapCreditUpsertWithWhereUniqueWithoutMmapInput | Prisma.MapCreditUpsertWithWhereUniqueWithoutMmapInput[]
  createMany?: Prisma.MapCreditCreateManyMmapInputEnvelope
  set?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  disconnect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  delete?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  connect?: Prisma.MapCreditWhereUniqueInput | Prisma.MapCreditWhereUniqueInput[]
  update?: Prisma.MapCreditUpdateWithWhereUniqueWithoutMmapInput | Prisma.MapCreditUpdateWithWhereUniqueWithoutMmapInput[]
  updateMany?: Prisma.MapCreditUpdateManyWithWhereWithoutMmapInput | Prisma.MapCreditUpdateManyWithWhereWithoutMmapInput[]
  deleteMany?: Prisma.MapCreditScalarWhereInput | Prisma.MapCreditScalarWhereInput[]
}

export type MapCreditCreateWithoutUserInput = {
  type: number
  description?: string | null
  mmap: Prisma.MMapCreateNestedOneWithoutCreditsInput
}

export type MapCreditUncheckedCreateWithoutUserInput = {
  type: number
  description?: string | null
  mapID: number
}

export type MapCreditCreateOrConnectWithoutUserInput = {
  where: Prisma.MapCreditWhereUniqueInput
  create: Prisma.XOR<Prisma.MapCreditCreateWithoutUserInput, Prisma.MapCreditUncheckedCreateWithoutUserInput>
}

export type MapCreditCreateManyUserInputEnvelope = {
  data: Prisma.MapCreditCreateManyUserInput | Prisma.MapCreditCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MapCreditUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapCreditWhereUniqueInput
  update: Prisma.XOR<Prisma.MapCreditUpdateWithoutUserInput, Prisma.MapCreditUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MapCreditCreateWithoutUserInput, Prisma.MapCreditUncheckedCreateWithoutUserInput>
}

export type MapCreditUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MapCreditWhereUniqueInput
  data: Prisma.XOR<Prisma.MapCreditUpdateWithoutUserInput, Prisma.MapCreditUncheckedUpdateWithoutUserInput>
}

export type MapCreditUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MapCreditScalarWhereInput
  data: Prisma.XOR<Prisma.MapCreditUpdateManyMutationInput, Prisma.MapCreditUncheckedUpdateManyWithoutUserInput>
}

export type MapCreditScalarWhereInput = {
  AND?: Prisma.MapCreditScalarWhereInput | Prisma.MapCreditScalarWhereInput[]
  OR?: Prisma.MapCreditScalarWhereInput[]
  NOT?: Prisma.MapCreditScalarWhereInput | Prisma.MapCreditScalarWhereInput[]
  type?: Prisma.IntFilter<"MapCredit"> | number
  description?: Prisma.StringNullableFilter<"MapCredit"> | string | null
  mapID?: Prisma.IntFilter<"MapCredit"> | number
  userID?: Prisma.IntFilter<"MapCredit"> | number
}

export type MapCreditCreateWithoutMmapInput = {
  type: number
  description?: string | null
  user: Prisma.UserCreateNestedOneWithoutMapCreditsInput
}

export type MapCreditUncheckedCreateWithoutMmapInput = {
  type: number
  description?: string | null
  userID: number
}

export type MapCreditCreateOrConnectWithoutMmapInput = {
  where: Prisma.MapCreditWhereUniqueInput
  create: Prisma.XOR<Prisma.MapCreditCreateWithoutMmapInput, Prisma.MapCreditUncheckedCreateWithoutMmapInput>
}

export type MapCreditCreateManyMmapInputEnvelope = {
  data: Prisma.MapCreditCreateManyMmapInput | Prisma.MapCreditCreateManyMmapInput[]
  skipDuplicates?: boolean
}

export type MapCreditUpsertWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapCreditWhereUniqueInput
  update: Prisma.XOR<Prisma.MapCreditUpdateWithoutMmapInput, Prisma.MapCreditUncheckedUpdateWithoutMmapInput>
  create: Prisma.XOR<Prisma.MapCreditCreateWithoutMmapInput, Prisma.MapCreditUncheckedCreateWithoutMmapInput>
}

export type MapCreditUpdateWithWhereUniqueWithoutMmapInput = {
  where: Prisma.MapCreditWhereUniqueInput
  data: Prisma.XOR<Prisma.MapCreditUpdateWithoutMmapInput, Prisma.MapCreditUncheckedUpdateWithoutMmapInput>
}

export type MapCreditUpdateManyWithWhereWithoutMmapInput = {
  where: Prisma.MapCreditScalarWhereInput
  data: Prisma.XOR<Prisma.MapCreditUpdateManyMutationInput, Prisma.MapCreditUncheckedUpdateManyWithoutMmapInput>
}

export type MapCreditCreateManyUserInput = {
  type: number
  description?: string | null
  mapID: number
}

export type MapCreditUpdateWithoutUserInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mmap?: Prisma.MMapUpdateOneRequiredWithoutCreditsNestedInput
}

export type MapCreditUncheckedUpdateWithoutUserInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapCreditUncheckedUpdateManyWithoutUserInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mapID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapCreditCreateManyMmapInput = {
  type: number
  description?: string | null
  userID: number
}

export type MapCreditUpdateWithoutMmapInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutMapCreditsNestedInput
}

export type MapCreditUncheckedUpdateWithoutMmapInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userID?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MapCreditUncheckedUpdateManyWithoutMmapInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userID?: Prisma.IntFieldUpdateOperationsInput | number
}



export type MapCreditSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
  description?: boolean
  mapID?: boolean
  userID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapCredit"]>

export type MapCreditSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
  description?: boolean
  mapID?: boolean
  userID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapCredit"]>

export type MapCreditSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  type?: boolean
  description?: boolean
  mapID?: boolean
  userID?: boolean
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mapCredit"]>

export type MapCreditSelectScalar = {
  type?: boolean
  description?: boolean
  mapID?: boolean
  userID?: boolean
}

export type MapCreditOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"type" | "description" | "mapID" | "userID", ExtArgs["result"]["mapCredit"]>
export type MapCreditInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapCreditIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MapCreditIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mmap?: boolean | Prisma.MMapDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MapCreditPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MapCredit"
  objects: {
    mmap: Prisma.$MMapPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * map-credit-type.enum.ts
     */
    type: number
    description: string | null
    mapID: number
    userID: number
  }, ExtArgs["result"]["mapCredit"]>
  composites: {}
}

export type MapCreditGetPayload<S extends boolean | null | undefined | MapCreditDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MapCreditPayload, S>

export type MapCreditCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MapCreditFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MapCreditCountAggregateInputType | true
  }

export interface MapCreditDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapCredit'], meta: { name: 'MapCredit' } }
  /**
   * Find zero or one MapCredit that matches the filter.
   * @param {MapCreditFindUniqueArgs} args - Arguments to find a MapCredit
   * @example
   * // Get one MapCredit
   * const mapCredit = await prisma.mapCredit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MapCreditFindUniqueArgs>(args: Prisma.SelectSubset<T, MapCreditFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MapCredit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MapCreditFindUniqueOrThrowArgs} args - Arguments to find a MapCredit
   * @example
   * // Get one MapCredit
   * const mapCredit = await prisma.mapCredit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MapCreditFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MapCreditFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapCredit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapCreditFindFirstArgs} args - Arguments to find a MapCredit
   * @example
   * // Get one MapCredit
   * const mapCredit = await prisma.mapCredit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MapCreditFindFirstArgs>(args?: Prisma.SelectSubset<T, MapCreditFindFirstArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MapCredit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapCreditFindFirstOrThrowArgs} args - Arguments to find a MapCredit
   * @example
   * // Get one MapCredit
   * const mapCredit = await prisma.mapCredit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MapCreditFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MapCreditFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MapCredits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapCreditFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MapCredits
   * const mapCredits = await prisma.mapCredit.findMany()
   * 
   * // Get first 10 MapCredits
   * const mapCredits = await prisma.mapCredit.findMany({ take: 10 })
   * 
   * // Only select the `type`
   * const mapCreditWithTypeOnly = await prisma.mapCredit.findMany({ select: { type: true } })
   * 
   */
  findMany<T extends MapCreditFindManyArgs>(args?: Prisma.SelectSubset<T, MapCreditFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MapCredit.
   * @param {MapCreditCreateArgs} args - Arguments to create a MapCredit.
   * @example
   * // Create one MapCredit
   * const MapCredit = await prisma.mapCredit.create({
   *   data: {
   *     // ... data to create a MapCredit
   *   }
   * })
   * 
   */
  create<T extends MapCreditCreateArgs>(args: Prisma.SelectSubset<T, MapCreditCreateArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MapCredits.
   * @param {MapCreditCreateManyArgs} args - Arguments to create many MapCredits.
   * @example
   * // Create many MapCredits
   * const mapCredit = await prisma.mapCredit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MapCreditCreateManyArgs>(args?: Prisma.SelectSubset<T, MapCreditCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MapCredits and returns the data saved in the database.
   * @param {MapCreditCreateManyAndReturnArgs} args - Arguments to create many MapCredits.
   * @example
   * // Create many MapCredits
   * const mapCredit = await prisma.mapCredit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MapCredits and only return the `type`
   * const mapCreditWithTypeOnly = await prisma.mapCredit.createManyAndReturn({
   *   select: { type: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MapCreditCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MapCreditCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MapCredit.
   * @param {MapCreditDeleteArgs} args - Arguments to delete one MapCredit.
   * @example
   * // Delete one MapCredit
   * const MapCredit = await prisma.mapCredit.delete({
   *   where: {
   *     // ... filter to delete one MapCredit
   *   }
   * })
   * 
   */
  delete<T extends MapCreditDeleteArgs>(args: Prisma.SelectSubset<T, MapCreditDeleteArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MapCredit.
   * @param {MapCreditUpdateArgs} args - Arguments to update one MapCredit.
   * @example
   * // Update one MapCredit
   * const mapCredit = await prisma.mapCredit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MapCreditUpdateArgs>(args: Prisma.SelectSubset<T, MapCreditUpdateArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MapCredits.
   * @param {MapCreditDeleteManyArgs} args - Arguments to filter MapCredits to delete.
   * @example
   * // Delete a few MapCredits
   * const { count } = await prisma.mapCredit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MapCreditDeleteManyArgs>(args?: Prisma.SelectSubset<T, MapCreditDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapCredits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapCreditUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MapCredits
   * const mapCredit = await prisma.mapCredit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MapCreditUpdateManyArgs>(args: Prisma.SelectSubset<T, MapCreditUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MapCredits and returns the data updated in the database.
   * @param {MapCreditUpdateManyAndReturnArgs} args - Arguments to update many MapCredits.
   * @example
   * // Update many MapCredits
   * const mapCredit = await prisma.mapCredit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MapCredits and only return the `type`
   * const mapCreditWithTypeOnly = await prisma.mapCredit.updateManyAndReturn({
   *   select: { type: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MapCreditUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MapCreditUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MapCredit.
   * @param {MapCreditUpsertArgs} args - Arguments to update or create a MapCredit.
   * @example
   * // Update or create a MapCredit
   * const mapCredit = await prisma.mapCredit.upsert({
   *   create: {
   *     // ... data to create a MapCredit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MapCredit we want to update
   *   }
   * })
   */
  upsert<T extends MapCreditUpsertArgs>(args: Prisma.SelectSubset<T, MapCreditUpsertArgs<ExtArgs>>): Prisma.Prisma__MapCreditClient<runtime.Types.Result.GetResult<Prisma.$MapCreditPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MapCredits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapCreditCountArgs} args - Arguments to filter MapCredits to count.
   * @example
   * // Count the number of MapCredits
   * const count = await prisma.mapCredit.count({
   *   where: {
   *     // ... the filter for the MapCredits we want to count
   *   }
   * })
  **/
  count<T extends MapCreditCountArgs>(
    args?: Prisma.Subset<T, MapCreditCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MapCreditCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MapCredit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapCreditAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MapCreditAggregateArgs>(args: Prisma.Subset<T, MapCreditAggregateArgs>): Prisma.PrismaPromise<GetMapCreditAggregateType<T>>

  /**
   * Group by MapCredit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MapCreditGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MapCreditGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MapCreditGroupByArgs['orderBy'] }
      : { orderBy?: MapCreditGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MapCreditGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapCreditGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MapCredit model
 */
readonly fields: MapCreditFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MapCredit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MapCreditClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mmap<T extends Prisma.MMapDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MMapDefaultArgs<ExtArgs>>): Prisma.Prisma__MMapClient<runtime.Types.Result.GetResult<Prisma.$MMapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MapCredit model
 */
export interface MapCreditFieldRefs {
  readonly type: Prisma.FieldRef<"MapCredit", 'Int'>
  readonly description: Prisma.FieldRef<"MapCredit", 'String'>
  readonly mapID: Prisma.FieldRef<"MapCredit", 'Int'>
  readonly userID: Prisma.FieldRef<"MapCredit", 'Int'>
}
    

// Custom InputTypes
/**
 * MapCredit findUnique
 */
export type MapCreditFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * Filter, which MapCredit to fetch.
   */
  where: Prisma.MapCreditWhereUniqueInput
}

/**
 * MapCredit findUniqueOrThrow
 */
export type MapCreditFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * Filter, which MapCredit to fetch.
   */
  where: Prisma.MapCreditWhereUniqueInput
}

/**
 * MapCredit findFirst
 */
export type MapCreditFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * Filter, which MapCredit to fetch.
   */
  where?: Prisma.MapCreditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapCredits to fetch.
   */
  orderBy?: Prisma.MapCreditOrderByWithRelationInput | Prisma.MapCreditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapCredits.
   */
  cursor?: Prisma.MapCreditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapCredits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapCredits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapCredits.
   */
  distinct?: Prisma.MapCreditScalarFieldEnum | Prisma.MapCreditScalarFieldEnum[]
}

/**
 * MapCredit findFirstOrThrow
 */
export type MapCreditFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * Filter, which MapCredit to fetch.
   */
  where?: Prisma.MapCreditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapCredits to fetch.
   */
  orderBy?: Prisma.MapCreditOrderByWithRelationInput | Prisma.MapCreditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MapCredits.
   */
  cursor?: Prisma.MapCreditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapCredits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapCredits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MapCredits.
   */
  distinct?: Prisma.MapCreditScalarFieldEnum | Prisma.MapCreditScalarFieldEnum[]
}

/**
 * MapCredit findMany
 */
export type MapCreditFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * Filter, which MapCredits to fetch.
   */
  where?: Prisma.MapCreditWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MapCredits to fetch.
   */
  orderBy?: Prisma.MapCreditOrderByWithRelationInput | Prisma.MapCreditOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MapCredits.
   */
  cursor?: Prisma.MapCreditWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MapCredits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MapCredits.
   */
  skip?: number
  distinct?: Prisma.MapCreditScalarFieldEnum | Prisma.MapCreditScalarFieldEnum[]
}

/**
 * MapCredit create
 */
export type MapCreditCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * The data needed to create a MapCredit.
   */
  data: Prisma.XOR<Prisma.MapCreditCreateInput, Prisma.MapCreditUncheckedCreateInput>
}

/**
 * MapCredit createMany
 */
export type MapCreditCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MapCredits.
   */
  data: Prisma.MapCreditCreateManyInput | Prisma.MapCreditCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MapCredit createManyAndReturn
 */
export type MapCreditCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * The data used to create many MapCredits.
   */
  data: Prisma.MapCreditCreateManyInput | Prisma.MapCreditCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MapCredit update
 */
export type MapCreditUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * The data needed to update a MapCredit.
   */
  data: Prisma.XOR<Prisma.MapCreditUpdateInput, Prisma.MapCreditUncheckedUpdateInput>
  /**
   * Choose, which MapCredit to update.
   */
  where: Prisma.MapCreditWhereUniqueInput
}

/**
 * MapCredit updateMany
 */
export type MapCreditUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MapCredits.
   */
  data: Prisma.XOR<Prisma.MapCreditUpdateManyMutationInput, Prisma.MapCreditUncheckedUpdateManyInput>
  /**
   * Filter which MapCredits to update
   */
  where?: Prisma.MapCreditWhereInput
  /**
   * Limit how many MapCredits to update.
   */
  limit?: number
}

/**
 * MapCredit updateManyAndReturn
 */
export type MapCreditUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * The data used to update MapCredits.
   */
  data: Prisma.XOR<Prisma.MapCreditUpdateManyMutationInput, Prisma.MapCreditUncheckedUpdateManyInput>
  /**
   * Filter which MapCredits to update
   */
  where?: Prisma.MapCreditWhereInput
  /**
   * Limit how many MapCredits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MapCredit upsert
 */
export type MapCreditUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * The filter to search for the MapCredit to update in case it exists.
   */
  where: Prisma.MapCreditWhereUniqueInput
  /**
   * In case the MapCredit found by the `where` argument doesn't exist, create a new MapCredit with this data.
   */
  create: Prisma.XOR<Prisma.MapCreditCreateInput, Prisma.MapCreditUncheckedCreateInput>
  /**
   * In case the MapCredit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MapCreditUpdateInput, Prisma.MapCreditUncheckedUpdateInput>
}

/**
 * MapCredit delete
 */
export type MapCreditDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
  /**
   * Filter which MapCredit to delete.
   */
  where: Prisma.MapCreditWhereUniqueInput
}

/**
 * MapCredit deleteMany
 */
export type MapCreditDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MapCredits to delete
   */
  where?: Prisma.MapCreditWhereInput
  /**
   * Limit how many MapCredits to delete.
   */
  limit?: number
}

/**
 * MapCredit without action
 */
export type MapCreditDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MapCredit
   */
  select?: Prisma.MapCreditSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MapCredit
   */
  omit?: Prisma.MapCreditOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MapCreditInclude<ExtArgs> | null
}
