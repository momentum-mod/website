
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Activity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Activity
 * 
 */
export type ActivityModel = runtime.Types.Result.DefaultSelection<Prisma.$ActivityPayload>

export type AggregateActivity = {
  _count: ActivityCountAggregateOutputType | null
  _avg: ActivityAvgAggregateOutputType | null
  _sum: ActivitySumAggregateOutputType | null
  _min: ActivityMinAggregateOutputType | null
  _max: ActivityMaxAggregateOutputType | null
}

export type ActivityAvgAggregateOutputType = {
  id: number | null
  type: number | null
  data: number | null
  userID: number | null
}

export type ActivitySumAggregateOutputType = {
  id: number | null
  type: number | null
  data: bigint | null
  userID: number | null
}

export type ActivityMinAggregateOutputType = {
  id: number | null
  type: number | null
  data: bigint | null
  userID: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ActivityMaxAggregateOutputType = {
  id: number | null
  type: number | null
  data: bigint | null
  userID: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ActivityCountAggregateOutputType = {
  id: number
  type: number
  data: number
  userID: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ActivityAvgAggregateInputType = {
  id?: true
  type?: true
  data?: true
  userID?: true
}

export type ActivitySumAggregateInputType = {
  id?: true
  type?: true
  data?: true
  userID?: true
}

export type ActivityMinAggregateInputType = {
  id?: true
  type?: true
  data?: true
  userID?: true
  createdAt?: true
  updatedAt?: true
}

export type ActivityMaxAggregateInputType = {
  id?: true
  type?: true
  data?: true
  userID?: true
  createdAt?: true
  updatedAt?: true
}

export type ActivityCountAggregateInputType = {
  id?: true
  type?: true
  data?: true
  userID?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ActivityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Activity to aggregate.
   */
  where?: Prisma.ActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Activities to fetch.
   */
  orderBy?: Prisma.ActivityOrderByWithRelationInput | Prisma.ActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Activities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Activities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Activities
  **/
  _count?: true | ActivityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ActivityAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ActivitySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ActivityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ActivityMaxAggregateInputType
}

export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
      [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateActivity[P]>
    : Prisma.GetScalarType<T[P], AggregateActivity[P]>
}




export type ActivityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActivityWhereInput
  orderBy?: Prisma.ActivityOrderByWithAggregationInput | Prisma.ActivityOrderByWithAggregationInput[]
  by: Prisma.ActivityScalarFieldEnum[] | Prisma.ActivityScalarFieldEnum
  having?: Prisma.ActivityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ActivityCountAggregateInputType | true
  _avg?: ActivityAvgAggregateInputType
  _sum?: ActivitySumAggregateInputType
  _min?: ActivityMinAggregateInputType
  _max?: ActivityMaxAggregateInputType
}

export type ActivityGroupByOutputType = {
  id: number
  type: number
  data: bigint
  userID: number
  createdAt: Date
  updatedAt: Date
  _count: ActivityCountAggregateOutputType | null
  _avg: ActivityAvgAggregateOutputType | null
  _sum: ActivitySumAggregateOutputType | null
  _min: ActivityMinAggregateOutputType | null
  _max: ActivityMaxAggregateOutputType | null
}

type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ActivityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ActivityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ActivityGroupByOutputType[P]>
      }
    >
  >



export type ActivityWhereInput = {
  AND?: Prisma.ActivityWhereInput | Prisma.ActivityWhereInput[]
  OR?: Prisma.ActivityWhereInput[]
  NOT?: Prisma.ActivityWhereInput | Prisma.ActivityWhereInput[]
  id?: Prisma.IntFilter<"Activity"> | number
  type?: Prisma.IntFilter<"Activity"> | number
  data?: Prisma.BigIntFilter<"Activity"> | bigint | number
  userID?: Prisma.IntFilter<"Activity"> | number
  createdAt?: Prisma.DateTimeFilter<"Activity"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Activity"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ActivityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  data?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type ActivityWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ActivityWhereInput | Prisma.ActivityWhereInput[]
  OR?: Prisma.ActivityWhereInput[]
  NOT?: Prisma.ActivityWhereInput | Prisma.ActivityWhereInput[]
  type?: Prisma.IntFilter<"Activity"> | number
  data?: Prisma.BigIntFilter<"Activity"> | bigint | number
  userID?: Prisma.IntFilter<"Activity"> | number
  createdAt?: Prisma.DateTimeFilter<"Activity"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Activity"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ActivityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  data?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ActivityCountOrderByAggregateInput
  _avg?: Prisma.ActivityAvgOrderByAggregateInput
  _max?: Prisma.ActivityMaxOrderByAggregateInput
  _min?: Prisma.ActivityMinOrderByAggregateInput
  _sum?: Prisma.ActivitySumOrderByAggregateInput
}

export type ActivityScalarWhereWithAggregatesInput = {
  AND?: Prisma.ActivityScalarWhereWithAggregatesInput | Prisma.ActivityScalarWhereWithAggregatesInput[]
  OR?: Prisma.ActivityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ActivityScalarWhereWithAggregatesInput | Prisma.ActivityScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Activity"> | number
  type?: Prisma.IntWithAggregatesFilter<"Activity"> | number
  data?: Prisma.BigIntWithAggregatesFilter<"Activity"> | bigint | number
  userID?: Prisma.IntWithAggregatesFilter<"Activity"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Activity"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Activity"> | Date | string
}

export type ActivityCreateInput = {
  type?: number
  data: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutActivitiesInput
}

export type ActivityUncheckedCreateInput = {
  id?: number
  type?: number
  data: bigint | number
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActivityUpdateInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutActivitiesNestedInput
}

export type ActivityUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityCreateManyInput = {
  id?: number
  type?: number
  data: bigint | number
  userID: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActivityUpdateManyMutationInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  userID?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityListRelationFilter = {
  every?: Prisma.ActivityWhereInput
  some?: Prisma.ActivityWhereInput
  none?: Prisma.ActivityWhereInput
}

export type ActivityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ActivityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  data?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActivityAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  data?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type ActivityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  data?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActivityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  data?: Prisma.SortOrder
  userID?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActivitySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  data?: Prisma.SortOrder
  userID?: Prisma.SortOrder
}

export type ActivityCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ActivityCreateWithoutUserInput, Prisma.ActivityUncheckedCreateWithoutUserInput> | Prisma.ActivityCreateWithoutUserInput[] | Prisma.ActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ActivityCreateOrConnectWithoutUserInput | Prisma.ActivityCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ActivityCreateManyUserInputEnvelope
  connect?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
}

export type ActivityUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ActivityCreateWithoutUserInput, Prisma.ActivityUncheckedCreateWithoutUserInput> | Prisma.ActivityCreateWithoutUserInput[] | Prisma.ActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ActivityCreateOrConnectWithoutUserInput | Prisma.ActivityCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ActivityCreateManyUserInputEnvelope
  connect?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
}

export type ActivityUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ActivityCreateWithoutUserInput, Prisma.ActivityUncheckedCreateWithoutUserInput> | Prisma.ActivityCreateWithoutUserInput[] | Prisma.ActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ActivityCreateOrConnectWithoutUserInput | Prisma.ActivityCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ActivityUpsertWithWhereUniqueWithoutUserInput | Prisma.ActivityUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ActivityCreateManyUserInputEnvelope
  set?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  disconnect?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  delete?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  connect?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  update?: Prisma.ActivityUpdateWithWhereUniqueWithoutUserInput | Prisma.ActivityUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ActivityUpdateManyWithWhereWithoutUserInput | Prisma.ActivityUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ActivityScalarWhereInput | Prisma.ActivityScalarWhereInput[]
}

export type ActivityUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ActivityCreateWithoutUserInput, Prisma.ActivityUncheckedCreateWithoutUserInput> | Prisma.ActivityCreateWithoutUserInput[] | Prisma.ActivityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ActivityCreateOrConnectWithoutUserInput | Prisma.ActivityCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ActivityUpsertWithWhereUniqueWithoutUserInput | Prisma.ActivityUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ActivityCreateManyUserInputEnvelope
  set?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  disconnect?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  delete?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  connect?: Prisma.ActivityWhereUniqueInput | Prisma.ActivityWhereUniqueInput[]
  update?: Prisma.ActivityUpdateWithWhereUniqueWithoutUserInput | Prisma.ActivityUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ActivityUpdateManyWithWhereWithoutUserInput | Prisma.ActivityUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ActivityScalarWhereInput | Prisma.ActivityScalarWhereInput[]
}

export type ActivityCreateWithoutUserInput = {
  type?: number
  data: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActivityUncheckedCreateWithoutUserInput = {
  id?: number
  type?: number
  data: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActivityCreateOrConnectWithoutUserInput = {
  where: Prisma.ActivityWhereUniqueInput
  create: Prisma.XOR<Prisma.ActivityCreateWithoutUserInput, Prisma.ActivityUncheckedCreateWithoutUserInput>
}

export type ActivityCreateManyUserInputEnvelope = {
  data: Prisma.ActivityCreateManyUserInput | Prisma.ActivityCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ActivityUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ActivityWhereUniqueInput
  update: Prisma.XOR<Prisma.ActivityUpdateWithoutUserInput, Prisma.ActivityUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ActivityCreateWithoutUserInput, Prisma.ActivityUncheckedCreateWithoutUserInput>
}

export type ActivityUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ActivityWhereUniqueInput
  data: Prisma.XOR<Prisma.ActivityUpdateWithoutUserInput, Prisma.ActivityUncheckedUpdateWithoutUserInput>
}

export type ActivityUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ActivityScalarWhereInput
  data: Prisma.XOR<Prisma.ActivityUpdateManyMutationInput, Prisma.ActivityUncheckedUpdateManyWithoutUserInput>
}

export type ActivityScalarWhereInput = {
  AND?: Prisma.ActivityScalarWhereInput | Prisma.ActivityScalarWhereInput[]
  OR?: Prisma.ActivityScalarWhereInput[]
  NOT?: Prisma.ActivityScalarWhereInput | Prisma.ActivityScalarWhereInput[]
  id?: Prisma.IntFilter<"Activity"> | number
  type?: Prisma.IntFilter<"Activity"> | number
  data?: Prisma.BigIntFilter<"Activity"> | bigint | number
  userID?: Prisma.IntFilter<"Activity"> | number
  createdAt?: Prisma.DateTimeFilter<"Activity"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Activity"> | Date | string
}

export type ActivityCreateManyUserInput = {
  id?: number
  type?: number
  data: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActivityUpdateWithoutUserInput = {
  type?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActivityUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.IntFieldUpdateOperationsInput | number
  data?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ActivitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  data?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["activity"]>

export type ActivitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  data?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["activity"]>

export type ActivitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  data?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["activity"]>

export type ActivitySelectScalar = {
  id?: boolean
  type?: boolean
  data?: boolean
  userID?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ActivityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "data" | "userID" | "createdAt" | "updatedAt", ExtArgs["result"]["activity"]>
export type ActivityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ActivityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ActivityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ActivityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Activity"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    /**
     * activity-type.enum.ts
     */
    type: number
    /**
     * This is used as a primary key into one of many possible tables,
     * determined by the value of `type`.
     */
    data: bigint
    userID: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["activity"]>
  composites: {}
}

export type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ActivityPayload, S>

export type ActivityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ActivityCountAggregateInputType | true
  }

export interface ActivityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
  /**
   * Find zero or one Activity that matches the filter.
   * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
   * @example
   * // Get one Activity
   * const activity = await prisma.activity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ActivityFindUniqueArgs>(args: Prisma.SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
   * @example
   * // Get one Activity
   * const activity = await prisma.activity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Activity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
   * @example
   * // Get one Activity
   * const activity = await prisma.activity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ActivityFindFirstArgs>(args?: Prisma.SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Activity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
   * @example
   * // Get one Activity
   * const activity = await prisma.activity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Activities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Activities
   * const activities = await prisma.activity.findMany()
   * 
   * // Get first 10 Activities
   * const activities = await prisma.activity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ActivityFindManyArgs>(args?: Prisma.SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Activity.
   * @param {ActivityCreateArgs} args - Arguments to create a Activity.
   * @example
   * // Create one Activity
   * const Activity = await prisma.activity.create({
   *   data: {
   *     // ... data to create a Activity
   *   }
   * })
   * 
   */
  create<T extends ActivityCreateArgs>(args: Prisma.SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Activities.
   * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
   * @example
   * // Create many Activities
   * const activity = await prisma.activity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ActivityCreateManyArgs>(args?: Prisma.SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Activities and returns the data saved in the database.
   * @param {ActivityCreateManyAndReturnArgs} args - Arguments to create many Activities.
   * @example
   * // Create many Activities
   * const activity = await prisma.activity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Activities and only return the `id`
   * const activityWithIdOnly = await prisma.activity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ActivityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Activity.
   * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
   * @example
   * // Delete one Activity
   * const Activity = await prisma.activity.delete({
   *   where: {
   *     // ... filter to delete one Activity
   *   }
   * })
   * 
   */
  delete<T extends ActivityDeleteArgs>(args: Prisma.SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Activity.
   * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
   * @example
   * // Update one Activity
   * const activity = await prisma.activity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ActivityUpdateArgs>(args: Prisma.SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Activities.
   * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
   * @example
   * // Delete a few Activities
   * const { count } = await prisma.activity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ActivityDeleteManyArgs>(args?: Prisma.SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Activities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Activities
   * const activity = await prisma.activity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ActivityUpdateManyArgs>(args: Prisma.SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Activities and returns the data updated in the database.
   * @param {ActivityUpdateManyAndReturnArgs} args - Arguments to update many Activities.
   * @example
   * // Update many Activities
   * const activity = await prisma.activity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Activities and only return the `id`
   * const activityWithIdOnly = await prisma.activity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ActivityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Activity.
   * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
   * @example
   * // Update or create a Activity
   * const activity = await prisma.activity.upsert({
   *   create: {
   *     // ... data to create a Activity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Activity we want to update
   *   }
   * })
   */
  upsert<T extends ActivityUpsertArgs>(args: Prisma.SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma.Prisma__ActivityClient<runtime.Types.Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Activities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
   * @example
   * // Count the number of Activities
   * const count = await prisma.activity.count({
   *   where: {
   *     // ... the filter for the Activities we want to count
   *   }
   * })
  **/
  count<T extends ActivityCountArgs>(
    args?: Prisma.Subset<T, ActivityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ActivityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Activity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ActivityAggregateArgs>(args: Prisma.Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

  /**
   * Group by Activity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActivityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ActivityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ActivityGroupByArgs['orderBy'] }
      : { orderBy?: ActivityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Activity model
 */
readonly fields: ActivityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Activity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Activity model
 */
export interface ActivityFieldRefs {
  readonly id: Prisma.FieldRef<"Activity", 'Int'>
  readonly type: Prisma.FieldRef<"Activity", 'Int'>
  readonly data: Prisma.FieldRef<"Activity", 'BigInt'>
  readonly userID: Prisma.FieldRef<"Activity", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Activity", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Activity", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Activity findUnique
 */
export type ActivityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * Filter, which Activity to fetch.
   */
  where: Prisma.ActivityWhereUniqueInput
}

/**
 * Activity findUniqueOrThrow
 */
export type ActivityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * Filter, which Activity to fetch.
   */
  where: Prisma.ActivityWhereUniqueInput
}

/**
 * Activity findFirst
 */
export type ActivityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * Filter, which Activity to fetch.
   */
  where?: Prisma.ActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Activities to fetch.
   */
  orderBy?: Prisma.ActivityOrderByWithRelationInput | Prisma.ActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Activities.
   */
  cursor?: Prisma.ActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Activities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Activities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Activities.
   */
  distinct?: Prisma.ActivityScalarFieldEnum | Prisma.ActivityScalarFieldEnum[]
}

/**
 * Activity findFirstOrThrow
 */
export type ActivityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * Filter, which Activity to fetch.
   */
  where?: Prisma.ActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Activities to fetch.
   */
  orderBy?: Prisma.ActivityOrderByWithRelationInput | Prisma.ActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Activities.
   */
  cursor?: Prisma.ActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Activities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Activities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Activities.
   */
  distinct?: Prisma.ActivityScalarFieldEnum | Prisma.ActivityScalarFieldEnum[]
}

/**
 * Activity findMany
 */
export type ActivityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * Filter, which Activities to fetch.
   */
  where?: Prisma.ActivityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Activities to fetch.
   */
  orderBy?: Prisma.ActivityOrderByWithRelationInput | Prisma.ActivityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Activities.
   */
  cursor?: Prisma.ActivityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Activities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Activities.
   */
  skip?: number
  distinct?: Prisma.ActivityScalarFieldEnum | Prisma.ActivityScalarFieldEnum[]
}

/**
 * Activity create
 */
export type ActivityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * The data needed to create a Activity.
   */
  data: Prisma.XOR<Prisma.ActivityCreateInput, Prisma.ActivityUncheckedCreateInput>
}

/**
 * Activity createMany
 */
export type ActivityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Activities.
   */
  data: Prisma.ActivityCreateManyInput | Prisma.ActivityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Activity createManyAndReturn
 */
export type ActivityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * The data used to create many Activities.
   */
  data: Prisma.ActivityCreateManyInput | Prisma.ActivityCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Activity update
 */
export type ActivityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * The data needed to update a Activity.
   */
  data: Prisma.XOR<Prisma.ActivityUpdateInput, Prisma.ActivityUncheckedUpdateInput>
  /**
   * Choose, which Activity to update.
   */
  where: Prisma.ActivityWhereUniqueInput
}

/**
 * Activity updateMany
 */
export type ActivityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Activities.
   */
  data: Prisma.XOR<Prisma.ActivityUpdateManyMutationInput, Prisma.ActivityUncheckedUpdateManyInput>
  /**
   * Filter which Activities to update
   */
  where?: Prisma.ActivityWhereInput
  /**
   * Limit how many Activities to update.
   */
  limit?: number
}

/**
 * Activity updateManyAndReturn
 */
export type ActivityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * The data used to update Activities.
   */
  data: Prisma.XOR<Prisma.ActivityUpdateManyMutationInput, Prisma.ActivityUncheckedUpdateManyInput>
  /**
   * Filter which Activities to update
   */
  where?: Prisma.ActivityWhereInput
  /**
   * Limit how many Activities to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Activity upsert
 */
export type ActivityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * The filter to search for the Activity to update in case it exists.
   */
  where: Prisma.ActivityWhereUniqueInput
  /**
   * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
   */
  create: Prisma.XOR<Prisma.ActivityCreateInput, Prisma.ActivityUncheckedCreateInput>
  /**
   * In case the Activity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ActivityUpdateInput, Prisma.ActivityUncheckedUpdateInput>
}

/**
 * Activity delete
 */
export type ActivityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
  /**
   * Filter which Activity to delete.
   */
  where: Prisma.ActivityWhereUniqueInput
}

/**
 * Activity deleteMany
 */
export type ActivityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Activities to delete
   */
  where?: Prisma.ActivityWhereInput
  /**
   * Limit how many Activities to delete.
   */
  limit?: number
}

/**
 * Activity without action
 */
export type ActivityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Activity
   */
  select?: Prisma.ActivitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Activity
   */
  omit?: Prisma.ActivityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActivityInclude<ExtArgs> | null
}
