
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
export const prismaVersion: PrismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Profile: 'Profile',
  UserAuth: 'UserAuth',
  UserStats: 'UserStats',
  DeletedUser: 'DeletedUser',
  Report: 'Report',
  Activity: 'Activity',
  Follow: 'Follow',
  Notification: 'Notification',
  MapNotify: 'MapNotify',
  MMap: 'MMap',
  MapVersion: 'MapVersion',
  MapCredit: 'MapCredit',
  MapFavorite: 'MapFavorite',
  MapInfo: 'MapInfo',
  MapStats: 'MapStats',
  MapTestInvite: 'MapTestInvite',
  MapSubmission: 'MapSubmission',
  MapSubmissionDate: 'MapSubmissionDate',
  MapReview: 'MapReview',
  MapReviewComment: 'MapReviewComment',
  MapReviewStats: 'MapReviewStats',
  Leaderboard: 'Leaderboard',
  LeaderboardRun: 'LeaderboardRun',
  PastRun: 'PastRun',
  AdminActivity: 'AdminActivity',
  Config: 'Config'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "profile" | "userAuth" | "userStats" | "deletedUser" | "report" | "activity" | "follow" | "notification" | "mapNotify" | "mMap" | "mapVersion" | "mapCredit" | "mapFavorite" | "mapInfo" | "mapStats" | "mapTestInvite" | "mapSubmission" | "mapSubmissionDate" | "mapReview" | "mapReviewComment" | "mapReviewStats" | "leaderboard" | "leaderboardRun" | "pastRun" | "adminActivity" | "config"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Profile: {
      payload: Prisma.$ProfilePayload<ExtArgs>
      fields: Prisma.ProfileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProfileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        findFirst: {
          args: Prisma.ProfileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        findMany: {
          args: Prisma.ProfileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        create: {
          args: Prisma.ProfileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        createMany: {
          args: Prisma.ProfileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        delete: {
          args: Prisma.ProfileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        update: {
          args: Prisma.ProfileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        deleteMany: {
          args: Prisma.ProfileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProfileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        upsert: {
          args: Prisma.ProfileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        aggregate: {
          args: Prisma.ProfileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProfile>
        }
        groupBy: {
          args: Prisma.ProfileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProfileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileCountAggregateOutputType> | number
        }
      }
    }
    UserAuth: {
      payload: Prisma.$UserAuthPayload<ExtArgs>
      fields: Prisma.UserAuthFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserAuthFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserAuthFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>
        }
        findFirst: {
          args: Prisma.UserAuthFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserAuthFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>
        }
        findMany: {
          args: Prisma.UserAuthFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>[]
        }
        create: {
          args: Prisma.UserAuthCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>
        }
        createMany: {
          args: Prisma.UserAuthCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserAuthCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>[]
        }
        delete: {
          args: Prisma.UserAuthDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>
        }
        update: {
          args: Prisma.UserAuthUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>
        }
        deleteMany: {
          args: Prisma.UserAuthDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserAuthUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserAuthUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>[]
        }
        upsert: {
          args: Prisma.UserAuthUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserAuthPayload>
        }
        aggregate: {
          args: Prisma.UserAuthAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserAuth>
        }
        groupBy: {
          args: Prisma.UserAuthGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserAuthGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserAuthCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserAuthCountAggregateOutputType> | number
        }
      }
    }
    UserStats: {
      payload: Prisma.$UserStatsPayload<ExtArgs>
      fields: Prisma.UserStatsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserStatsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserStatsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>
        }
        findFirst: {
          args: Prisma.UserStatsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserStatsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>
        }
        findMany: {
          args: Prisma.UserStatsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>[]
        }
        create: {
          args: Prisma.UserStatsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>
        }
        createMany: {
          args: Prisma.UserStatsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserStatsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>[]
        }
        delete: {
          args: Prisma.UserStatsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>
        }
        update: {
          args: Prisma.UserStatsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>
        }
        deleteMany: {
          args: Prisma.UserStatsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserStatsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserStatsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>[]
        }
        upsert: {
          args: Prisma.UserStatsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserStatsPayload>
        }
        aggregate: {
          args: Prisma.UserStatsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserStats>
        }
        groupBy: {
          args: Prisma.UserStatsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserStatsGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserStatsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserStatsCountAggregateOutputType> | number
        }
      }
    }
    DeletedUser: {
      payload: Prisma.$DeletedUserPayload<ExtArgs>
      fields: Prisma.DeletedUserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DeletedUserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DeletedUserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>
        }
        findFirst: {
          args: Prisma.DeletedUserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DeletedUserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>
        }
        findMany: {
          args: Prisma.DeletedUserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>[]
        }
        create: {
          args: Prisma.DeletedUserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>
        }
        createMany: {
          args: Prisma.DeletedUserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DeletedUserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>[]
        }
        delete: {
          args: Prisma.DeletedUserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>
        }
        update: {
          args: Prisma.DeletedUserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>
        }
        deleteMany: {
          args: Prisma.DeletedUserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DeletedUserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DeletedUserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>[]
        }
        upsert: {
          args: Prisma.DeletedUserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeletedUserPayload>
        }
        aggregate: {
          args: Prisma.DeletedUserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDeletedUser>
        }
        groupBy: {
          args: Prisma.DeletedUserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DeletedUserGroupByOutputType>[]
        }
        count: {
          args: Prisma.DeletedUserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DeletedUserCountAggregateOutputType> | number
        }
      }
    }
    Report: {
      payload: Prisma.$ReportPayload<ExtArgs>
      fields: Prisma.ReportFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReportFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findFirst: {
          args: Prisma.ReportFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findMany: {
          args: Prisma.ReportFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        create: {
          args: Prisma.ReportCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        createMany: {
          args: Prisma.ReportCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        delete: {
          args: Prisma.ReportDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        update: {
          args: Prisma.ReportUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        deleteMany: {
          args: Prisma.ReportDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReportUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        upsert: {
          args: Prisma.ReportUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        aggregate: {
          args: Prisma.ReportAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReport>
        }
        groupBy: {
          args: Prisma.ReportGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReportCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportCountAggregateOutputType> | number
        }
      }
    }
    Activity: {
      payload: Prisma.$ActivityPayload<ExtArgs>
      fields: Prisma.ActivityFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ActivityFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>
        }
        findFirst: {
          args: Prisma.ActivityFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>
        }
        findMany: {
          args: Prisma.ActivityFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>[]
        }
        create: {
          args: Prisma.ActivityCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>
        }
        createMany: {
          args: Prisma.ActivityCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ActivityCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>[]
        }
        delete: {
          args: Prisma.ActivityDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>
        }
        update: {
          args: Prisma.ActivityUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>
        }
        deleteMany: {
          args: Prisma.ActivityDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ActivityUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ActivityUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>[]
        }
        upsert: {
          args: Prisma.ActivityUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityPayload>
        }
        aggregate: {
          args: Prisma.ActivityAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateActivity>
        }
        groupBy: {
          args: Prisma.ActivityGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ActivityGroupByOutputType>[]
        }
        count: {
          args: Prisma.ActivityCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ActivityCountAggregateOutputType> | number
        }
      }
    }
    Follow: {
      payload: Prisma.$FollowPayload<ExtArgs>
      fields: Prisma.FollowFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FollowFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        findFirst: {
          args: Prisma.FollowFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        findMany: {
          args: Prisma.FollowFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>[]
        }
        create: {
          args: Prisma.FollowCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        createMany: {
          args: Prisma.FollowCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FollowCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>[]
        }
        delete: {
          args: Prisma.FollowDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        update: {
          args: Prisma.FollowUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        deleteMany: {
          args: Prisma.FollowDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FollowUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FollowUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>[]
        }
        upsert: {
          args: Prisma.FollowUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FollowPayload>
        }
        aggregate: {
          args: Prisma.FollowAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFollow>
        }
        groupBy: {
          args: Prisma.FollowGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FollowGroupByOutputType>[]
        }
        count: {
          args: Prisma.FollowCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FollowCountAggregateOutputType> | number
        }
      }
    }
    Notification: {
      payload: Prisma.$NotificationPayload<ExtArgs>
      fields: Prisma.NotificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.NotificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        findFirst: {
          args: Prisma.NotificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        findMany: {
          args: Prisma.NotificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        create: {
          args: Prisma.NotificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        createMany: {
          args: Prisma.NotificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        delete: {
          args: Prisma.NotificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        update: {
          args: Prisma.NotificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        deleteMany: {
          args: Prisma.NotificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.NotificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        upsert: {
          args: Prisma.NotificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        aggregate: {
          args: Prisma.NotificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotification>
        }
        groupBy: {
          args: Prisma.NotificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.NotificationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationCountAggregateOutputType> | number
        }
      }
    }
    MapNotify: {
      payload: Prisma.$MapNotifyPayload<ExtArgs>
      fields: Prisma.MapNotifyFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapNotifyFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapNotifyFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>
        }
        findFirst: {
          args: Prisma.MapNotifyFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapNotifyFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>
        }
        findMany: {
          args: Prisma.MapNotifyFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>[]
        }
        create: {
          args: Prisma.MapNotifyCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>
        }
        createMany: {
          args: Prisma.MapNotifyCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapNotifyCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>[]
        }
        delete: {
          args: Prisma.MapNotifyDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>
        }
        update: {
          args: Prisma.MapNotifyUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>
        }
        deleteMany: {
          args: Prisma.MapNotifyDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapNotifyUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapNotifyUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>[]
        }
        upsert: {
          args: Prisma.MapNotifyUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapNotifyPayload>
        }
        aggregate: {
          args: Prisma.MapNotifyAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapNotify>
        }
        groupBy: {
          args: Prisma.MapNotifyGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapNotifyGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapNotifyCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapNotifyCountAggregateOutputType> | number
        }
      }
    }
    MMap: {
      payload: Prisma.$MMapPayload<ExtArgs>
      fields: Prisma.MMapFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MMapFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MMapFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>
        }
        findFirst: {
          args: Prisma.MMapFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MMapFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>
        }
        findMany: {
          args: Prisma.MMapFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>[]
        }
        create: {
          args: Prisma.MMapCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>
        }
        createMany: {
          args: Prisma.MMapCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MMapCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>[]
        }
        delete: {
          args: Prisma.MMapDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>
        }
        update: {
          args: Prisma.MMapUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>
        }
        deleteMany: {
          args: Prisma.MMapDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MMapUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MMapUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>[]
        }
        upsert: {
          args: Prisma.MMapUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MMapPayload>
        }
        aggregate: {
          args: Prisma.MMapAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMMap>
        }
        groupBy: {
          args: Prisma.MMapGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MMapGroupByOutputType>[]
        }
        count: {
          args: Prisma.MMapCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MMapCountAggregateOutputType> | number
        }
      }
    }
    MapVersion: {
      payload: Prisma.$MapVersionPayload<ExtArgs>
      fields: Prisma.MapVersionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapVersionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapVersionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>
        }
        findFirst: {
          args: Prisma.MapVersionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapVersionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>
        }
        findMany: {
          args: Prisma.MapVersionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>[]
        }
        create: {
          args: Prisma.MapVersionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>
        }
        createMany: {
          args: Prisma.MapVersionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapVersionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>[]
        }
        delete: {
          args: Prisma.MapVersionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>
        }
        update: {
          args: Prisma.MapVersionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>
        }
        deleteMany: {
          args: Prisma.MapVersionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapVersionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapVersionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>[]
        }
        upsert: {
          args: Prisma.MapVersionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapVersionPayload>
        }
        aggregate: {
          args: Prisma.MapVersionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapVersion>
        }
        groupBy: {
          args: Prisma.MapVersionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapVersionGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapVersionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapVersionCountAggregateOutputType> | number
        }
      }
    }
    MapCredit: {
      payload: Prisma.$MapCreditPayload<ExtArgs>
      fields: Prisma.MapCreditFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapCreditFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapCreditFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>
        }
        findFirst: {
          args: Prisma.MapCreditFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapCreditFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>
        }
        findMany: {
          args: Prisma.MapCreditFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>[]
        }
        create: {
          args: Prisma.MapCreditCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>
        }
        createMany: {
          args: Prisma.MapCreditCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapCreditCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>[]
        }
        delete: {
          args: Prisma.MapCreditDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>
        }
        update: {
          args: Prisma.MapCreditUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>
        }
        deleteMany: {
          args: Prisma.MapCreditDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapCreditUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapCreditUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>[]
        }
        upsert: {
          args: Prisma.MapCreditUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapCreditPayload>
        }
        aggregate: {
          args: Prisma.MapCreditAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapCredit>
        }
        groupBy: {
          args: Prisma.MapCreditGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapCreditGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapCreditCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapCreditCountAggregateOutputType> | number
        }
      }
    }
    MapFavorite: {
      payload: Prisma.$MapFavoritePayload<ExtArgs>
      fields: Prisma.MapFavoriteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapFavoriteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapFavoriteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>
        }
        findFirst: {
          args: Prisma.MapFavoriteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapFavoriteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>
        }
        findMany: {
          args: Prisma.MapFavoriteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>[]
        }
        create: {
          args: Prisma.MapFavoriteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>
        }
        createMany: {
          args: Prisma.MapFavoriteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapFavoriteCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>[]
        }
        delete: {
          args: Prisma.MapFavoriteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>
        }
        update: {
          args: Prisma.MapFavoriteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>
        }
        deleteMany: {
          args: Prisma.MapFavoriteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapFavoriteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapFavoriteUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>[]
        }
        upsert: {
          args: Prisma.MapFavoriteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapFavoritePayload>
        }
        aggregate: {
          args: Prisma.MapFavoriteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapFavorite>
        }
        groupBy: {
          args: Prisma.MapFavoriteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapFavoriteGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapFavoriteCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapFavoriteCountAggregateOutputType> | number
        }
      }
    }
    MapInfo: {
      payload: Prisma.$MapInfoPayload<ExtArgs>
      fields: Prisma.MapInfoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapInfoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapInfoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>
        }
        findFirst: {
          args: Prisma.MapInfoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapInfoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>
        }
        findMany: {
          args: Prisma.MapInfoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>[]
        }
        create: {
          args: Prisma.MapInfoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>
        }
        createMany: {
          args: Prisma.MapInfoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapInfoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>[]
        }
        delete: {
          args: Prisma.MapInfoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>
        }
        update: {
          args: Prisma.MapInfoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>
        }
        deleteMany: {
          args: Prisma.MapInfoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapInfoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapInfoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>[]
        }
        upsert: {
          args: Prisma.MapInfoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapInfoPayload>
        }
        aggregate: {
          args: Prisma.MapInfoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapInfo>
        }
        groupBy: {
          args: Prisma.MapInfoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapInfoGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapInfoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapInfoCountAggregateOutputType> | number
        }
      }
    }
    MapStats: {
      payload: Prisma.$MapStatsPayload<ExtArgs>
      fields: Prisma.MapStatsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapStatsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapStatsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>
        }
        findFirst: {
          args: Prisma.MapStatsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapStatsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>
        }
        findMany: {
          args: Prisma.MapStatsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>[]
        }
        create: {
          args: Prisma.MapStatsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>
        }
        createMany: {
          args: Prisma.MapStatsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapStatsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>[]
        }
        delete: {
          args: Prisma.MapStatsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>
        }
        update: {
          args: Prisma.MapStatsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>
        }
        deleteMany: {
          args: Prisma.MapStatsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapStatsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapStatsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>[]
        }
        upsert: {
          args: Prisma.MapStatsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapStatsPayload>
        }
        aggregate: {
          args: Prisma.MapStatsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapStats>
        }
        groupBy: {
          args: Prisma.MapStatsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapStatsGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapStatsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapStatsCountAggregateOutputType> | number
        }
      }
    }
    MapTestInvite: {
      payload: Prisma.$MapTestInvitePayload<ExtArgs>
      fields: Prisma.MapTestInviteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapTestInviteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapTestInviteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>
        }
        findFirst: {
          args: Prisma.MapTestInviteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapTestInviteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>
        }
        findMany: {
          args: Prisma.MapTestInviteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>[]
        }
        create: {
          args: Prisma.MapTestInviteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>
        }
        createMany: {
          args: Prisma.MapTestInviteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapTestInviteCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>[]
        }
        delete: {
          args: Prisma.MapTestInviteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>
        }
        update: {
          args: Prisma.MapTestInviteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>
        }
        deleteMany: {
          args: Prisma.MapTestInviteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapTestInviteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapTestInviteUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>[]
        }
        upsert: {
          args: Prisma.MapTestInviteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapTestInvitePayload>
        }
        aggregate: {
          args: Prisma.MapTestInviteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapTestInvite>
        }
        groupBy: {
          args: Prisma.MapTestInviteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapTestInviteGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapTestInviteCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapTestInviteCountAggregateOutputType> | number
        }
      }
    }
    MapSubmission: {
      payload: Prisma.$MapSubmissionPayload<ExtArgs>
      fields: Prisma.MapSubmissionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapSubmissionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapSubmissionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>
        }
        findFirst: {
          args: Prisma.MapSubmissionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapSubmissionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>
        }
        findMany: {
          args: Prisma.MapSubmissionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>[]
        }
        create: {
          args: Prisma.MapSubmissionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>
        }
        createMany: {
          args: Prisma.MapSubmissionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapSubmissionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>[]
        }
        delete: {
          args: Prisma.MapSubmissionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>
        }
        update: {
          args: Prisma.MapSubmissionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>
        }
        deleteMany: {
          args: Prisma.MapSubmissionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapSubmissionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapSubmissionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>[]
        }
        upsert: {
          args: Prisma.MapSubmissionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionPayload>
        }
        aggregate: {
          args: Prisma.MapSubmissionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapSubmission>
        }
        groupBy: {
          args: Prisma.MapSubmissionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapSubmissionGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapSubmissionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapSubmissionCountAggregateOutputType> | number
        }
      }
    }
    MapSubmissionDate: {
      payload: Prisma.$MapSubmissionDatePayload<ExtArgs>
      fields: Prisma.MapSubmissionDateFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapSubmissionDateFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapSubmissionDateFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>
        }
        findFirst: {
          args: Prisma.MapSubmissionDateFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapSubmissionDateFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>
        }
        findMany: {
          args: Prisma.MapSubmissionDateFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>[]
        }
        create: {
          args: Prisma.MapSubmissionDateCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>
        }
        createMany: {
          args: Prisma.MapSubmissionDateCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapSubmissionDateCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>[]
        }
        delete: {
          args: Prisma.MapSubmissionDateDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>
        }
        update: {
          args: Prisma.MapSubmissionDateUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>
        }
        deleteMany: {
          args: Prisma.MapSubmissionDateDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapSubmissionDateUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapSubmissionDateUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>[]
        }
        upsert: {
          args: Prisma.MapSubmissionDateUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapSubmissionDatePayload>
        }
        aggregate: {
          args: Prisma.MapSubmissionDateAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapSubmissionDate>
        }
        groupBy: {
          args: Prisma.MapSubmissionDateGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapSubmissionDateGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapSubmissionDateCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapSubmissionDateCountAggregateOutputType> | number
        }
      }
    }
    MapReview: {
      payload: Prisma.$MapReviewPayload<ExtArgs>
      fields: Prisma.MapReviewFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapReviewFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapReviewFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>
        }
        findFirst: {
          args: Prisma.MapReviewFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapReviewFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>
        }
        findMany: {
          args: Prisma.MapReviewFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>[]
        }
        create: {
          args: Prisma.MapReviewCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>
        }
        createMany: {
          args: Prisma.MapReviewCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapReviewCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>[]
        }
        delete: {
          args: Prisma.MapReviewDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>
        }
        update: {
          args: Prisma.MapReviewUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>
        }
        deleteMany: {
          args: Prisma.MapReviewDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapReviewUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapReviewUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>[]
        }
        upsert: {
          args: Prisma.MapReviewUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewPayload>
        }
        aggregate: {
          args: Prisma.MapReviewAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapReview>
        }
        groupBy: {
          args: Prisma.MapReviewGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapReviewGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapReviewCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapReviewCountAggregateOutputType> | number
        }
      }
    }
    MapReviewComment: {
      payload: Prisma.$MapReviewCommentPayload<ExtArgs>
      fields: Prisma.MapReviewCommentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapReviewCommentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapReviewCommentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>
        }
        findFirst: {
          args: Prisma.MapReviewCommentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapReviewCommentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>
        }
        findMany: {
          args: Prisma.MapReviewCommentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>[]
        }
        create: {
          args: Prisma.MapReviewCommentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>
        }
        createMany: {
          args: Prisma.MapReviewCommentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapReviewCommentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>[]
        }
        delete: {
          args: Prisma.MapReviewCommentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>
        }
        update: {
          args: Prisma.MapReviewCommentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>
        }
        deleteMany: {
          args: Prisma.MapReviewCommentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapReviewCommentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapReviewCommentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>[]
        }
        upsert: {
          args: Prisma.MapReviewCommentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewCommentPayload>
        }
        aggregate: {
          args: Prisma.MapReviewCommentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapReviewComment>
        }
        groupBy: {
          args: Prisma.MapReviewCommentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapReviewCommentGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapReviewCommentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapReviewCommentCountAggregateOutputType> | number
        }
      }
    }
    MapReviewStats: {
      payload: Prisma.$MapReviewStatsPayload<ExtArgs>
      fields: Prisma.MapReviewStatsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MapReviewStatsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MapReviewStatsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>
        }
        findFirst: {
          args: Prisma.MapReviewStatsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MapReviewStatsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>
        }
        findMany: {
          args: Prisma.MapReviewStatsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>[]
        }
        create: {
          args: Prisma.MapReviewStatsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>
        }
        createMany: {
          args: Prisma.MapReviewStatsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MapReviewStatsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>[]
        }
        delete: {
          args: Prisma.MapReviewStatsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>
        }
        update: {
          args: Prisma.MapReviewStatsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>
        }
        deleteMany: {
          args: Prisma.MapReviewStatsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MapReviewStatsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MapReviewStatsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>[]
        }
        upsert: {
          args: Prisma.MapReviewStatsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MapReviewStatsPayload>
        }
        aggregate: {
          args: Prisma.MapReviewStatsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMapReviewStats>
        }
        groupBy: {
          args: Prisma.MapReviewStatsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapReviewStatsGroupByOutputType>[]
        }
        count: {
          args: Prisma.MapReviewStatsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MapReviewStatsCountAggregateOutputType> | number
        }
      }
    }
    Leaderboard: {
      payload: Prisma.$LeaderboardPayload<ExtArgs>
      fields: Prisma.LeaderboardFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LeaderboardFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LeaderboardFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        findFirst: {
          args: Prisma.LeaderboardFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LeaderboardFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        findMany: {
          args: Prisma.LeaderboardFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>[]
        }
        create: {
          args: Prisma.LeaderboardCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        createMany: {
          args: Prisma.LeaderboardCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LeaderboardCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>[]
        }
        delete: {
          args: Prisma.LeaderboardDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        update: {
          args: Prisma.LeaderboardUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        deleteMany: {
          args: Prisma.LeaderboardDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LeaderboardUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LeaderboardUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>[]
        }
        upsert: {
          args: Prisma.LeaderboardUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardPayload>
        }
        aggregate: {
          args: Prisma.LeaderboardAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLeaderboard>
        }
        groupBy: {
          args: Prisma.LeaderboardGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaderboardGroupByOutputType>[]
        }
        count: {
          args: Prisma.LeaderboardCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaderboardCountAggregateOutputType> | number
        }
      }
    }
    LeaderboardRun: {
      payload: Prisma.$LeaderboardRunPayload<ExtArgs>
      fields: Prisma.LeaderboardRunFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LeaderboardRunFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LeaderboardRunFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>
        }
        findFirst: {
          args: Prisma.LeaderboardRunFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LeaderboardRunFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>
        }
        findMany: {
          args: Prisma.LeaderboardRunFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>[]
        }
        create: {
          args: Prisma.LeaderboardRunCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>
        }
        createMany: {
          args: Prisma.LeaderboardRunCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LeaderboardRunCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>[]
        }
        delete: {
          args: Prisma.LeaderboardRunDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>
        }
        update: {
          args: Prisma.LeaderboardRunUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>
        }
        deleteMany: {
          args: Prisma.LeaderboardRunDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LeaderboardRunUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LeaderboardRunUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>[]
        }
        upsert: {
          args: Prisma.LeaderboardRunUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LeaderboardRunPayload>
        }
        aggregate: {
          args: Prisma.LeaderboardRunAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLeaderboardRun>
        }
        groupBy: {
          args: Prisma.LeaderboardRunGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaderboardRunGroupByOutputType>[]
        }
        count: {
          args: Prisma.LeaderboardRunCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaderboardRunCountAggregateOutputType> | number
        }
      }
    }
    PastRun: {
      payload: Prisma.$PastRunPayload<ExtArgs>
      fields: Prisma.PastRunFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PastRunFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PastRunFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>
        }
        findFirst: {
          args: Prisma.PastRunFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PastRunFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>
        }
        findMany: {
          args: Prisma.PastRunFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>[]
        }
        create: {
          args: Prisma.PastRunCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>
        }
        createMany: {
          args: Prisma.PastRunCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PastRunCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>[]
        }
        delete: {
          args: Prisma.PastRunDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>
        }
        update: {
          args: Prisma.PastRunUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>
        }
        deleteMany: {
          args: Prisma.PastRunDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PastRunUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PastRunUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>[]
        }
        upsert: {
          args: Prisma.PastRunUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PastRunPayload>
        }
        aggregate: {
          args: Prisma.PastRunAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePastRun>
        }
        groupBy: {
          args: Prisma.PastRunGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PastRunGroupByOutputType>[]
        }
        count: {
          args: Prisma.PastRunCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PastRunCountAggregateOutputType> | number
        }
      }
    }
    AdminActivity: {
      payload: Prisma.$AdminActivityPayload<ExtArgs>
      fields: Prisma.AdminActivityFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AdminActivityFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AdminActivityFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>
        }
        findFirst: {
          args: Prisma.AdminActivityFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AdminActivityFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>
        }
        findMany: {
          args: Prisma.AdminActivityFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>[]
        }
        create: {
          args: Prisma.AdminActivityCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>
        }
        createMany: {
          args: Prisma.AdminActivityCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AdminActivityCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>[]
        }
        delete: {
          args: Prisma.AdminActivityDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>
        }
        update: {
          args: Prisma.AdminActivityUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>
        }
        deleteMany: {
          args: Prisma.AdminActivityDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AdminActivityUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AdminActivityUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>[]
        }
        upsert: {
          args: Prisma.AdminActivityUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminActivityPayload>
        }
        aggregate: {
          args: Prisma.AdminActivityAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAdminActivity>
        }
        groupBy: {
          args: Prisma.AdminActivityGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AdminActivityGroupByOutputType>[]
        }
        count: {
          args: Prisma.AdminActivityCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AdminActivityCountAggregateOutputType> | number
        }
      }
    }
    Config: {
      payload: Prisma.$ConfigPayload<ExtArgs>
      fields: Prisma.ConfigFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ConfigFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ConfigFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>
        }
        findFirst: {
          args: Prisma.ConfigFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ConfigFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>
        }
        findMany: {
          args: Prisma.ConfigFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>[]
        }
        create: {
          args: Prisma.ConfigCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>
        }
        createMany: {
          args: Prisma.ConfigCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ConfigCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>[]
        }
        delete: {
          args: Prisma.ConfigDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>
        }
        update: {
          args: Prisma.ConfigUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>
        }
        deleteMany: {
          args: Prisma.ConfigDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ConfigUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ConfigUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>[]
        }
        upsert: {
          args: Prisma.ConfigUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigPayload>
        }
        aggregate: {
          args: Prisma.ConfigAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateConfig>
        }
        groupBy: {
          args: Prisma.ConfigGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConfigGroupByOutputType>[]
        }
        count: {
          args: Prisma.ConfigCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConfigCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRawTyped: {
        args: runtime.UnknownTypedSql,
        result: JsonObject
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  roles: 'roles',
  bans: 'bans',
  steamID: 'steamID',
  alias: 'alias',
  avatar: 'avatar',
  country: 'country',
  createdAt: 'createdAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const ProfileScalarFieldEnum = {
  bio: 'bio',
  socials: 'socials',
  userID: 'userID'
} as const

export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


export const UserAuthScalarFieldEnum = {
  refreshToken: 'refreshToken',
  userID: 'userID'
} as const

export type UserAuthScalarFieldEnum = (typeof UserAuthScalarFieldEnum)[keyof typeof UserAuthScalarFieldEnum]


export const UserStatsScalarFieldEnum = {
  totalJumps: 'totalJumps',
  totalStrafes: 'totalStrafes',
  level: 'level',
  cosXP: 'cosXP',
  mapsCompleted: 'mapsCompleted',
  runsSubmitted: 'runsSubmitted',
  userID: 'userID'
} as const

export type UserStatsScalarFieldEnum = (typeof UserStatsScalarFieldEnum)[keyof typeof UserStatsScalarFieldEnum]


export const DeletedUserScalarFieldEnum = {
  steamIDHash: 'steamIDHash'
} as const

export type DeletedUserScalarFieldEnum = (typeof DeletedUserScalarFieldEnum)[keyof typeof DeletedUserScalarFieldEnum]


export const ReportScalarFieldEnum = {
  id: 'id',
  type: 'type',
  data: 'data',
  category: 'category',
  message: 'message',
  resolved: 'resolved',
  resolutionMessage: 'resolutionMessage',
  submitterID: 'submitterID',
  resolverID: 'resolverID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


export const ActivityScalarFieldEnum = {
  id: 'id',
  type: 'type',
  data: 'data',
  userID: 'userID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


export const FollowScalarFieldEnum = {
  notifyOn: 'notifyOn',
  followedID: 'followedID',
  followeeID: 'followeeID',
  createdAt: 'createdAt'
} as const

export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


export const NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  isRead: 'isRead',
  json: 'json',
  notifiedUserID: 'notifiedUserID',
  userID: 'userID',
  mapID: 'mapID',
  reviewID: 'reviewID',
  reviewCommentID: 'reviewCommentID',
  createdAt: 'createdAt'
} as const

export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


export const MapNotifyScalarFieldEnum = {
  notifyOn: 'notifyOn',
  mapID: 'mapID',
  userID: 'userID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MapNotifyScalarFieldEnum = (typeof MapNotifyScalarFieldEnum)[keyof typeof MapNotifyScalarFieldEnum]


export const MMapScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  images: 'images',
  submitterID: 'submitterID',
  currentVersionID: 'currentVersionID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MMapScalarFieldEnum = (typeof MMapScalarFieldEnum)[keyof typeof MMapScalarFieldEnum]


export const MapVersionScalarFieldEnum = {
  id: 'id',
  versionNum: 'versionNum',
  changelog: 'changelog',
  bspHash: 'bspHash',
  zoneHash: 'zoneHash',
  bspDownloadId: 'bspDownloadId',
  vmfDownloadId: 'vmfDownloadId',
  zones: 'zones',
  submitterID: 'submitterID',
  mapID: 'mapID',
  createdAt: 'createdAt'
} as const

export type MapVersionScalarFieldEnum = (typeof MapVersionScalarFieldEnum)[keyof typeof MapVersionScalarFieldEnum]


export const MapCreditScalarFieldEnum = {
  type: 'type',
  description: 'description',
  mapID: 'mapID',
  userID: 'userID'
} as const

export type MapCreditScalarFieldEnum = (typeof MapCreditScalarFieldEnum)[keyof typeof MapCreditScalarFieldEnum]


export const MapFavoriteScalarFieldEnum = {
  id: 'id',
  mapID: 'mapID',
  userID: 'userID',
  createdAt: 'createdAt'
} as const

export type MapFavoriteScalarFieldEnum = (typeof MapFavoriteScalarFieldEnum)[keyof typeof MapFavoriteScalarFieldEnum]


export const MapInfoScalarFieldEnum = {
  description: 'description',
  youtubeID: 'youtubeID',
  creationDate: 'creationDate',
  approvedDate: 'approvedDate',
  requiredGames: 'requiredGames',
  mapID: 'mapID'
} as const

export type MapInfoScalarFieldEnum = (typeof MapInfoScalarFieldEnum)[keyof typeof MapInfoScalarFieldEnum]


export const MapStatsScalarFieldEnum = {
  reviews: 'reviews',
  subscriptions: 'subscriptions',
  plays: 'plays',
  favorites: 'favorites',
  completions: 'completions',
  uniqueCompletions: 'uniqueCompletions',
  timePlayed: 'timePlayed',
  mapID: 'mapID'
} as const

export type MapStatsScalarFieldEnum = (typeof MapStatsScalarFieldEnum)[keyof typeof MapStatsScalarFieldEnum]


export const MapTestInviteScalarFieldEnum = {
  mapID: 'mapID',
  userID: 'userID',
  state: 'state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MapTestInviteScalarFieldEnum = (typeof MapTestInviteScalarFieldEnum)[keyof typeof MapTestInviteScalarFieldEnum]


export const MapSubmissionScalarFieldEnum = {
  mapID: 'mapID',
  type: 'type',
  suggestions: 'suggestions',
  placeholders: 'placeholders',
  discordReviewThread: 'discordReviewThread'
} as const

export type MapSubmissionScalarFieldEnum = (typeof MapSubmissionScalarFieldEnum)[keyof typeof MapSubmissionScalarFieldEnum]


export const MapSubmissionDateScalarFieldEnum = {
  id: 'id',
  status: 'status',
  date: 'date',
  userID: 'userID',
  submissionMapID: 'submissionMapID'
} as const

export type MapSubmissionDateScalarFieldEnum = (typeof MapSubmissionDateScalarFieldEnum)[keyof typeof MapSubmissionDateScalarFieldEnum]


export const MapReviewScalarFieldEnum = {
  id: 'id',
  mainText: 'mainText',
  suggestions: 'suggestions',
  editHistory: 'editHistory',
  imageIDs: 'imageIDs',
  mapID: 'mapID',
  reviewerID: 'reviewerID',
  resolved: 'resolved',
  resolverID: 'resolverID',
  approves: 'approves',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MapReviewScalarFieldEnum = (typeof MapReviewScalarFieldEnum)[keyof typeof MapReviewScalarFieldEnum]


export const MapReviewCommentScalarFieldEnum = {
  id: 'id',
  text: 'text',
  userID: 'userID',
  reviewID: 'reviewID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MapReviewCommentScalarFieldEnum = (typeof MapReviewCommentScalarFieldEnum)[keyof typeof MapReviewCommentScalarFieldEnum]


export const MapReviewStatsScalarFieldEnum = {
  mapID: 'mapID',
  total: 'total',
  approvals: 'approvals',
  resolved: 'resolved',
  unresolved: 'unresolved'
} as const

export type MapReviewStatsScalarFieldEnum = (typeof MapReviewStatsScalarFieldEnum)[keyof typeof MapReviewStatsScalarFieldEnum]


export const LeaderboardScalarFieldEnum = {
  mapID: 'mapID',
  gamemode: 'gamemode',
  trackType: 'trackType',
  trackNum: 'trackNum',
  style: 'style',
  tier: 'tier',
  linear: 'linear',
  type: 'type',
  tags: 'tags'
} as const

export type LeaderboardScalarFieldEnum = (typeof LeaderboardScalarFieldEnum)[keyof typeof LeaderboardScalarFieldEnum]


export const LeaderboardRunScalarFieldEnum = {
  userID: 'userID',
  mapID: 'mapID',
  gamemode: 'gamemode',
  trackType: 'trackType',
  trackNum: 'trackNum',
  style: 'style',
  time: 'time',
  splits: 'splits',
  replayHash: 'replayHash',
  flags: 'flags',
  rank: 'rank',
  createdAt: 'createdAt',
  pastRunID: 'pastRunID'
} as const

export type LeaderboardRunScalarFieldEnum = (typeof LeaderboardRunScalarFieldEnum)[keyof typeof LeaderboardRunScalarFieldEnum]


export const PastRunScalarFieldEnum = {
  id: 'id',
  userID: 'userID',
  mapID: 'mapID',
  gamemode: 'gamemode',
  trackType: 'trackType',
  trackNum: 'trackNum',
  style: 'style',
  time: 'time',
  flags: 'flags',
  createdAt: 'createdAt'
} as const

export type PastRunScalarFieldEnum = (typeof PastRunScalarFieldEnum)[keyof typeof PastRunScalarFieldEnum]


export const AdminActivityScalarFieldEnum = {
  id: 'id',
  comment: 'comment',
  type: 'type',
  target: 'target',
  oldData: 'oldData',
  newData: 'newData',
  userID: 'userID',
  createdAt: 'createdAt'
} as const

export type AdminActivityScalarFieldEnum = (typeof AdminActivityScalarFieldEnum)[keyof typeof AdminActivityScalarFieldEnum]


export const ConfigScalarFieldEnum = {
  id: 'id',
  value: 'value'
} as const

export type ConfigScalarFieldEnum = (typeof ConfigScalarFieldEnum)[keyof typeof ConfigScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'BigInt'
 */
export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


/**
 * Reference to a field of type 'BigInt[]'
 */
export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  profile?: Prisma.ProfileOmit
  userAuth?: Prisma.UserAuthOmit
  userStats?: Prisma.UserStatsOmit
  deletedUser?: Prisma.DeletedUserOmit
  report?: Prisma.ReportOmit
  activity?: Prisma.ActivityOmit
  follow?: Prisma.FollowOmit
  notification?: Prisma.NotificationOmit
  mapNotify?: Prisma.MapNotifyOmit
  mMap?: Prisma.MMapOmit
  mapVersion?: Prisma.MapVersionOmit
  mapCredit?: Prisma.MapCreditOmit
  mapFavorite?: Prisma.MapFavoriteOmit
  mapInfo?: Prisma.MapInfoOmit
  mapStats?: Prisma.MapStatsOmit
  mapTestInvite?: Prisma.MapTestInviteOmit
  mapSubmission?: Prisma.MapSubmissionOmit
  mapSubmissionDate?: Prisma.MapSubmissionDateOmit
  mapReview?: Prisma.MapReviewOmit
  mapReviewComment?: Prisma.MapReviewCommentOmit
  mapReviewStats?: Prisma.MapReviewStatsOmit
  leaderboard?: Prisma.LeaderboardOmit
  leaderboardRun?: Prisma.LeaderboardRunOmit
  pastRun?: Prisma.PastRunOmit
  adminActivity?: Prisma.AdminActivityOmit
  config?: Prisma.ConfigOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

