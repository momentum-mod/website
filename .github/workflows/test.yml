name: Tests

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

env:
  NODE_ENV: test

jobs:
  client-tests:
    name: Client Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Resolve Yarn Cache Directory
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache Yarn Cache Directory
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('./client/yarn.lock') }}
        restore-keys: ${{ runner.os }}-${{ env.NODE_VERSION }}-

    - name: Run Tests
      run: |
        cd ./client/
        npm install -g @angular/cli && yarn install --prefer-offline
        npm run test

  server-tests:
    name: Server Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Resolve Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn Cache Directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('./server/yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Start MySQL Service
        run: sudo systemctl start mysql.service

      - name: Setup Database
        run: bash ./scripts/setup-db-test.sh

      - name: Run Tests
        run: |
          cd ./server/
          yarn install --prefer-offline
          npm test
